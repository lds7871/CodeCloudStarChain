-- MySQL dump 10.13  Distrib 8.0.19, for Win64 (x86_64)
--
-- Host: 113.45.240.54    Database: blog
-- ------------------------------------------------------
-- Server version	8.0.41

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `article_order`
--

DROP TABLE IF EXISTS `article_order`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `article_order` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '订单表的自增id',
  `user_id` int NOT NULL COMMENT '用户标识',
  `art_id` int NOT NULL COMMENT '文章标识',
  `trade_status` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '支付状态',
  `out_trade_no` varchar(2555) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '订单号',
  `total_amount` double NOT NULL COMMENT '交易的金额',
  `gmt_payment` datetime NOT NULL COMMENT '交易的支付时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `article_order`
--

LOCK TABLES `article_order` WRITE;
/*!40000 ALTER TABLE `article_order` DISABLE KEYS */;
/*!40000 ALTER TABLE `article_order` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `chat_msg`
--

DROP TABLE IF EXISTS `chat_msg`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `chat_msg` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `chat_id` bigint DEFAULT NULL,
  `sender_id` bigint NOT NULL COMMENT '发送人id',
  `type` enum('text','image') CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT 'text' COMMENT '消息类型',
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci COMMENT '内容',
  `is_recalled` tinyint(1) DEFAULT '0' COMMENT '是否撤回',
  `create_time` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '发送时间',
  `ip` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT 'ip地址',
  `location` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT 'ip归属地',
  `file_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '消息是文件时，存的文件名',
  `file_size` double DEFAULT NULL COMMENT '文件大小',
  `duration` int DEFAULT NULL COMMENT '语音时长',
  `reply_id` bigint DEFAULT NULL COMMENT '回复消息id',
  `reply_content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci COMMENT '回复消息内容',
  `reply_user_id` bigint DEFAULT NULL COMMENT '回复用户id',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='聊天消息';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `chat_msg`
--

LOCK TABLES `chat_msg` WRITE;
/*!40000 ALTER TABLE `chat_msg` DISABLE KEYS */;
/*!40000 ALTER TABLE `chat_msg` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `file_detail`
--

DROP TABLE IF EXISTS `file_detail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `file_detail` (
  `id` varchar(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL COMMENT '文件id',
  `url` varchar(512) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL COMMENT '文件访问地址',
  `size` bigint DEFAULT NULL COMMENT '文件大小，单位字节',
  `filename` varchar(256) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL COMMENT '文件名称',
  `original_filename` varchar(256) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL COMMENT '原始文件名',
  `base_path` varchar(256) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL COMMENT '基础存储路径',
  `path` varchar(256) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL COMMENT '存储路径',
  `ext` varchar(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL COMMENT '文件扩展名',
  `content_type` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL COMMENT 'MIME类型',
  `platform` varchar(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL COMMENT '存储平台',
  `th_url` varchar(512) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL COMMENT '缩略图访问路径',
  `th_filename` varchar(256) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL COMMENT '缩略图名称',
  `th_size` bigint DEFAULT NULL COMMENT '缩略图大小，单位字节',
  `th_content_type` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL COMMENT '缩略图MIME类型',
  `object_id` varchar(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL COMMENT '文件所属对象id',
  `object_type` varchar(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL COMMENT '文件所属对象类型，例如用户头像，评价图片',
  `metadata` text CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci COMMENT '文件元数据',
  `user_metadata` text CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci COMMENT '文件用户元数据',
  `th_metadata` text CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci COMMENT '缩略图元数据',
  `th_user_metadata` text CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci COMMENT '缩略图用户元数据',
  `attr` text CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci COMMENT '附加属性',
  `file_acl` varchar(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL COMMENT '文件ACL',
  `th_file_acl` varchar(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL COMMENT '缩略图文件ACL',
  `hash_info` text CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci COMMENT '哈希信息',
  `upload_id` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL COMMENT '上传ID，仅在手动分片上传时使用',
  `upload_status` int DEFAULT NULL COMMENT '上传状态，仅在手动分片上传时使用，1：初始化完成，2：上传完成',
  `source` varchar(25) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL COMMENT '图片来源',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COMMENT='文件记录表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `file_detail`
--

LOCK TABLES `file_detail` WRITE;
/*!40000 ALTER TABLE `file_detail` DISABLE KEYS */;
INSERT INTO `file_detail` VALUES ('00826460a6e28d097b4f0eefa8261821','http://113.45.240.54:9092/article-cover/18bdedd1-a533-4e9d-92aa-996ad2a85cb2_freecompress-Neat-Admin 管理系统 (14).png',145288,'18bdedd1-a533-4e9d-92aa-996ad2a85cb2_freecompress-Neat-Admin 管理系统 (14).png','freecompress-Neat-Admin 管理系统 (14).png','','article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-08 22:45:03'),('016454085eebe35803dffebb8deddedb','http://113.45.240.54:9092/article-cover/c545319f-3fa1-4f63-a7b5-592ddfa3db20_freecompress-Neat-Admin 管理系统 (2).png',117715,'c545319f-3fa1-4f63-a7b5-592ddfa3db20_freecompress-Neat-Admin 管理系统 (2).png','freecompress-Neat-Admin 管理系统 (2).png','','article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-08 22:58:07'),('016b712b6ad540fee16ccb43cebe3300','http://113.45.240.54:9092/article-cover/3e8d2500-4666-4089-b5a9-e1630c99edc2_logo.png',44037,'3e8d2500-4666-4089-b5a9-e1630c99edc2_logo.png','logo.png','','article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-10 22:33:19'),('0326004e0e9ab7b71a80b9ca41c36ec2','http://113.45.240.54/opt/uploadPath/avatar/4b56748e-f11b-4b0d-bfd8-2e0de3c94d1f_avatar.png',209197,'4b56748e-f11b-4b0d-bfd8-2e0de3c94d1f_avatar.png','avatar.png','uploadPath/','avatar/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-30 06:01:17'),('08e7984cb82870531743acdee387980f','http://127.0.0.1:8800/localFile/local-plus/20250426/moment/74_猫猫.jpg',4180665,'74_猫猫.jpg','猫猫.jpg','local-plus/','20250426/moment/','jpg','image/jpeg','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"moment\"}',NULL,NULL,'{}',NULL,NULL,'moment','2025-04-26 18:49:26'),('0a6aac3a7babaa6cd666eeb37f9ba8c9','http://113.45.240.54:9092/article-cover/dc43beb6-e067-4245-8edc-e4181ab36120_freecompress-Neat-Admin 管理系统 (20).png',123606,'dc43beb6-e067-4245-8edc-e4181ab36120_freecompress-Neat-Admin 管理系统 (20).png','freecompress-Neat-Admin 管理系统 (20).png','','article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-08 22:44:14'),('0b518ae93a9f714a6360dff2fb53d386','http://113.45.240.54:9092/moment/782aa6b5-1360-45b6-b681-1c7c3984dc93_freecompress-Neat-Admin 管理系统 (1).png',163945,'782aa6b5-1360-45b6-b681-1c7c3984dc93_freecompress-Neat-Admin 管理系统 (1).png','freecompress-Neat-Admin 管理系统 (1).png','','moment/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"moment\"}',NULL,NULL,'{}',NULL,NULL,'moment','2025-07-23 20:46:23'),('0f44806a9be7af574e58ec8234118c2e','http://113.45.240.54:9092/photo/2bae11bb-8145-4cd4-9fad-9ae4997a4862_微信图片_20221011191936.jpg',658353,'2bae11bb-8145-4cd4-9fad-9ae4997a4862_微信图片_20221011191936.jpg','微信图片_20221011191936.jpg','','photo/','jpg','image/jpeg','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"photo\"}',NULL,NULL,'{}',NULL,NULL,'photo','2025-07-28 16:28:36'),('10505c20fa5b7f0c4f2857c18004ed69','http://113.45.240.54:9092/article-cover/dff45146-e4d2-423e-9382-ba515b2ac4a1_freecompress-Neat-Admin 管理系统 (13).png',94156,'dff45146-e4d2-423e-9382-ba515b2ac4a1_freecompress-Neat-Admin 管理系统 (13).png','freecompress-Neat-Admin 管理系统 (13).png','','article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-10 22:32:07'),('11fc3172991bae8795e471e9dc278481','http://113.45.240.54:9092/moment/f1281cdb-03d6-4907-bff4-d4c1f112972b_freecompress-Neat-Admin 管理系统 (1).png',163945,'f1281cdb-03d6-4907-bff4-d4c1f112972b_freecompress-Neat-Admin 管理系统 (1).png','freecompress-Neat-Admin 管理系统 (1).png','','moment/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"moment\"}',NULL,NULL,'{}',NULL,NULL,'moment','2025-07-23 20:47:00'),('123d7135fd74380fb7b4f73ac0bd4984','http://127.0.0.1:8800/localFile/local-plus/20250427/default/00_屏幕截图 2025-01-22 004145.png',651311,'00_屏幕截图 2025-01-22 004145.png','屏幕截图 2025-01-22 004145.png','local-plus/','20250427/default/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"default\"}',NULL,NULL,'{}',NULL,NULL,'default','2025-04-27 17:47:00'),('13885374f3e5045fcd542a152cf968ec','http://127.0.0.1:80/localFile/local-plus/20250430/article-cover/21_屏幕截图 2025-04-01 174721.png',2785,'21_屏幕截图 2025-04-01 174721.png','屏幕截图 2025-04-01 174721.png','local-plus/','20250430/article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-04-30 12:29:09'),('15d85f6c9975ce86140332e131ebea61','http://113.45.240.54:80/localFile/local-plus/20250630/article-cover/a1bc576e-b5e3-4e99-9fa8-c439e1a0c8ee_72e1686184ce45fbb7ba6dce1f46d49c.jpeg',25216,'a1bc576e-b5e3-4e99-9fa8-c439e1a0c8ee_72e1686184ce45fbb7ba6dce1f46d49c.jpeg','72e1686184ce45fbb7ba6dce1f46d49c.jpeg','local-plus/','20250630/article-cover/','jpeg','image/jpeg','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-06-30 03:57:07'),('187f36e25a0e15c4d5620ccb19332f38','http://113.45.240.54:9092/article-cover/6f1b1378-034d-4306-9f5d-744c33107a60_freecompress-Neat-Admin 管理系统 (15).png',93496,'6f1b1378-034d-4306-9f5d-744c33107a60_freecompress-Neat-Admin 管理系统 (15).png','freecompress-Neat-Admin 管理系统 (15).png','','article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-08 22:54:11'),('199ba579722ea9e47589688bbe1a77fa','http://127.0.0.1:80/localFile/local-plus/20250430/article-cover/09_屏幕截图 2024-12-14 121515.png',81312,'09_屏幕截图 2024-12-14 121515.png','屏幕截图 2024-12-14 121515.png','local-plus/','20250430/article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-04-30 12:28:09'),('1a6c04364eeb0b14d5221253e3a5e8e2','http://113.45.240.54:80/opt/uploadPath/avatar/64e933a4-13af-4b8e-9d57-dc7bf3cc07e9_avatar.png',209197,'64e933a4-13af-4b8e-9d57-dc7bf3cc07e9_avatar.png','avatar.png','uploadPath/','avatar/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-30 05:48:04'),('1a91a41fd8c90a16f0192a4c7b73f2df','http://113.45.240.54:9092/moment/61768411-79f5-4329-b513-bf71c4d5e8eb_freecompress-Neat-Admin 管理系统 (1).png',163945,'61768411-79f5-4329-b513-bf71c4d5e8eb_freecompress-Neat-Admin 管理系统 (1).png','freecompress-Neat-Admin 管理系统 (1).png','','moment/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"moment\"}',NULL,NULL,'{}',NULL,NULL,'moment','2025-07-23 20:46:05'),('1fa8a3f4bfe1b766e3e9974600d8a0d2','http://113.45.240.54:9092/moment/88478594-2bd2-4673-88ee-30efa5c5bd66_freecompress-Neat-Admin 管理系统 (1).png',163945,'88478594-2bd2-4673-88ee-30efa5c5bd66_freecompress-Neat-Admin 管理系统 (1).png','freecompress-Neat-Admin 管理系统 (1).png','','moment/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"moment\"}',NULL,NULL,'{}',NULL,NULL,'moment','2025-07-23 20:46:43'),('21fb5c4c286788dabc5ec5f8713c4135','http://113.45.240.54:9092/avatar/d3443d3e-5a78-4923-b126-164dfc7b8f9d_微信图片_20220926121552.jpg',230975,'d3443d3e-5a78-4923-b126-164dfc7b8f9d_微信图片_20220926121552.jpg','微信图片_20220926121552.jpg','','avatar/','jpg','image/jpeg','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-30 06:58:47'),('2413cc048882f5314379b710c890e2b6','http:\\\\113.45.240.54:9092\\opt\\uploadPath\\avatar\\3b3e5035-6c02-4528-8aa2-557ad6fb1b03_avatar.png',108542,'3b3e5035-6c02-4528-8aa2-557ad6fb1b03_avatar.png','avatar.png','uploadPath\\','avatar\\','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-30 06:18:04'),('241a1f63540d01fc615c24a4adb65b97','http://113.45.240.54:9092/avatar/20ccf3cd-9501-4dea-83d1-cbc6fe53beff_avatar.png',108542,'20ccf3cd-9501-4dea-83d1-cbc6fe53beff_avatar.png','avatar.png','','avatar/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-30 06:47:14'),('24d33fa54ab2b15cef0da267077a6546','http://113.45.240.54:9092/avatar/6bdadd75-f521-441b-8b16-ccefdaa59cfc_avatar.png',314276,'6bdadd75-f521-441b-8b16-ccefdaa59cfc_avatar.png','avatar.png','','avatar/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-30 08:53:34'),('2647bc9c81b6dd4936e4b0d79c041ee6','http://127.0.0.1:8800/localFile/local-plus/20250426/moment/72_屏幕截图 2025-04-06 174629.png',2334668,'72_屏幕截图 2025-04-06 174629.png','屏幕截图 2025-04-06 174629.png','local-plus/','20250426/moment/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"moment\"}',NULL,NULL,'{}',NULL,NULL,'moment','2025-04-26 18:50:09'),('283d1de0856784a19ccaef66fe53b365','http://127.0.0.1:80/localFile/local-plus/20250629/avatar/b2d6e2f2-4b80-475f-a37b-7783d969d5fe_avatar.jpg',395456,'b2d6e2f2-4b80-475f-a37b-7783d969d5fe_avatar.jpg','avatar.jpg','local-plus/','20250629/avatar/','jpg','image/jpg','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-29 17:59:51'),('283e32eb4bbf30e794a6cdbd74447530','http:\\\\113.45.240.54:9092\\opt\\uploadPath\\avatar\\c8952dbe-e0c0-47b8-9e5e-847d6b564742_avatar.png',292434,'c8952dbe-e0c0-47b8-9e5e-847d6b564742_avatar.png','avatar.png','uploadPath\\','avatar\\','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-30 06:10:37'),('29e41f0c1ced26ec2912666837d01b12','http://113.45.240.54:80/localFilelocal-plus/20250630/avatar/dcb08504-f0a7-4f13-b193-6ee266b612bb_avatar.png',131462,'dcb08504-f0a7-4f13-b193-6ee266b612bb_avatar.png','avatar.png','local-plus/','20250630/avatar/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-30 05:18:05'),('2e2a229072a848cc037f3aba08f4eea8','http://127.0.0.1:80/localFile/local-plus/20250430/avatar/45_avatar.jpg',166191,'45_avatar.jpg','avatar.jpg','local-plus/','20250430/avatar/','jpg','image/jpg','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-04-30 11:17:29'),('30b8a44f0fdf091d290433e4381bde13','http://113.45.240.54:9092/album-cover/6f1e99e0-5063-4567-a230-725ee0474e4a_100p0x000000lfu7m5149.jpg',170038,'6f1e99e0-5063-4567-a230-725ee0474e4a_100p0x000000lfu7m5149.jpg','100p0x000000lfu7m5149.jpg','','album-cover/','jpg','image/jpeg','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"album-cover\"}',NULL,NULL,'{}',NULL,NULL,'album-cover','2025-06-30 07:23:31'),('31b84c8bfbb8e860c455e13def86b231','http://113.45.240.54:80/opt/uploadPath/avatar/7c87b941-8934-417b-ae0f-3171d98cbd1a_avatar.png',292434,'7c87b941-8934-417b-ae0f-3171d98cbd1a_avatar.png','avatar.png','uploadPath/','avatar/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-30 05:50:30'),('37264cad7e5796f85ab8ad7748294867','http://113.45.240.54:9092/article-cover/f255d548-23ae-4857-a913-3f7259c56796_20.jpg',26975,'f255d548-23ae-4857-a913-3f7259c56796_20.jpg','20.jpg','','article-cover/','jpg','image/jpeg','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-10 22:33:38'),('3bd57d990650870db37ae41773aceffa','http://127.0.0.1:8800/localFile/local-plus/20250428/article-cover/46_图片6.png',606974,'46_图片6.png','图片6.png','local-plus/','20250428/article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-04-28 16:41:00'),('3f4dbeeb988ab75a9256a67d190c5321','http://127.0.0.1:8800/localFile/local-plus/20250426/article-cover/12_大英博物馆-7.jpg',966227,'12_大英博物馆-7.jpg','大英博物馆-7.jpg','local-plus/','20250426/article-cover/','jpg','image/jpeg','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-04-26 14:59:50'),('40e24ed93c74df33d3191f47c0153275','http://113.45.240.54:80/localFilelocal-plus/20250630/avatar/6e448b29-5195-4d5a-a482-d6be0a02d2b7_avatar.png',331976,'6e448b29-5195-4d5a-a482-d6be0a02d2b7_avatar.png','avatar.png','local-plus/','20250630/avatar/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-30 05:22:23'),('450b5db8c042ad6c52967d1c90bdf69a','http://127.0.0.1:80/localFile/local-plus/20250629/avatar/be71527d-75f7-4863-943a-e0b998a43d50_100n0x000000lfrm69B27.jpg',201778,'be71527d-75f7-4863-943a-e0b998a43d50_100n0x000000lfrm69B27.jpg','100n0x000000lfrm69B27.jpg','local-plus/','20250629/avatar/','jpg','image/jpeg','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-29 11:50:17'),('48d745a33046f272d035e78443b630e8','http://127.0.0.1:8800/localFile/local-plus/20250426/photo/34_屏幕截图 2025-04-23 144648.png',669121,'34_屏幕截图 2025-04-23 144648.png','屏幕截图 2025-04-23 144648.png','local-plus/','20250426/photo/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"photo\"}',NULL,NULL,'{}',NULL,NULL,'photo','2025-04-26 21:59:36'),('49208bde68dba50d51575a0205bdd922','http://113.45.240.54:80/opt/uploadPath/avatar/a80e71c8-5d91-4f66-b791-85748745e054_avatar.png',292434,'a80e71c8-5d91-4f66-b791-85748745e054_avatar.png','avatar.png','uploadPath/','avatar/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-30 05:49:26'),('4ad567f92045ae9c083bfa839fe0274f','http://113.45.240.54/opt/uploadPath/avatar/8a6063bd-104f-423c-bc53-c8bf6734c91a_avatar.png',292434,'8a6063bd-104f-423c-bc53-c8bf6734c91a_avatar.png','avatar.png','uploadPath/','avatar/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-30 06:01:01'),('4b5b5ef2cf0500f231d26cbc1a36028f','http://127.0.0.1:8800/localFile/local-plus/20250426/article-cover/92_温馨.jpg',446164,'92_温馨.jpg','温馨.jpg','local-plus/','20250426/article-cover/','jpg','image/jpeg','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-04-26 14:58:11'),('532a8e5a056a6a4227a337bc83c27280','http://127.0.0.1:80/localFile/local-plus/20250629/article-content/0e5cd9fd-27c5-4cdc-84e5-ab451f7fd3d4_0179dd5671738432f8759f04f768ad.jpg@1280w_1l_2o_100sh.jpg',332124,'0e5cd9fd-27c5-4cdc-84e5-ab451f7fd3d4_0179dd5671738432f8759f04f768ad.jpg@1280w_1l_2o_100sh.jpg','0179dd5671738432f8759f04f768ad.jpg@1280w_1l_2o_100sh.jpg','local-plus/','20250629/article-content/','jpg','image/jpeg','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-content\"}',NULL,NULL,'{}',NULL,NULL,'article-content','2025-06-29 21:01:53'),('563f9e5de51c7794c761e5ebe654b80a','http://113.45.240.54:9092/article-cover/a724b1e8-df19-4de3-b915-05a2e2657bbb_easy-es.jpg.jpg',1508,'a724b1e8-df19-4de3-b915-05a2e2657bbb_easy-es.jpg.jpg','easy-es.jpg.jpg','','article-cover/','jpg','image/jpeg','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-08 22:53:33'),('573f3bfd8da40d19cfb0b2d889c973a5','http://127.0.0.1:80/localFile/local-plus/20250629/avatar/05bafa63-2413-4b7c-bffe-ceacd86ebe7c_avatar.png',99677,'05bafa63-2413-4b7c-bffe-ceacd86ebe7c_avatar.png','avatar.png','local-plus/','20250629/avatar/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-29 11:47:32'),('582d674eb9bf73ebef3c9cf8526c2d20','http://113.45.240.54:9092/avatar/c5fc03ab-640b-4231-879f-381c7922840d_avatar.png',238490,'c5fc03ab-640b-4231-879f-381c7922840d_avatar.png','avatar.png','','avatar/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-30 08:53:12'),('5a194759df2a2894a9ec1e3b9cd2672a','http://113.45.240.54:9092/article-cover/fffd6a63-f881-42c9-9e40-308e97d29730_freecompress-Neat-Admin 管理系统 (4).png',107671,'fffd6a63-f881-42c9-9e40-308e97d29730_freecompress-Neat-Admin 管理系统 (4).png','freecompress-Neat-Admin 管理系统 (4).png','','article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-08 22:55:20'),('5b07ff6d481efe37cf013339c7eeda25','http://113.45.240.54:9092/article-cover/400ecc6d-e1d6-4b2a-b996-1e90b042c047_freecompress-Neat-Admin 管理系统 (2).png',117715,'400ecc6d-e1d6-4b2a-b996-1e90b042c047_freecompress-Neat-Admin 管理系统 (2).png','freecompress-Neat-Admin 管理系统 (2).png','','article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-08 22:50:54'),('606712188fcec68942ad636fd495d2a5','http://113.45.240.54:9092/moment/3d5dffcc-bacb-45c6-96e1-ec60f9f4affb_freecompress-Neat-Admin 管理系统 (1).png',163945,'3d5dffcc-bacb-45c6-96e1-ec60f9f4affb_freecompress-Neat-Admin 管理系统 (1).png','freecompress-Neat-Admin 管理系统 (1).png','','moment/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"moment\"}',NULL,NULL,'{}',NULL,NULL,'moment','2025-07-23 20:47:16'),('619c4eb3cb7254b59aa01cc6c7fdc169','http://113.45.240.54:9092/moment/8c634186-37bc-463d-b73a-1b96229bdf26_freecompress-Neat-Admin 管理系统 (1).png',163945,'8c634186-37bc-463d-b73a-1b96229bdf26_freecompress-Neat-Admin 管理系统 (1).png','freecompress-Neat-Admin 管理系统 (1).png','','moment/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"moment\"}',NULL,NULL,'{}',NULL,NULL,'moment','2025-07-23 20:46:29'),('633527c673428cdb0dac2bb97f4c0c75','http://113.45.240.54/opt/uploadPath/avatar/fb937a1d-7406-418b-bdfe-a217fd2e7fdf_avatar.png',292434,'fb937a1d-7406-418b-bdfe-a217fd2e7fdf_avatar.png','avatar.png','uploadPath/','avatar/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-30 05:58:25'),('640f2542dd1fdca1c85b06d70ee431ff','http://113.45.240.54:9092/avatar/749af0d0-f94c-410b-916d-56d70f666799_微信图片_20220926121552.jpg',230975,'749af0d0-f94c-410b-916d-56d70f666799_微信图片_20220926121552.jpg','微信图片_20220926121552.jpg','','avatar/','jpg','image/jpeg','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-30 06:58:54'),('6438ee1937401d29d20afdeb514f1fe4','http://127.0.0.1:8800/localFile/local-plus/20250428/avatar/85_avatar.jpg',28514,'85_avatar.jpg','avatar.jpg','local-plus/','20250428/avatar/','jpg','image/jpg','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-04-28 17:54:21'),('65a59589c8bb9045201a459dd90ad6f4','http://127.0.0.1:80/localFile/local-plus/20250430/article-cover/84_屏幕截图 2025-04-01 174811.png',2767,'84_屏幕截图 2025-04-01 174811.png','屏幕截图 2025-04-01 174811.png','local-plus/','20250430/article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-04-30 12:28:24'),('665eca7895a1c6bd5c4557e812bbb8ce','http://113.45.240.54:9092/article-cover/42cb07a8-0048-4e39-bd70-c1eaea2e88b1_freecompress-Neat-Admin 管理系统 (5).png',92103,'42cb07a8-0048-4e39-bd70-c1eaea2e88b1_freecompress-Neat-Admin 管理系统 (5).png','freecompress-Neat-Admin 管理系统 (5).png','','article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-08 23:06:00'),('680b217ac764b5bc961dffa3c9e4f571','http://113.45.240.54:9092/article-cover/fb92315b-caae-404f-899c-bc8f666859cd_freecompress-Neat-Admin 管理系统 (19).png',128897,'fb92315b-caae-404f-899c-bc8f666859cd_freecompress-Neat-Admin 管理系统 (19).png','freecompress-Neat-Admin 管理系统 (19).png','','article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-08 22:56:20'),('69ca0501961ddab56469517f0d74df8f','http://127.0.0.1:80/localFile/local-plus/20250629/avatar/7b533519-389e-41dc-9a3c-71dc0ce3561f_R-C (2).jfif',1419202,'7b533519-389e-41dc-9a3c-71dc0ce3561f_R-C (2).jfif','R-C (2).jfif','local-plus/','20250629/avatar/','jfif','image/jpeg','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-29 13:08:53'),('6ae5736408580868188b981025e0c190','http://127.0.0.1:80/localFile/local-plus/20250629/avatar/8de1074a-7bf4-4b5a-a4f1-4e4de6600dc5_avatar.png',147175,'8de1074a-7bf4-4b5a-a4f1-4e4de6600dc5_avatar.png','avatar.png','local-plus/','20250629/avatar/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-29 19:14:27'),('6c78ae9c051f5d6213dae366b5d1d36d','http://113.45.240.54:9092/article-cover/3f14531f-582b-43a2-a645-c526f7ef635f_freecompress-Neat-Admin 管理系统 (7).png',136138,'3f14531f-582b-43a2-a645-c526f7ef635f_freecompress-Neat-Admin 管理系统 (7).png','freecompress-Neat-Admin 管理系统 (7).png','','article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-08 22:54:54'),('6ecabe439da0274b8f9b008c4a495bc1','http://113.45.240.54:9092/article-cover/dc3c9e8d-9050-40c0-9562-75b7428f2132_freecompress-Neat-Admin 管理系统 (9).png',119803,'dc3c9e8d-9050-40c0-9562-75b7428f2132_freecompress-Neat-Admin 管理系统 (9).png','freecompress-Neat-Admin 管理系统 (9).png','','article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-08 22:44:46'),('6fd38caeab6301779e119faa919457db','http://113.45.240.54:9092/article-cover/2ac9bbcb-27fe-4b6c-b217-cd07e3b41813_9.jpg',30796,'2ac9bbcb-27fe-4b6c-b217-cd07e3b41813_9.jpg','9.jpg','','article-cover/','jpg','image/jpeg','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-10 22:32:53'),('7370958cf0f12c3bbecdec4bf8c95b5d','http://113.45.240.54:9092/article-cover/a9fe7e06-cb69-4a58-8b56-3d0aa08cac6d_freecompress-Neat-Admin 管理系统 (4).png',107671,'a9fe7e06-cb69-4a58-8b56-3d0aa08cac6d_freecompress-Neat-Admin 管理系统 (4).png','freecompress-Neat-Admin 管理系统 (4).png','','article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-08 23:03:13'),('73804ab148012cbf935094c475805f00','http://113.45.240.54:80/opt/uploadPath/avatar/3d4aed35-493f-42f5-873f-08d7e6694ef1_avatar.png',159860,'3d4aed35-493f-42f5-873f-08d7e6694ef1_avatar.png','avatar.png','uploadPath/','avatar/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-30 05:53:35'),('76debd04377e14185f7640830011eb0a','http://113.45.240.54:9092/article-cover/e267c375-7a36-419c-babe-1655c7f821ca_freecompress-Neat-Admin 管理系统 (17).png',148402,'e267c375-7a36-419c-babe-1655c7f821ca_freecompress-Neat-Admin 管理系统 (17).png','freecompress-Neat-Admin 管理系统 (17).png','','article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-08 22:55:07'),('77273c41278013cc79465848bd842551','http://113.45.240.54:9092/article-cover/13f6f272-e71c-407d-a44d-214daa25939c_7.jpg',24380,'13f6f272-e71c-407d-a44d-214daa25939c_7.jpg','7.jpg','','article-cover/','jpg','image/jpeg','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-10 22:28:18'),('7b5ae22e29690c4ee135a3badac373dd','http://127.0.0.1:8800/localFile/local-plus/20250426/album-cover/61_屏幕截图 2025-04-23 152719.png',847939,'61_屏幕截图 2025-04-23 152719.png','屏幕截图 2025-04-23 152719.png','local-plus/','20250426/album-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"album-cover\"}',NULL,NULL,'{}',NULL,NULL,'album-cover','2025-04-26 21:26:34'),('7b8fcd8ce3a507867808352605869262','http://113.45.240.54:9092/opt/uploadPath/avatar\\754978d3-0a3b-4127-b229-3608aa56a4b7_avatar.png',108542,'754978d3-0a3b-4127-b229-3608aa56a4b7_avatar.png','avatar.png','uploadPath/','avatar\\','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-30 06:22:19'),('7c1367e1d6b2c2efbe175c799ee1eecb','http://113.45.240.54:9092/moment/a33e0a2a-40a8-4a0f-90ab-17d21c94ff26_freecompress-Neat-Admin 管理系统 (1).png',163945,'a33e0a2a-40a8-4a0f-90ab-17d21c94ff26_freecompress-Neat-Admin 管理系统 (1).png','freecompress-Neat-Admin 管理系统 (1).png','','moment/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"moment\"}',NULL,NULL,'{}',NULL,NULL,'moment','2025-07-23 20:46:35'),('7d6b17209682214633214299a84d6649','http:\\\\113.45.240.54:9092\\opt\\uploadPath\\avatar\\41597415-0e94-4157-8a41-6b4ff841ed86_avatar.png',209197,'41597415-0e94-4157-8a41-6b4ff841ed86_avatar.png','avatar.png','uploadPath\\','avatar\\','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-30 06:17:11'),('808f1eb14b1ac970c6825a35cad32f4a','http://127.0.0.1:8800/localFile/local-plus/20250426/album-cover/65_屏幕截图 2025-04-23 152719.png',847939,'65_屏幕截图 2025-04-23 152719.png','屏幕截图 2025-04-23 152719.png','local-plus/','20250426/album-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"album-cover\"}',NULL,NULL,'{}',NULL,NULL,'album-cover','2025-04-26 21:26:43'),('810eb29b16bb47619563ed1c8277202a','http://113.45.240.54:80/opt/uploadPath/20250630/default/396f96c0-f63d-43b1-9348-e20242ae781c_屏幕截图 2025-06-20 174226.png',177364,'396f96c0-f63d-43b1-9348-e20242ae781c_屏幕截图 2025-06-20 174226.png','屏幕截图 2025-06-20 174226.png','uploadPath/','20250630/default/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"default\"}',NULL,NULL,'{}',NULL,NULL,'default','2025-06-30 05:47:19'),('843cb7994379ecd4fddaafc9d3b8170b','http://127.0.0.1:80/localFile/local-plus/20250430/album-cover/37_屏幕截图 2025-04-25 130821.png',43531,'37_屏幕截图 2025-04-25 130821.png','屏幕截图 2025-04-25 130821.png','local-plus/','20250430/album-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"album-cover\"}',NULL,NULL,'{}',NULL,NULL,'album-cover','2025-04-30 12:30:01'),('84eef6f42adb24ead7f64019594b6704','http://113.45.240.54:9092/moment/58ddc73d-8d3b-43de-8095-49fe7fafbbee_freecompress-Neat-Admin 管理系统 (1).png',163945,'58ddc73d-8d3b-43de-8095-49fe7fafbbee_freecompress-Neat-Admin 管理系统 (1).png','freecompress-Neat-Admin 管理系统 (1).png','','moment/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"moment\"}',NULL,NULL,'{}',NULL,NULL,'moment','2025-07-23 20:45:43'),('86c71a50e95f28b635b8cbad72c56f57','http://127.0.0.1:80/localFile/local-plus/20250629/avatar/3e970ca4-22ef-4be5-acc7-e38ed0715cfe_avatar.png',86163,'3e970ca4-22ef-4be5-acc7-e38ed0715cfe_avatar.png','avatar.png','local-plus/','20250629/avatar/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-29 11:47:22'),('87d24b97934f900cbff169d0be949111','http://127.0.0.1:80/localFile/local-plus/20250529/article-cover/58_f0bcd1046e707daf712e7d0d7f5bbfa2.png',5354,'58_f0bcd1046e707daf712e7d0d7f5bbfa2.png','f0bcd1046e707daf712e7d0d7f5bbfa2.png','local-plus/','20250529/article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-05-29 17:28:58'),('89c81596473cb196d50149686eda1590','http://127.0.0.1:80/localFile/local-plus/20250629/article-cover/32c43e77-8488-4ee7-8ea3-75ebd3b6dce5_100o0x000000lfjqh56A6.jpg',177094,'32c43e77-8488-4ee7-8ea3-75ebd3b6dce5_100o0x000000lfjqh56A6.jpg','100o0x000000lfjqh56A6.jpg','local-plus/','20250629/article-cover/','jpg','image/jpeg','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-06-29 20:59:15'),('8c38d573edbef7ef1c6fa6c3d8aa43ab','http://113.45.240.54:9092/default/11e1b479-7d83-419e-99c1-5e0e8c729588_logo.jpeg',384000,'11e1b479-7d83-419e-99c1-5e0e8c729588_logo.jpeg','logo.jpeg','','default/','jpeg','image/jpeg','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"default\"}',NULL,NULL,'{}',NULL,NULL,'default','2025-06-30 07:21:10'),('8d0498e13ebce150ddc6a164fcd05c1e','http://127.0.0.1:80/localFile/local-plus/20250430/moment/50_屏幕截图 2025-03-11 150004.png',290024,'50_屏幕截图 2025-03-11 150004.png','屏幕截图 2025-03-11 150004.png','local-plus/','20250430/moment/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"moment\"}',NULL,NULL,'{}',NULL,NULL,'moment','2025-04-30 12:30:56'),('8d6768147e9fd61a996aedcc777d55b0','http://127.0.0.1:8800/localFile/local-plus/20250426/photo/48_屏幕截图 2025-02-27 192825.png',1122038,'48_屏幕截图 2025-02-27 192825.png','屏幕截图 2025-02-27 192825.png','local-plus/','20250426/photo/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"photo\"}',NULL,NULL,'{}',NULL,NULL,'photo','2025-04-26 22:00:31'),('9024e04313f9da9613161194fbe1c3b2','http://113.45.240.54:9092/article-cover/13bfb4bb-791d-4ea7-a58c-8aafff3db37f_freecompress-Neat-Admin 管理系统 (17).png',148402,'13bfb4bb-791d-4ea7-a58c-8aafff3db37f_freecompress-Neat-Admin 管理系统 (17).png','freecompress-Neat-Admin 管理系统 (17).png','','article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-08 22:46:36'),('91d0bb2eb706a0e947ef87fca10466e4','http://113.45.240.54:9092/article-cover/a4b0c267-a182-4d3f-8f00-908507665af6_屏幕截图 2025-06-25 234053.png',2556214,'a4b0c267-a182-4d3f-8f00-908507665af6_屏幕截图 2025-06-25 234053.png','屏幕截图 2025-06-25 234053.png','','article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-06-30 07:15:44'),('9409ce62787e5fd62dcf160de76a8842','http://113.45.240.54:9092/article-cover/9f8176a8-88cd-4519-9991-9125d52bb6dd_freecompress-Neat-Admin 管理系统.png',42596,'9f8176a8-88cd-4519-9991-9125d52bb6dd_freecompress-Neat-Admin 管理系统.png','freecompress-Neat-Admin 管理系统.png','','article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-08 22:58:16'),('954b3a97dcc834c7242716010e0c2c35','http://127.0.0.1:80/localFile/local-plus/20250430/avatar/04_avatar.jpg',155167,'04_avatar.jpg','avatar.jpg','local-plus/','20250430/avatar/','jpg','image/jpg','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-04-30 11:17:55'),('96f385dc7308bf9233c5b8ad698a5ef5','http://113.45.240.54:9092/article-cover/fb6a09be-cb3d-47be-8c3b-b218dab910e7_weixin.jpg',17275,'fb6a09be-cb3d-47be-8c3b-b218dab910e7_weixin.jpg','weixin.jpg','','article-cover/','jpg','image/jpeg','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-28 11:33:36'),('9b327c7d1eb8cdcde9a0f9d98218246e','http://113.45.240.54:9092/article-cover/5249c821-9d69-4da6-bd67-93c81a33e287_freecompress-Neat-Admin 管理系统 (13).png',94156,'5249c821-9d69-4da6-bd67-93c81a33e287_freecompress-Neat-Admin 管理系统 (13).png','freecompress-Neat-Admin 管理系统 (13).png','','article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-08 22:57:22'),('a166ce2d2ce6e81f007c3c86dfe74632','http://127.0.0.1:8800/localFile/local-plus/20250427/default/91_屏幕截图 2025-04-14 224717.png',969224,'91_屏幕截图 2025-04-14 224717.png','屏幕截图 2025-04-14 224717.png','local-plus/','20250427/default/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"default\"}',NULL,NULL,'{}',NULL,NULL,'default','2025-04-27 17:46:57'),('a2adaf1428f6a927ccd227de6ca2aa3d','http://127.0.0.1:80/localFile/local-plus/20250430/moment/16_屏幕截图 2025-04-07 140204.png',5657,'16_屏幕截图 2025-04-07 140204.png','屏幕截图 2025-04-07 140204.png','local-plus/','20250430/moment/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"moment\"}',NULL,NULL,'{}',NULL,NULL,'moment','2025-04-30 12:30:44'),('a3b9b7859f2b2b071acd23d8e3c9d185','http://113.45.240.54:9092/article-cover/dd664799-e537-418d-a74c-58bd52a19714_100o0x000000lfjqh56A6.jpg',177094,'dd664799-e537-418d-a74c-58bd52a19714_100o0x000000lfjqh56A6.jpg','100o0x000000lfjqh56A6.jpg','','article-cover/','jpg','image/jpeg','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-09 16:19:29'),('ac9da8e4d0813984b305ff7d6de1b5c2','http://113.45.240.54:9092/avatar/55b600f7-ee36-4eb9-8761-99b0725f3a60_avatar.jpg',8185,'55b600f7-ee36-4eb9-8761-99b0725f3a60_avatar.jpg','avatar.jpg','','avatar/','jpg','image/jpg','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-30 08:01:24'),('ad9616b5f7650033fce5e3614a6921d1','http://113.45.240.54:9092/avatar/13f5f184-7714-48b5-8bbc-425fa25bd451_avatar.png',130532,'13f5f184-7714-48b5-8bbc-425fa25bd451_avatar.png','avatar.png','','avatar/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-30 07:16:35'),('aeb2f9e8225d96fe171d47ed4e8e508e','http://127.0.0.1:8800/localFile/local-plus/20250428/article-content/75_preview.png',398828,'75_preview.png','preview.png','local-plus/','20250428/article-content/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-content\"}',NULL,NULL,'{}',NULL,NULL,'article-content','2025-04-28 18:07:18'),('aecb7a675b5d92d269d471bbe31ee30a','http://113.45.240.54:9092/avatar/a5c10c94-a816-4f8c-85f8-9d6e7e265043_avatar.png',108542,'a5c10c94-a816-4f8c-85f8-9d6e7e265043_avatar.png','avatar.png','','avatar/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-30 06:52:59'),('b2c1f57e600443c570891f0f5f74c85a','http://113.45.240.54:9092/moment/ffa701ff-a89a-4cb4-a7c3-8f62d2988f62_08b99043e9ca463d9d0b960ccada77e0.png',94449,'ffa701ff-a89a-4cb4-a7c3-8f62d2988f62_08b99043e9ca463d9d0b960ccada77e0.png','08b99043e9ca463d9d0b960ccada77e0.png','','moment/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"moment\"}',NULL,NULL,'{}',NULL,NULL,'moment','2025-06-30 07:18:29'),('b2f6fd606de5c3e46073c7d43b473105','http://113.45.240.54:9092/moment/537050db-7073-4802-a1c7-447d3a04623f_freecompress-Neat-Admin 管理系统 (1).png',163945,'537050db-7073-4802-a1c7-447d3a04623f_freecompress-Neat-Admin 管理系统 (1).png','freecompress-Neat-Admin 管理系统 (1).png','','moment/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"moment\"}',NULL,NULL,'{}',NULL,NULL,'moment','2025-07-23 20:46:50'),('b314eb3eb2d4a4f2976dc30390f903d9','http://127.0.0.1:80/localFile/local-plus/20250430/article-cover/34_屏幕截图 2025-04-01 180541.png',9878,'34_屏幕截图 2025-04-01 180541.png','屏幕截图 2025-04-01 180541.png','local-plus/','20250430/article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-04-30 12:29:29'),('b51dcbf87d0446389f6eec09c4406ce7','http://127.0.0.1:80/localFile/local-plus/20250629/avatar/be2d8c8c-9148-4a37-916b-a1fab1b4bee1_avatar.png',147122,'be2d8c8c-9148-4a37-916b-a1fab1b4bee1_avatar.png','avatar.png','local-plus/','20250629/avatar/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-29 19:13:04'),('b571ba26ca46f164b7ad6bc1b154968b','http://127.0.0.1:80/localFile/local-plus/20250629/article-cover/752bd4cb-7bb8-4468-88c1-d68fdcb90d89_100n0x000000lfrm69B27.jpg',201778,'752bd4cb-7bb8-4468-88c1-d68fdcb90d89_100n0x000000lfrm69B27.jpg','100n0x000000lfrm69B27.jpg','local-plus/','20250629/article-cover/','jpg','image/jpeg','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-06-29 20:51:18'),('b7a81fab98889efd81515107f02a2eda','http://113.45.240.54:9092/moment/436a2836-bfff-4bb5-90a3-e9d76d65bab3_freecompress-Neat-Admin 管理系统 (1).png',163945,'436a2836-bfff-4bb5-90a3-e9d76d65bab3_freecompress-Neat-Admin 管理系统 (1).png','freecompress-Neat-Admin 管理系统 (1).png','','moment/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"moment\"}',NULL,NULL,'{}',NULL,NULL,'moment','2025-07-23 20:45:53'),('b94d44a6235c1e8aa59402313f82320c','http://113.45.240.54:9092/article-cover/56490de4-489f-41bf-bb59-c2243e247ffe_mysql.png',12600,'56490de4-489f-41bf-bb59-c2243e247ffe_mysql.png','mysql.png','','article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-10 22:33:04'),('b9fb391876ce6fa71010ce9571a248d7','http://113.45.240.54/opt/uploadPath/avatar/1b0d4060-81bd-4b7a-a151-9d48cf8f9a49_avatar.png',159860,'1b0d4060-81bd-4b7a-a151-9d48cf8f9a49_avatar.png','avatar.png','uploadPath/','avatar/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-30 05:59:59'),('b9ff0d2a63f78eebaeb14bc7324008f9','http://113.45.240.54:9092/article-cover/139cd528-bf3e-4565-9987-5a29780b4b52_freecompress-Neat-Admin 管理系统 (11).png',118210,'139cd528-bf3e-4565-9987-5a29780b4b52_freecompress-Neat-Admin 管理系统 (11).png','freecompress-Neat-Admin 管理系统 (11).png','','article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-08 22:57:55'),('baa05c4584171f4de37cad6425cc814f','http://113.45.240.54:9092/avatar/efb77dae-458d-4a37-989c-6db78eabb935_100n0x000000lfrm69B27.jpg',201778,'efb77dae-458d-4a37-989c-6db78eabb935_100n0x000000lfrm69B27.jpg','100n0x000000lfrm69B27.jpg','','avatar/','jpg','image/jpeg','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-30 06:58:39'),('bbced666bc93cf6341b5cfdb53912e37','http://113.45.240.54:9092/opt/uploadPath/avatar/0dd47f78-5855-4dc1-aeed-54373ecf8c25_avatar.png',108542,'0dd47f78-5855-4dc1-aeed-54373ecf8c25_avatar.png','avatar.png','uploadPath/','avatar/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-30 06:29:05'),('bbf3531c6dcee1836f92aebfe6cd9afb','http://113.45.240.54:9092/article-cover/f621aea1-986d-4499-a595-cd5ab2e7ddbf_freecompress-Neat-Admin 管理系统 (17).png',148402,'f621aea1-986d-4499-a595-cd5ab2e7ddbf_freecompress-Neat-Admin 管理系统 (17).png','freecompress-Neat-Admin 管理系统 (17).png','','article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-08 22:54:41'),('bda8eed1e46d75bc2a900e4f70cb0e02','http://113.45.240.54:9092/article-cover/e6f88e8d-3d51-4418-bec8-e621295728bd_freecompress-Neat-Admin 管理系统 (12).png',118199,'e6f88e8d-3d51-4418-bec8-e621295728bd_freecompress-Neat-Admin 管理系统 (12).png','freecompress-Neat-Admin 管理系统 (12).png','','article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-08 22:57:35'),('bf8954e9596fc4458983385d229c005e','http://113.45.240.54:9092/avatar/8dd8793f-bf4a-4cc9-a9ab-cf828e0c7012_avatar.jpg',102835,'8dd8793f-bf4a-4cc9-a9ab-cf828e0c7012_avatar.jpg','avatar.jpg','','avatar/','jpg','image/jpg','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-30 07:21:25'),('cc3c8bc2a53df28360d65e3937f845f0','http://113.45.240.54:9092/avatar/2037f39d-0961-4413-93c3-73d87f54acf0_avatar.png',176997,'2037f39d-0961-4413-93c3-73d87f54acf0_avatar.png','avatar.png','','avatar/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-30 06:54:31'),('cca00e7bdef4e01fdbb054fc4f647ee2','113.45.240.54:9092/opt/uploadPath/avatar\\1642335c-68c5-46a0-8765-163b57cc67f6_avatar.png',108542,'1642335c-68c5-46a0-8765-163b57cc67f6_avatar.png','avatar.png','uploadPath/','avatar\\','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-30 06:21:41'),('ccb1d23c2a68ad946893ff30fa62a365','http://113.45.240.54:9092/article-cover/d953b5ea-e68e-4c4b-9f62-2a4584085c86_img-error.jpg',87600,'d953b5ea-e68e-4c4b-9f62-2a4584085c86_img-error.jpg','img-error.jpg','','article-cover/','jpg','image/jpeg','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-10 22:32:31'),('cff9777370f64cd2a0062bc2aae0daed','http://113.45.240.54:9092/moment/cc324d11-f347-492d-9373-38ab0cb5b1c5_freecompress-Neat-Admin 管理系统 (1).png',163945,'cc324d11-f347-492d-9373-38ab0cb5b1c5_freecompress-Neat-Admin 管理系统 (1).png','freecompress-Neat-Admin 管理系统 (1).png','','moment/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"moment\"}',NULL,NULL,'{}',NULL,NULL,'moment','2025-07-23 20:47:08'),('d38a2b17373475e792633c864c8462ec','http://113.45.240.54:9092/article-cover/c95b390a-0a63-4136-aa99-8b07627bf7ed_freecompress-Neat-Admin 管理系统 (5).png',92103,'c95b390a-0a63-4136-aa99-8b07627bf7ed_freecompress-Neat-Admin 管理系统 (5).png','freecompress-Neat-Admin 管理系统 (5).png','','article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-10 22:31:49'),('d4a30f963d554a8854fa5f2a869bc15b','http://127.0.0.1:80/localFile/local-plus/20250430/moment/07_屏幕截图 2025-04-08 154813.png',370074,'07_屏幕截图 2025-04-08 154813.png','屏幕截图 2025-04-08 154813.png','local-plus/','20250430/moment/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"moment\"}',NULL,NULL,'{}',NULL,NULL,'moment','2025-04-30 12:30:35'),('d5e5672466382dec6dd8363e8c173a73','http://113.45.240.54:9092/album-cover/2db87fbb-8a0a-48d1-b212-b07465575227_100n0x000000lfrm69B27.jpg',201778,'2db87fbb-8a0a-48d1-b212-b07465575227_100n0x000000lfrm69B27.jpg','100n0x000000lfrm69B27.jpg','','album-cover/','jpg','image/jpeg','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"album-cover\"}',NULL,NULL,'{}',NULL,NULL,'album-cover','2025-06-30 07:23:17'),('d64f4a93f474b34a2e85157007fe13f0','http:\\\\113.45.240.54\\opt\\uploadPath\\avatar/c494cf22-f27f-4ee7-b757-aebd84769118_avatar.png',248757,'c494cf22-f27f-4ee7-b757-aebd84769118_avatar.png','avatar.png','uploadPath\\','avatar/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-30 06:02:04'),('db8ecf3c53d551ce35eb10703c3e8212','http://113.45.240.54:9092/article-cover/935ec94a-84b4-4bb4-9f8b-275cca666804_freecompress-Neat-Admin 管理系统 (1).png',163945,'935ec94a-84b4-4bb4-9f8b-275cca666804_freecompress-Neat-Admin 管理系统 (1).png','freecompress-Neat-Admin 管理系统 (1).png','','article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-22 17:55:21'),('dd5a841998f147492f6293a1388adbbd','http://113.45.240.54:9092/photo/9ff81d22-7d37-4105-b2b4-4b4b11023c8c_微信图片_20220926121515.jpg',506034,'9ff81d22-7d37-4105-b2b4-4b4b11023c8c_微信图片_20220926121515.jpg','微信图片_20220926121515.jpg','','photo/','jpg','image/jpeg','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"photo\"}',NULL,NULL,'{}',NULL,NULL,'photo','2025-07-28 16:28:08'),('ddf75bf41b48f8b86b060e021232a6cb','http://113.45.240.54:80/opt/uploadPath20250630/avatar/cf1952ee-2d28-474f-9a3e-ed44bf18e60b_avatar.png',209197,'cf1952ee-2d28-474f-9a3e-ed44bf18e60b_avatar.png','avatar.png','uploadPath','20250630/avatar/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-30 05:39:22'),('debb89cc9bf8cd9036bc43e7ecad3a59','http://113.45.240.54:9092/article-cover/44bd07df-1efb-4b3c-9f42-c4e529d11e43_wave.png',42748,'44bd07df-1efb-4b3c-9f42-c4e529d11e43_wave.png','wave.png','','article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-08 22:52:33'),('e175bbcead0719441867f906b3c2de0c','http://113.45.240.54:9092/moment/5733ee94-8ef3-49bb-8f7d-9b73a2ecf553_freecompress-Neat-Admin 管理系统 (1).png',163945,'5733ee94-8ef3-49bb-8f7d-9b73a2ecf553_freecompress-Neat-Admin 管理系统 (1).png','freecompress-Neat-Admin 管理系统 (1).png','','moment/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"moment\"}',NULL,NULL,'{}',NULL,NULL,'moment','2025-06-30 08:30:28'),('e35e578471874925e4e37ba52211d150','http://113.45.240.54:9092/moment/e7e790bc-d25d-4687-8bcd-bcf93f7479ab_freecompress-Neat-Admin 管理系统 (1).png',163945,'e7e790bc-d25d-4687-8bcd-bcf93f7479ab_freecompress-Neat-Admin 管理系统 (1).png','freecompress-Neat-Admin 管理系统 (1).png','','moment/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"moment\"}',NULL,NULL,'{}',NULL,NULL,'moment','2025-07-23 20:46:14'),('e4893639bac418dd2a546965c0f80f96','http://113.45.240.54:9092/\"\"avatar/603b6a81-752f-4aaa-b602-c3fd3cf91bff_avatar.png',108542,'603b6a81-752f-4aaa-b602-c3fd3cf91bff_avatar.png','avatar.png','\"\"','avatar/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-30 06:46:24'),('e49ddc10cfde99cd3b0aabea21e3e6f3','http://113.45.240.54/localFilelocal-plus/20250630/avatar/c13dceaa-b9ca-4cdc-b156-51c2faf30e5c_avatar.png',131462,'c13dceaa-b9ca-4cdc-b156-51c2faf30e5c_avatar.png','avatar.png','local-plus/','20250630/avatar/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-30 05:17:34'),('e50ca7e3520e44ad66605ad77e58f874','http://113.45.240.54:9092/avatar/95c5c4d4-a476-4efe-873e-99dc2b6c1863_avatar.png',108542,'95c5c4d4-a476-4efe-873e-99dc2b6c1863_avatar.png','avatar.png','','avatar/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-30 06:50:39'),('e7436a4a9eada4f9296877bd750e4e27','http://113.45.240.54:9092/article-cover/158ceb0a-bf49-494a-9d4a-128488109c1b_freecompress-Neat-Admin 管理系统 (12).png',118199,'158ceb0a-bf49-494a-9d4a-128488109c1b_freecompress-Neat-Admin 管理系统 (12).png','freecompress-Neat-Admin 管理系统 (12).png','','article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-10 22:31:10'),('e8f225ab79c1dbc08d0138fbac0fbf0d','http://127.0.0.1:80/localFile/local-plus/20250430/article-cover/70_屏幕截图 2025-04-01 174721.png',2785,'70_屏幕截图 2025-04-01 174721.png','屏幕截图 2025-04-01 174721.png','local-plus/','20250430/article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-04-30 12:28:42'),('e9478115aae4150753e14f3d703e5c4c','http://127.0.0.1:8800/localFile/local-plus/20250428/article-cover/91_2.jpg',15688,'91_2.jpg','2.jpg','local-plus/','20250428/article-cover/','jpg','image/jpeg','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-04-28 16:04:02'),('ed51e15d5eedeb0f7d14b5b1337a4d0a','http://113.45.240.54:9092/avatar/d1454e13-89fa-4ba9-be3c-d459968fd86e_avatar.jpg',297915,'d1454e13-89fa-4ba9-be3c-d459968fd86e_avatar.jpg','avatar.jpg','','avatar/','jpg','image/jpg','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-30 08:31:24'),('ef5baabe01cc3047b227c4d7dd12f3ae','http://113.45.240.54:9092/article-cover/e295b524-c15d-4404-ab7e-36fcb45e5c7a_freecompress-Neat-Admin 管理系统 (12).png',118199,'e295b524-c15d-4404-ab7e-36fcb45e5c7a_freecompress-Neat-Admin 管理系统 (12).png','freecompress-Neat-Admin 管理系统 (12).png','','article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-08 22:55:31'),('f255c20e50331f5cccb19359348e8dc8','http://127.0.0.1:80/localFile/local-plus/20250629/article-cover/1b73267f-f3c1-40b4-b5b3-c2741497487e_微信图片_20220926121548.jpg',299547,'1b73267f-f3c1-40b4-b5b3-c2741497487e_微信图片_20220926121548.jpg','微信图片_20220926121548.jpg','local-plus/','20250629/article-cover/','jpg','image/jpeg','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-06-29 20:35:43'),('f325f92eac7b46b3b982867c85234af8','113.45.240.54:9092/opt/uploadPath/avatar\\c2af38a4-7202-4ab9-8665-7f0cea2ba631_avatar.png',108542,'c2af38a4-7202-4ab9-8665-7f0cea2ba631_avatar.png','avatar.png','uploadPath/','avatar\\','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-30 06:20:28'),('f5dafe4026177b667f718d240ae3afdc','http://127.0.0.1:80/localFile/local-plus/20250629/avatar/1893ffee-b72f-434b-b3a3-92512ca0b29b_avatar.png',71594,'1893ffee-b72f-434b-b3a3-92512ca0b29b_avatar.png','avatar.png','local-plus/','20250629/avatar/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-29 11:47:43'),('f773c629b185e8eb644f0813eab2f0f6','http://113.45.240.54:9092/article-cover/7af0f54f-d34f-4fd7-9142-2e6334163440_freecompress-Neat-Admin 管理系统 (14).png',145288,'7af0f54f-d34f-4fd7-9142-2e6334163440_freecompress-Neat-Admin 管理系统 (14).png','freecompress-Neat-Admin 管理系统 (14).png','','article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-08 22:57:01'),('f7e875f456ec283cc30176863fb3199c','http://127.0.0.1:80/localFile/local-plus/20250629/avatar/6a4a8483-973d-4fb0-92b8-22d8ab547650_avatar.png',97049,'6a4a8483-973d-4fb0-92b8-22d8ab547650_avatar.png','avatar.png','local-plus/','20250629/avatar/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"avatar\"}',NULL,NULL,'{}',NULL,NULL,'avatar','2025-06-29 11:47:04'),('f8b625d7fd1f847c597390818075b82d','http://127.0.0.1:8800/localFile/local-plus/20250426/photo/12_屏幕截图 2024-10-09 124341.png',982346,'12_屏幕截图 2024-10-09 124341.png','屏幕截图 2024-10-09 124341.png','local-plus/','20250426/photo/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"photo\"}',NULL,NULL,'{}',NULL,NULL,'photo','2025-04-26 22:07:44'),('fb9c139ddeeb59bdc2c190b3197c0e65','http://113.45.240.54:9092/20250630/article-content/557e6e5e-136a-4c0c-97b5-6d2ff7bdce05_b0da0e26c11b454b934fbdf009216003.png',118432,'557e6e5e-136a-4c0c-97b5-6d2ff7bdce05_b0da0e26c11b454b934fbdf009216003.png','b0da0e26c11b454b934fbdf009216003.png','','20250630/article-content/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-content\"}',NULL,NULL,'{}',NULL,NULL,'article-content','2025-06-30 07:05:02'),('fc2b84f7290833553c3feebe8f24458b','http://113.45.240.54:9092/article-cover/b4df352d-2551-45cb-bd8b-25c87ce976bf_freecompress-Neat-Admin 管理系统 (16).png',114006,'b4df352d-2551-45cb-bd8b-25c87ce976bf_freecompress-Neat-Admin 管理系统 (16).png','freecompress-Neat-Admin 管理系统 (16).png','','article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-08 23:02:54'),('fc47601f2d8ebdd771af7c0022efb999','http://127.0.0.1:8800/localFile/local-plus/20250427/default/30_艾丝妲.jpg',204814,'30_艾丝妲.jpg','艾丝妲.jpg','local-plus/','20250427/default/','jpg','image/jpeg','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"default\"}',NULL,NULL,'{}',NULL,NULL,'default','2025-04-27 17:46:01'),('fd937b22bbb86e665e7f795cd29f146f','http://113.45.240.54:9092/article-cover/dc1eb341-c6a9-4869-a311-b17ef0c3367d_04879535dfa9f7db21623729b5f0ef48.jpeg',11192,'dc1eb341-c6a9-4869-a311-b17ef0c3367d_04879535dfa9f7db21623729b5f0ef48.jpeg','04879535dfa9f7db21623729b5f0ef48.jpeg','','article-cover/','jpeg','image/jpeg','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-07-08 22:52:44'),('fda2b4acff4ea30cb064a3a3ed54e2cb','http://113.45.240.54:9092/article-cover/de275716-91e6-40d3-8f67-6423bc41db4b_娜维娅.png',820543,'de275716-91e6-40d3-8f67-6423bc41db4b_娜维娅.png','娜维娅.png','','article-cover/','png','image/png','local',NULL,NULL,NULL,NULL,NULL,NULL,'{}','{}','{}','{}','{\"source\":\"article-cover\"}',NULL,NULL,'{}',NULL,NULL,'article-cover','2025-06-30 07:13:56');
/*!40000 ALTER TABLE `file_detail` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `file_part_detail`
--

DROP TABLE IF EXISTS `file_part_detail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `file_part_detail` (
  `id` varchar(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL COMMENT '分片id',
  `platform` varchar(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL COMMENT '存储平台',
  `upload_id` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL COMMENT '上传ID，仅在手动分片上传时使用',
  `e_tag` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL COMMENT '分片 ETag',
  `part_number` int DEFAULT NULL COMMENT '分片号。每一个上传的分片都有一个分片号，一般情况下取值范围是1~10000',
  `part_size` bigint DEFAULT NULL COMMENT '文件大小，单位字节',
  `hash_info` text CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci COMMENT '哈希信息',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COMMENT='文件分片信息表，仅在手动分片上传时使用';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `file_part_detail`
--

LOCK TABLES `file_part_detail` WRITE;
/*!40000 ALTER TABLE `file_part_detail` DISABLE KEYS */;
/*!40000 ALTER TABLE `file_part_detail` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `gen_table`
--

DROP TABLE IF EXISTS `gen_table`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `gen_table` (
  `table_id` bigint NOT NULL AUTO_INCREMENT COMMENT '编号',
  `table_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT '' COMMENT '表名称',
  `table_comment` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT '' COMMENT '表描述',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '修改时间',
  PRIMARY KEY (`table_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='代码生成业务表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `gen_table`
--

LOCK TABLES `gen_table` WRITE;
/*!40000 ALTER TABLE `gen_table` DISABLE KEYS */;
INSERT INTO `gen_table` VALUES (16,'sys_tag','标签表','2024-12-22 10:38:49',NULL),(17,'sys_web_config','网站配置表','2024-12-22 11:55:59',NULL),(18,'sys_article','文章标签关联表','2024-12-22 12:20:29','2024-12-25 14:32:51'),(19,'sys_category','分类表','2024-12-22 13:22:38',NULL),(20,'sys_friend','友情链接','2024-12-22 13:57:02',NULL);
/*!40000 ALTER TABLE `gen_table` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `gen_table_column`
--

DROP TABLE IF EXISTS `gen_table_column`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `gen_table_column` (
  `column_id` bigint NOT NULL AUTO_INCREMENT COMMENT '编号',
  `table_id` bigint NOT NULL COMMENT '归属表编号',
  `column_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '列名称',
  `column_comment` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '列描述',
  `column_type` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '列类型',
  `java_type` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT 'JAVA类型',
  `java_field` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT 'JAVA字段名',
  `is_pk` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '是否主键（1是）',
  `is_required` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '是否必填（1是）',
  `is_insert` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '是否为插入字段（1是）',
  `is_edit` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '是否编辑字段（1是）',
  `is_list` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '是否列表字段（1是）',
  `is_query` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '是否查询字段（1是）',
  `query_type` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT 'EQ' COMMENT '查询方式（等于、不等于、大于、小于、范围）',
  `html_type` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '显示类型（文本框、文本域、下拉框、复选框、单选框、日期控件）',
  `sort` int DEFAULT NULL COMMENT '排序',
  PRIMARY KEY (`column_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=263 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='代码生成业务表字段';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `gen_table_column`
--

LOCK TABLES `gen_table_column` WRITE;
/*!40000 ALTER TABLE `gen_table_column` DISABLE KEYS */;
INSERT INTO `gen_table_column` VALUES (178,16,'id','主键','int','Integer','id','1','1','1','1','1','1','EQ','input',1),(179,16,'name','名称','varchar','String','name','0','0','1','1','1','1','EQ','input',2),(180,16,'sort','排序','int','Integer','sort','0','0','1','1','1','1','EQ','input',3),(181,16,'create_time','创建时间','datetime','Date','createTime','0','0','1','1','1','1','EQ','input',4),(182,16,'update_time','更新时间','datetime','Date','updateTime','0','0','1','1','1','1','EQ','input',5),(183,17,'id','主键','bigint','Long','id','1','1','1','1','1','1','EQ','input',1),(184,17,'logo','logo(文件UID)','varchar','String','logo','0','0','1','1','1','1','EQ','input',2),(185,17,'name','网站名称','varchar','String','name','0','0','1','1','1','1','EQ','input',3),(186,17,'summary','介绍','varchar','String','summary','0','0','1','1','1','1','EQ','input',4),(187,17,'record_num','备案号','varchar','String','recordNum','0','0','1','1','1','1','EQ','input',5),(188,17,'web_url','网站地址','varchar','String','webUrl','0','0','1','1','1','1','EQ','input',6),(189,17,'author','作者','varchar','String','author','0','0','1','1','1','1','EQ','input',7),(190,17,'author_info','个性签名','varchar','String','authorInfo','0','0','1','1','1','1','EQ','input',8),(191,17,'author_avatar','作者头像','varchar','String','authorAvatar','0','0','1','1','1','1','EQ','input',9),(192,17,'ali_pay','支付宝收款码','varchar','String','aliPay','0','0','1','1','1','1','EQ','input',10),(193,17,'weixin_pay','微信收款码','varchar','String','weixinPay','0','0','1','1','1','1','EQ','input',11),(194,17,'github','github地址','varchar','String','github','0','0','1','1','1','1','EQ','input',12),(195,17,'gitee','gitee地址','varchar','String','gitee','0','0','1','1','1','1','EQ','input',13),(196,17,'qq_number','QQ号','varchar','String','qqNumber','0','0','1','1','1','1','EQ','input',14),(197,17,'qq_group','QQ群','varchar','String','qqGroup','0','0','1','1','1','1','EQ','input',15),(198,17,'email','邮箱','varchar','String','email','0','0','1','1','1','1','EQ','input',16),(199,17,'wechat','微信','varchar','String','wechat','0','0','1','1','1','1','EQ','input',17),(200,17,'show_list','显示的列表（用于控制邮箱、QQ、QQ群、Github、Gitee、微信是否显示在前端）','varchar','String','showList','0','0','1','1','1','1','EQ','input',18),(201,17,'login_type_list','登录方式列表（用于控制前端登录方式，如账号密码,码云,Github,QQ,微信）','varchar','String','loginTypeList','0','0','1','1','1','1','EQ','input',19),(202,17,'open_comment','是否开启评论(0:否 1:是)','tinyint','Integer','openComment','0','0','1','1','1','1','EQ','input',20),(203,17,'open_admiration','是否开启赞赏(0:否， 1:是)','tinyint','Integer','openAdmiration','0','0','1','1','1','1','EQ','input',21),(204,17,'tourist_avatar','游客头像','varchar','String','touristAvatar','0','0','1','1','1','1','EQ','input',22),(205,17,'bulletin','公告','varchar','String','bulletin','0','0','1','1','1','1','EQ','input',23),(206,17,'about_me','关于我','mediumtext','String','aboutMe','0','0','1','1','1','1','EQ','input',24),(207,17,'create_time','创建时间','datetime','Date','createTime','0','0','1','1','1','1','EQ','input',25),(208,17,'update_time','更新时间','datetime','Date','updateTime','0','0','1','1','1','1','EQ','input',26),(209,18,'id','主键id','bigint','Long','id',NULL,'1','1','1','1','1','EQ','input',1),(210,18,'user_id','用户id','int','Integer','userId',NULL,'1','1','1','1','1','EQ','input',2),(211,18,'category_id','分类id','bigint','Long','categoryId',NULL,'0','1','1','1','1','EQ','input',3),(212,18,'title','文章标题','varchar','String','title',NULL,'1','1','1','1','1','EQ','input',4),(213,18,'cover','文章封面地址','varchar','String','cover',NULL,'0','1','1','1','1','EQ','input',5),(214,18,'summary','文章简介','varchar','String','summary',NULL,'1','1','1','1','1','EQ','input',6),(215,18,'content','文章内容','mediumtext','String','content',NULL,'0','1','1','1','1','EQ','input',7),(216,18,'content_md','文章内容md格式','mediumtext','String','contentMd',NULL,'0','1','1','1','1','EQ','input',8),(217,18,'read_type','阅读方式 0无需验证 1：评论阅读 2：点赞阅读 3：扫码阅读','int','Integer','readType',NULL,'0','1','1','1','1','EQ','input',9),(218,18,'is_stick','是否置顶 0否 1是','int','Integer','isStick',NULL,'0','1','1','1','1','EQ','input',10),(219,18,'is_publish','是否发布 0：下架 1：发布','int','Integer','isPublish',NULL,'0','1','1','1','1','EQ','input',11),(220,18,'is_original','是否原创  0：转载 1:原创','int','Integer','isOriginal',NULL,'0','1','1','1','1','EQ','input',12),(221,18,'is_carousel','是否首页轮播','int','Integer','isCarousel',NULL,'0','1','1','1','1','EQ','input',13),(222,18,'is_recommend','是否推荐','int','Integer','isRecommend',NULL,'0','1','1','1','1','EQ','input',14),(223,18,'original_url','转载地址','varchar','String','originalUrl',NULL,'0','1','1','1','1','EQ','input',15),(224,18,'quantity','文章阅读量','bigint','Long','quantity',NULL,'0','1','1','1','1','EQ','input',16),(225,18,'keywords','关键词','varchar','String','keywords',NULL,'0','1','1','1','1','EQ','input',17),(226,18,'create_time','创建时间','datetime','Date','createTime',NULL,'0','1','1','1','1','EQ','input',18),(227,18,'update_time','修改时间','datetime','Date','updateTime',NULL,'0','1','1','1','1','EQ','input',19),(228,19,'id','主键','int','Integer','id','1','1','1','1','1','1','EQ','input',1),(229,19,'name','名称','varchar','String','name','0','0','1','1','1','1','EQ','input',2),(230,19,'sort','排序','int','Integer','sort','0','0','1','1','1','1','EQ','input',3),(231,19,'create_time','创建时间','datetime','Date','createTime','0','0','1','1','1','1','EQ','input',4),(232,19,'update_time','更新时间','datetime','Date','updateTime','0','0','1','1','1','1','EQ','input',5),(233,20,'id','主键ID','int','Integer','id','1','1','1','1','1','1','EQ','input',1),(234,20,'name','网站名称','varchar','String','name','0','0','1','1','1','1','EQ','input',2),(235,20,'url','网站地址','varchar','String','url','0','0','1','1','1','1','EQ','input',3),(236,20,'avatar','网站头像地址','varchar','String','avatar','0','0','1','1','1','1','EQ','input',4),(237,20,'info','网站描述','varchar','String','info','0','0','1','1','1','1','EQ','input',5),(238,20,'email','邮箱','varchar','String','email','0','0','1','1','1','1','EQ','input',6),(239,20,'sort','排序','int','Integer','sort','0','0','1','1','1','1','EQ','input',7),(240,20,'reason','下架原因','varchar','String','reason','0','0','1','1','1','1','EQ','input',8),(241,20,'status','ENUM-状态:\"0,下架;1,申请;2:上架\"','int','Integer','status','0','0','1','1','1','1','EQ','input',9),(242,20,'create_time','创建时间','datetime','Date','createTime','0','0','1','1','1','1','EQ','input',10),(243,20,'update_time','修改时间','datetime','Date','updateTime','0','0','1','1','1','1','EQ','input',11);
/*!40000 ALTER TABLE `gen_table_column` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `qrtz_job_details`
--

DROP TABLE IF EXISTS `qrtz_job_details`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `qrtz_job_details` (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `JOB_NAME` varchar(190) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `JOB_GROUP` varchar(190) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `DESCRIPTION` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `JOB_CLASS_NAME` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `IS_DURABLE` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `IS_NONCONCURRENT` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `IS_UPDATE_DATA` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `REQUESTS_RECOVERY` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `JOB_DATA` blob,
  PRIMARY KEY (`SCHED_NAME`,`JOB_NAME`,`JOB_GROUP`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `qrtz_job_details`
--

LOCK TABLES `qrtz_job_details` WRITE;
/*!40000 ALTER TABLE `qrtz_job_details` DISABLE KEYS */;
/*!40000 ALTER TABLE `qrtz_job_details` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `qrtz_triggers`
--

DROP TABLE IF EXISTS `qrtz_triggers`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `qrtz_triggers` (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `TRIGGER_NAME` varchar(190) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `TRIGGER_GROUP` varchar(190) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `JOB_NAME` varchar(190) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `JOB_GROUP` varchar(190) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `DESCRIPTION` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `NEXT_FIRE_TIME` bigint DEFAULT NULL,
  `PREV_FIRE_TIME` bigint DEFAULT NULL,
  `PRIORITY` int DEFAULT NULL,
  `TRIGGER_STATE` varchar(16) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `TRIGGER_TYPE` varchar(8) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `START_TIME` bigint NOT NULL,
  `END_TIME` bigint DEFAULT NULL,
  `CALENDAR_NAME` varchar(190) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `MISFIRE_INSTR` smallint DEFAULT NULL,
  `JOB_DATA` blob,
  PRIMARY KEY (`SCHED_NAME`,`TRIGGER_NAME`,`TRIGGER_GROUP`) USING BTREE,
  KEY `SCHED_NAME` (`SCHED_NAME`,`JOB_NAME`,`JOB_GROUP`) USING BTREE,
  CONSTRAINT `qrtz_triggers_ibfk_1` FOREIGN KEY (`SCHED_NAME`, `JOB_NAME`, `JOB_GROUP`) REFERENCES `qrtz_job_details` (`SCHED_NAME`, `JOB_NAME`, `JOB_GROUP`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `qrtz_triggers`
--

LOCK TABLES `qrtz_triggers` WRITE;
/*!40000 ALTER TABLE `qrtz_triggers` DISABLE KEYS */;
/*!40000 ALTER TABLE `qrtz_triggers` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sys_album`
--

DROP TABLE IF EXISTS `sys_album`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sys_album` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键',
  `name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '相册名',
  `description` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '相册描述',
  `cover` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '封面URL',
  `is_lock` int DEFAULT '0' COMMENT '是否加密 0：否 1：是',
  `password` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '密码',
  `sort` int DEFAULT NULL COMMENT '排序',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='相册';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sys_album`
--

LOCK TABLES `sys_album` WRITE;
/*!40000 ALTER TABLE `sys_album` DISABLE KEYS */;
INSERT INTO `sys_album` VALUES (6,'夕阳','','http://113.45.240.54:9092/album-cover/2db87fbb-8a0a-48d1-b212-b07465575227_100n0x000000lfrm69B27.jpg',0,'',NULL,'2025-04-26 21:26:54'),(8,'彩虹','','http://113.45.240.54:9092/album-cover/6f1e99e0-5063-4567-a230-725ee0474e4a_100p0x000000lfu7m5149.jpg',0,'',NULL,'2025-04-26 21:27:59');
/*!40000 ALTER TABLE `sys_album` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sys_article`
--

DROP TABLE IF EXISTS `sys_article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sys_article` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键id',
  `user_id` int NOT NULL COMMENT '用户id',
  `category_id` bigint DEFAULT '0' COMMENT '分类id',
  `title` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL DEFAULT '' COMMENT '文章标题',
  `cover` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '文章封面地址',
  `summary` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL DEFAULT '' COMMENT '文章简介',
  `content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci COMMENT '文章内容',
  `content_md` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci COMMENT '文章内容md格式',
  `read_type` int DEFAULT '1' COMMENT '阅读方式 0无需验证 1：评论阅读 2：点赞阅读 3：扫码阅读',
  `is_stick` int DEFAULT '0' COMMENT '是否置顶 0否 1是',
  `status` int DEFAULT '0' COMMENT '状态 0：下架 1：发布',
  `is_original` int DEFAULT '1' COMMENT '是否原创  0：转载 1:原创',
  `is_carousel` int DEFAULT '0' COMMENT '是否首页轮播',
  `is_recommend` int DEFAULT '0' COMMENT '是否推荐',
  `original_url` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '转载地址',
  `quantity` bigint DEFAULT '0' COMMENT '文章阅读量',
  `keywords` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '关键词',
  `ai_describe` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci COMMENT 'Ai生成的简短描述',
  `create_time` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE,
  KEY `user_id` (`user_id`) USING BTREE,
  FULLTEXT KEY `title` (`title`) /*!50100 WITH PARSER `ngram` */ 
) ENGINE=InnoDB AUTO_INCREMENT=359 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='博客文章表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sys_article`
--

LOCK TABLES `sys_article` WRITE;
/*!40000 ALTER TABLE `sys_article` DISABLE KEYS */;
INSERT INTO `sys_article` VALUES (292,1,20,'个人开发的管理系统  Neat-Admin','http://113.45.240.54:9092/article-cover/9f8176a8-88cd-4519-9991-9125d52bb6dd_freecompress-Neat-Admin 管理系统.png','基于vue3+typescript+elmentui-plus开发的一款后台管理系统，功能跟若依差不多，主要不同的是样式美化，要比若依更漂亮','<h4><a id=\"_0\"></a>前言</h4>\n<p>本后台管理系统基于当下前沿的技术栈 vue3、typescript 以及 elementui-plus 进行精心构建。在功能维度上，其与若依系统具备相当的完整性与丰富度，涵盖了诸如用户管理、权限控制、数据统计分析、业务流程处理等一系列核心后台管理功能模块，能够高效地支撑各类企业级业务运营需求。然而，本系统在视觉呈现方面展现出独特的优势，通过对样式的深度美化与精心雕琢，采用了更为先进的 UI 设计理念与精细化的布局策略，运用精致的色彩搭配、优雅的字体选择以及灵动的交互元素设计，使其整体视觉效果相较于若依更为美观、精致且专业，能够为用户带来更舒适、高效且具品质感的操作体验，极大地提升了后台管理工作的愉悦度与便捷性，彰显出卓越的专业性与高端品质形象。</p>\n<h4><a id=\"_4\"></a>视频预览</h4>\n<pre><code>&lt;video height=100% width=100% src=&quot;http://127.0.0.1:8800/localFile/local-plus/upload/20241120_230652.mp4&quot; controls autoplay&gt;&lt;/video&gt;\n</code></pre>\n<h4><a id=\"_8\"></a>仓库地址</h4>\n<p><a href=\"https://gitee.com/quequnlong/vue-neat-admin\" target=\"_blank\">Neat-Admin</a></p>\n','#### 前言\r\n\r\n  本后台管理系统基于当下前沿的技术栈 vue3、typescript 以及 elementui-plus 进行精心构建。在功能维度上，其与若依系统具备相当的完整性与丰富度，涵盖了诸如用户管理、权限控制、数据统计分析、业务流程处理等一系列核心后台管理功能模块，能够高效地支撑各类企业级业务运营需求。然而，本系统在视觉呈现方面展现出独特的优势，通过对样式的深度美化与精心雕琢，采用了更为先进的 UI 设计理念与精细化的布局策略，运用精致的色彩搭配、优雅的字体选择以及灵动的交互元素设计，使其整体视觉效果相较于若依更为美观、精致且专业，能够为用户带来更舒适、高效且具品质感的操作体验，极大地提升了后台管理工作的愉悦度与便捷性，彰显出卓越的专业性与高端品质形象。\r\n  \r\n  #### 视频预览\r\n    <video height=100% width=100% src=\"http://127.0.0.1:8800/localFile/local-plus/upload/20241120_230652.mp4\" controls autoplay></video>\r\n  \r\n  \r\n  #### 仓库地址\r\n  [Neat-Admin](https://gitee.com/quequnlong/vue-neat-admin)',1,0,1,1,1,0,NULL,1,NULL,NULL,'2024-11-27 22:05:36','2025-07-08 22:58:17'),(296,1,17,'SpringBoot 3 集成 Sa-Token 实现权限相关功能','http://113.45.240.54:9092/article-cover/935ec94a-84b4-4bb4-9f8b-275cca666804_freecompress-Neat-Admin 管理系统 (1).png','SpringBoot 3 集成 Sa-Token 实现权限相关功能','<h2><a id=\"1SaToken__content_views_0\"></a>1、Sa-Token 介绍 {#content_views}</h2>\n<h3><a id=\"11_SaToken_httpssatokencchttpssatokencc_httpssatokencc_3\"></a>1.1 Sa-Token 开发文档：<a href=\"https://sa-token.cc/\" title=\"https://sa-token.cc\" target=\"_blank\">https://sa-token.cc</a></h3>\n<h3><a id=\"12_SaToken__Java____OAuth20___5\"></a><strong>1.2 Sa-Token</strong> 是一个轻量级 Java 权限认证框架，主要解决：<strong>登录认证</strong> 、<strong>权限认证</strong> 、<strong>单点登录</strong> 、<strong>OAuth2.0</strong> 、<strong>微服务鉴权</strong> 等一系列权限相关问题。</h3>\n<h3><a id=\"13_httpsiblogcsdnimgcnblog_migrate61de5b4e66af7c02266d67e618c86dd9png_7\"></a>1.3 功能结构图<img src=\"https://i-blog.csdnimg.cn/blog_migrate/61de5b4e66af7c02266d67e618c86dd9.png\" alt=\"\" /></h3>\n<h2><a id=\"2_SpringBoot_3__SaToken_9\"></a>2、 SpringBoot 3 集成 Sa-Token</h2>\n<h3><a id=\"21_Maven_12\"></a><strong>2.1 Maven</strong></h3>\n<pre><div class=\"hljs\"><code class=\"lang-XML\"><span class=\"hljs-comment\">&lt;!-- Sa-Token --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>cn.dev33<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>sa-token-spring-boot3-starter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.38.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- Sa-Token 集成 jwt --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>cn.dev33<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>sa-token-jwt<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.38.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- Sa-Token 集成 redis， 并使用 jackson 序列化 --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>cn.dev33<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>sa-token-redis-jackson<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.38.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- 提供Redis连接池 --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.commons<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>commons-pool2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- fastjson2 处理 json 数据 --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.fastjson2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>fastjson2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.0.48<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- 使用 springdoc 生成 swagger 文档  --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springdoc<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>springdoc-openapi-starter-webmvc-ui<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.5.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.mysql<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mysql-connector-j<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>8.3.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- mybatis-plus-boot-starter 中 mybatis-spring 版本不够，排除之后引入新版本 --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.baomidou<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.5.6<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">exclusions</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">exclusion</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.mybatis<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mybatis-spring<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">exclusion</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">exclusions</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.mybatis<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mybatis-spring<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.0.3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></div></pre>\n<h3><a id=\"22_yml__satoken_87\"></a>2.2 yml 配置 sa-token</h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\">server:\n  port: <span class=\"hljs-number\">8080</span>\n\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql:<span class=\"hljs-comment\">//localhost:3306/xxx</span>\n    username: xxx\n    password: xxx\n  data:\n    redis:\n      database: <span class=\"hljs-number\">1</span>\n\nsa-token:\n  token-name: X-Token\n  # token有效期，单位s 默认<span class=\"hljs-number\">30</span>天, -<span class=\"hljs-number\">1</span>代表永不过期\n  timeout: -<span class=\"hljs-number\">1</span>\n  # token 最低活跃频率（单位：秒），如果 token 超过此时间没有访问系统就会被冻结，默认-<span class=\"hljs-number\">1</span> 代表不限制，永不冻结\n  active-timeout: <span class=\"hljs-number\">3600</span>\n  # jwt秘钥\n  jwt-secret-key: qazwsxedc\n\n# 文件上传下载目录\nfiles:\n  upload:\n    path: D:/files/\n</code></div></pre>\n<h3><a id=\"23__118\"></a>2.3 常量</h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> com.dragon.springboot3vue3.common;\n\n<span class=\"hljs-keyword\">import</span> io.swagger.v3.oas.annotations.media.Schema;\n\n<span class=\"hljs-meta\">@Schema(description = &quot;常量&quot;)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Constant</span> {\n\n    <span class=\"hljs-comment\">// SaResult 默认设置了 200 为成功, 500 为 失败</span>\n    \n    <span class=\"hljs-comment\">/********** CODE &amp; MSG **********/</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String TOKEN= <span class=\"hljs-string\">&quot;X-Token&quot;</span>;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String USER_PASSWORD= <span class=\"hljs-string\">&quot;123456&quot;</span>;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">TOKEN_INVALID_CODE</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">20001</span>; <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">TOKEN_INVALID_MSG</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;Token无效，请重新登录&quot;</span>;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">USERNAME_OCCUPIED_CODE</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">20002</span>; <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">USERNAME_OCCUPIED_MSG</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;用户名被占用，请重新输入&quot;</span>;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">USERNAME_OR_PASSWORD_ERROR_CODE</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">20003</span>; <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">USERNAME_OR_PASSWORD_ERROR_MSG</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;用户名或密码输入错误&quot;</span>;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">MISSING_NECESSARY_PARAMETERS_CODE</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">20004</span>; <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">MISSING_NECESSARY_PARAMETERS_MSG</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;缺少必要的参数&quot;</span>;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">ORIGINAL_PASSWORD_ERROR_CODE</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">20005</span>; <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">ORIGINAL_PASSWORD_ERROR_MSG</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;原密码输入错误&quot;</span>;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">PASSWORD_INCONSISTENCY_CODE</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">20006</span>; <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">PASSWORD_INCONSISTENCY_MSG</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;两次输入的新密码不一致&quot;</span>;\n\n    <span class=\"hljs-comment\">//  请求白名单，请求会放行</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String[] WHITE_LIST = {\n            <span class=\"hljs-string\">&quot;/user/register&quot;</span>,\n            <span class=\"hljs-string\">&quot;/user/login&quot;</span>,\n            <span class=\"hljs-string\">&quot;/user/logout&quot;</span>,\n            <span class=\"hljs-string\">&quot;/swagger-ui/**&quot;</span>,\n            <span class=\"hljs-string\">&quot;/v3/**&quot;</span>,\n            <span class=\"hljs-string\">&quot;/files/{fileName}&quot;</span>,\n    };\n}\n</code></div></pre>\n<h3><a id=\"24_config_152\"></a>2.4 config-配置类</h3>\n<h4><a id=\"241__154\"></a>2.4.1 跨域配置类</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> com.dragon.springboot3vue3.config;\n\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.cors.CorsConfiguration;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.filter.CorsFilter;\n<span class=\"hljs-keyword\">import</span> java.util.List;\n\n<span class=\"hljs-comment\">/**\n * 跨域配置类\n */</span>\n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CorsConfig</span> {\n\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-keyword\">public</span> CorsFilter <span class=\"hljs-title function_\">corsFilter</span><span class=\"hljs-params\">()</span>{\n        <span class=\"hljs-type\">CorsConfiguration</span> <span class=\"hljs-variable\">corsConfiguration</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CorsConfiguration</span>();\n        corsConfiguration.setAllowedOrigins(List.of(<span class=\"hljs-string\">&quot;http://localhost:3000&quot;</span>, <span class=\"hljs-string\">&quot;http://127.0.0.1:5173&quot;</span>,<span class=\"hljs-string\">&quot;http://localhost:5173&quot;</span>)); <span class=\"hljs-comment\">// 设置允许的来源</span>\n        corsConfiguration.setAllowedMethods(List.of(<span class=\"hljs-string\">&quot;*&quot;</span>));     <span class=\"hljs-comment\">// 设置允许的方法</span>\n        corsConfiguration.setAllowedHeaders(List.of(<span class=\"hljs-string\">&quot;*&quot;</span>));     <span class=\"hljs-comment\">// 设置允许的头部</span>\n        corsConfiguration.setAllowCredentials(<span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">// 允许携带凭证</span>\n\n        <span class=\"hljs-type\">UrlBasedCorsConfigurationSource</span> <span class=\"hljs-variable\">urlBasedCorsConfigurationSource</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UrlBasedCorsConfigurationSource</span>();\n        urlBasedCorsConfigurationSource.registerCorsConfiguration(<span class=\"hljs-string\">&quot;/**&quot;</span>,corsConfiguration);\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CorsFilter</span>(urlBasedCorsConfigurationSource);\n    }\n}\n</code></div></pre>\n<h4><a id=\"242_SaToken__188\"></a>2.4.2 SaToken 配置类</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> com.dragon.springboot3vue3.config;\n\n<span class=\"hljs-keyword\">import</span> cn.dev33.satoken.interceptor.SaInterceptor;\n<span class=\"hljs-keyword\">import</span> cn.dev33.satoken.jwt.StpLogicJwtForSimple;\n<span class=\"hljs-keyword\">import</span> cn.dev33.satoken.router.SaRouter;\n<span class=\"hljs-keyword\">import</span> cn.dev33.satoken.stp.StpLogic;\n<span class=\"hljs-keyword\">import</span> cn.dev33.satoken.stp.StpUtil;\n<span class=\"hljs-keyword\">import</span> com.dragon.springboot3vue3.common.Constant;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SaTokenConfigure</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">WebMvcConfigurer</span> {\n    <span class=\"hljs-comment\">// Sa-Token 整合 jwt (Simple 简单模式)</span>\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-keyword\">public</span> StpLogic <span class=\"hljs-title function_\">getStpLogicJwt</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StpLogicJwtForSimple</span>();\n    }\n\n    <span class=\"hljs-comment\">// 注册 Sa-Token 拦截器</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addInterceptors</span><span class=\"hljs-params\">(InterceptorRegistry registry)</span> {\n        registry.addInterceptor(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SaInterceptor</span>(handle -&gt; {\n            <span class=\"hljs-comment\">// 登录拦截，放行白名单</span>\n            SaRouter.match(<span class=\"hljs-string\">&quot;/**&quot;</span>).notMatch(Constant.WHITE_LIST).check(r -&gt; StpUtil.checkLogin());\n\n        }))\n        .addPathPatterns(<span class=\"hljs-string\">&quot;/**&quot;</span>);\n    }\n}\n</code></div></pre>\n<h4><a id=\"243_Swagger__225\"></a>2.4.3 Swagger 配置类</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> com.dragon.springboot3vue3.config;\n\n<span class=\"hljs-keyword\">import</span> io.swagger.v3.oas.models.ExternalDocumentation;\n<span class=\"hljs-keyword\">import</span> io.swagger.v3.oas.models.OpenAPI;\n<span class=\"hljs-keyword\">import</span> io.swagger.v3.oas.models.info.Info;\n<span class=\"hljs-keyword\">import</span> io.swagger.v3.oas.models.info.License;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;\n\n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SwaggerConfig</span> {\n\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-keyword\">public</span> OpenAPI <span class=\"hljs-title function_\">openAPI</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">OpenAPI</span> <span class=\"hljs-variable\">openAPI</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">OpenAPI</span>();\n        openAPI.info(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Info</span>().title(<span class=\"hljs-string\">&quot;前后端分离管理系统&quot;</span>)\n                               .description(<span class=\"hljs-string\">&quot;使用springboot3-vue3等技术&quot;</span>)\n                               .version(<span class=\"hljs-string\">&quot;v1.0.0&quot;</span>)\n                               .license(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">License</span>().name(<span class=\"hljs-string\">&quot;Apache 2.0&quot;</span>).url(<span class=\"hljs-string\">&quot;https://springdoc.org&quot;</span>)));\n        openAPI.externalDocs(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ExternalDocumentation</span>().description(<span class=\"hljs-string\">&quot;项目API文档&quot;</span>)\n                                                        .url(<span class=\"hljs-string\">&quot;/&quot;</span>));\n        <span class=\"hljs-keyword\">return</span> openAPI;\n    }\n}\n</code></div></pre>\n<h4><a id=\"244_MybatisPlus__254\"></a>2.4.4 MybatisPlus 配置类</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> com.dragon.springboot3vue3.config;\n\n<span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.annotation.DbType;\n<span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;\n<span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;\n\n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MybatisPlusConfig</span> {\n    <span class=\"hljs-comment\">/**\n     * 添加 MybatisPlus 分页插件\n     */</span>\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-keyword\">public</span> MybatisPlusInterceptor <span class=\"hljs-title function_\">mybatisPlusInterceptor</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">MybatisPlusInterceptor</span> <span class=\"hljs-variable\">interceptor</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MybatisPlusInterceptor</span>();\n        interceptor.addInnerInterceptor(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PaginationInnerInterceptor</span>(DbType.MYSQL));\n        <span class=\"hljs-keyword\">return</span> interceptor;\n    }\n}\n</code></div></pre>\n<h3><a id=\"25__279\"></a>2.5 实现登录认证</h3>\n<p>2.5.1 SaResult - SaToken封装的结果集</p>\n<p>2.5.2 StpUtil - SaToken的鉴权工具类（<a href=\"https://sa-token.cc/doc.html#/api/stp-util\" title=\"Sa-Token\" target=\"_blank\">Sa-Token</a>）</p>\n<p>2.5.3 StringRedisTemplate - Redis工具类</p>\n<p>2.5.4 BCrypt - 密码加密方式（<a href=\"https://sa-token.cc/doc.html#/up/password-secure\" title=\"Sa-Token\" target=\"_blank\">Sa-Token</a>）</p>\n<p>2.5.5 @Tag、@Operation - Swagger(SpringDoc)注解</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> com.dragon.springboot3vue3.controller;\n\n<span class=\"hljs-keyword\">import</span> cn.dev33.satoken.secure.BCrypt;\n<span class=\"hljs-keyword\">import</span> cn.dev33.satoken.stp.StpUtil;\n<span class=\"hljs-keyword\">import</span> cn.dev33.satoken.util.SaResult;\n<span class=\"hljs-keyword\">import</span> com.alibaba.fastjson2.JSON;\n<span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;\n<span class=\"hljs-keyword\">import</span> com.dragon.springboot3vue3.common.Constant;\n<span class=\"hljs-keyword\">import</span> com.dragon.springboot3vue3.controller.dto.entityDto.RegisterOrLoginDto;\n<span class=\"hljs-keyword\">import</span> com.dragon.springboot3vue3.controller.dto.entityDto.UserDto;\n<span class=\"hljs-keyword\">import</span> com.dragon.springboot3vue3.controller.dto.pageDto.UserPageDto;\n<span class=\"hljs-keyword\">import</span> com.dragon.springboot3vue3.entity.User;\n<span class=\"hljs-keyword\">import</span> com.dragon.springboot3vue3.service.IUserService;\n<span class=\"hljs-keyword\">import</span> io.swagger.v3.oas.annotations.Operation;\n<span class=\"hljs-keyword\">import</span> io.swagger.v3.oas.annotations.tags.Tag;\n<span class=\"hljs-keyword\">import</span> jakarta.servlet.http.HttpServletResponse;\n<span class=\"hljs-keyword\">import</span> org.apache.commons.lang3.StringUtils;\n<span class=\"hljs-keyword\">import</span> org.springframework.beans.BeanUtils;\n<span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;\n<span class=\"hljs-keyword\">import</span> org.springframework.data.redis.core.StringRedisTemplate;\n<span class=\"hljs-keyword\">import</span> org.springframework.validation.annotation.Validated;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.*;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.multipart.MultipartFile;\n<span class=\"hljs-keyword\">import</span> java.util.List;\n<span class=\"hljs-keyword\">import</span> java.util.concurrent.TimeUnit;\n\n<span class=\"hljs-meta\">@Tag(name = &quot;用户接口&quot;)</span>\n<span class=\"hljs-meta\">@RestController</span>\n<span class=\"hljs-meta\">@RequestMapping(&quot;/user&quot;)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserController</span> {\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-keyword\">private</span> IUserService userService;\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-keyword\">private</span> StringRedisTemplate stringRedisTemplate;\n\n    <span class=\"hljs-meta\">@Operation(summary = &quot;注册&quot;)</span>\n    <span class=\"hljs-meta\">@PostMapping(&quot;/register&quot;)</span>\n    <span class=\"hljs-keyword\">public</span> SaResult <span class=\"hljs-title function_\">register</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> <span class=\"hljs-meta\">@Validated</span> RegisterOrLoginDto registerDto)</span>{\n        User user=userService.lambdaQuery().eq(User::getUsername,registerDto.getUsername()).one();\n        <span class=\"hljs-keyword\">if</span>(user!=<span class=\"hljs-literal\">null</span>){\n            <span class=\"hljs-keyword\">return</span> SaResult.error(Constant.USERNAME_OCCUPIED_MSG).setCode(Constant.USERNAME_OCCUPIED_CODE);\n        }\n        user=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">User</span>();\n        BeanUtils.copyProperties(registerDto,user);\n        <span class=\"hljs-comment\">// BCrypt.hashpw() 密码加密</span>\n        user.setPassword(BCrypt.hashpw(registerDto.getPassword(), BCrypt.gensalt()));\n        userService.save(user);\n        <span class=\"hljs-keyword\">return</span> SaResult.ok();\n    }\n\n    <span class=\"hljs-meta\">@Operation(summary = &quot;登录&quot;)</span>\n    <span class=\"hljs-meta\">@PostMapping(&quot;/login&quot;)</span>\n    <span class=\"hljs-keyword\">public</span> SaResult <span class=\"hljs-title function_\">login</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> <span class=\"hljs-meta\">@Validated</span> RegisterOrLoginDto loginDto)</span>{\n        User user=userService.lambdaQuery().eq(User::getUsername,loginDto.getUsername()).one();\n        <span class=\"hljs-comment\">// BCrypt.checkpw(前端明文,后端密文)</span>\n        <span class=\"hljs-keyword\">if</span>(user!=<span class=\"hljs-literal\">null</span> &amp;&amp; BCrypt.checkpw(loginDto.getPassword(),user.getPassword())){\n            <span class=\"hljs-comment\">// 登录认证</span>\n            StpUtil.login(user.getId());\n            <span class=\"hljs-comment\">// 生成token，token 信息自动存入redis，在yml里配置 sa-token 相关信息</span>\n            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> StpUtil.getTokenValue();\n            <span class=\"hljs-comment\">// 将用户信息存入 redis</span>\n            stringRedisTemplate.opsForValue().set(user.getId(), JSON.toJSONString(user),<span class=\"hljs-number\">1</span>, TimeUnit.DAYS);\n\n            <span class=\"hljs-keyword\">return</span> SaResult.ok().setData(token);\n        }\n        <span class=\"hljs-keyword\">return</span> SaResult.error(Constant.USERNAME_OR_PASSWORD_ERROR_MSG).setCode(Constant.USERNAME_OR_PASSWORD_ERROR_CODE);\n    }\n\n    <span class=\"hljs-meta\">@Operation(summary = &quot;注销&quot;)</span>\n    <span class=\"hljs-meta\">@PostMapping(&quot;/logout&quot;)</span>\n    <span class=\"hljs-keyword\">public</span> SaResult <span class=\"hljs-title function_\">logout</span><span class=\"hljs-params\">()</span>{\n        StpUtil.logout();\n        <span class=\"hljs-keyword\">return</span> SaResult.ok();\n    }\n\n    <span class=\"hljs-meta\">@Operation(summary = &quot;获取登录用户信息&quot;)</span>\n    <span class=\"hljs-meta\">@GetMapping(&quot;/userInfo&quot;)</span>\n    <span class=\"hljs-keyword\">public</span> SaResult <span class=\"hljs-title function_\">userInfo</span><span class=\"hljs-params\">()</span>{\n        <span class=\"hljs-comment\">// Redis 中获取登录的用户信息</span>\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">userInfo</span> <span class=\"hljs-operator\">=</span> stringRedisTemplate.opsForValue().get(StpUtil.getLoginIdAsString());\n        User user= JSON.parseObject(userInfo,User.class);\n        <span class=\"hljs-keyword\">return</span> SaResult.ok().setData(user);\n    }\n}\n</code></div></pre>\n<h3><a id=\"26_swaggeruihttplocalhost8080swaggeruiindexhtmlhttplocalhost8080swaggeruiindexhtml_httplocalhost8080swaggeruiindexhtml_378\"></a>2.6 swagger-ui地址：<a href=\"http://localhost:8080/swagger-ui/index.html\" title=\"http://localhost:8080/swagger-ui/index.html\" target=\"_blank\">http://localhost:8080/swagger-ui/index.html</a></h3>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/8036ff05256828c0d4ad6c70ca1a3e18.png\" alt=\"\" /></p>\n','1、Sa-Token 介绍 {#content_views}\n------------------------------\n\n### 1.1 Sa-Token 开发文档：[https://sa-token.cc](https://sa-token.cc/ \"https://sa-token.cc\")\n\n### **1.2 Sa-Token** 是一个轻量级 Java 权限认证框架，主要解决：**登录认证** 、**权限认证** 、**单点登录** 、**OAuth2.0** 、**微服务鉴权** 等一系列权限相关问题。\n\n### 1.3 功能结构图![](https://i-blog.csdnimg.cn/blog_migrate/61de5b4e66af7c02266d67e618c86dd9.png)\n\n2、 SpringBoot 3 集成 Sa-Token\n---------------------------\n\n### **2.1 Maven**\n\n```XML\n<!-- Sa-Token -->\n<dependency>\n    <groupId>cn.dev33</groupId>\n    <artifactId>sa-token-spring-boot3-starter</artifactId>\n    <version>1.38.0</version>\n</dependency>\n\n<!-- Sa-Token 集成 jwt -->\n<dependency>\n    <groupId>cn.dev33</groupId>\n    <artifactId>sa-token-jwt</artifactId>\n    <version>1.38.0</version>\n</dependency>\n\n<!-- Sa-Token 集成 redis， 并使用 jackson 序列化 -->\n<dependency>\n    <groupId>cn.dev33</groupId>\n    <artifactId>sa-token-redis-jackson</artifactId>\n    <version>1.38.0</version>\n</dependency>\n\n<!-- 提供Redis连接池 -->\n<dependency>\n    <groupId>org.apache.commons</groupId>\n    <artifactId>commons-pool2</artifactId>\n</dependency>\n\n<!-- fastjson2 处理 json 数据 -->\n<dependency>\n    <groupId>com.alibaba.fastjson2</groupId>\n    <artifactId>fastjson2</artifactId>\n    <version>2.0.48</version>\n</dependency>\n\n<!-- 使用 springdoc 生成 swagger 文档  -->\n<dependency>\n    <groupId>org.springdoc</groupId>\n    <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>\n    <version>2.5.0</version>\n</dependency>\n\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n\n<dependency>\n    <groupId>com.mysql</groupId>\n    <artifactId>mysql-connector-j</artifactId>\n    <version>8.3.0</version>\n</dependency>\n\n<!-- mybatis-plus-boot-starter 中 mybatis-spring 版本不够，排除之后引入新版本 -->\n<dependency>\n    <groupId>com.baomidou</groupId>\n    <artifactId>mybatis-plus-boot-starter</artifactId>\n    <version>3.5.6</version>\n    <exclusions>\n        <exclusion>\n            <groupId>org.mybatis</groupId>\n            <artifactId>mybatis-spring</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n\n<dependency>\n    <groupId>org.mybatis</groupId>\n    <artifactId>mybatis-spring</artifactId>\n    <version>3.0.3</version>\n</dependency>\n```\n\n### 2.2 yml 配置 sa-token\n\n```java\nserver:\n  port: 8080\n\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/xxx\n    username: xxx\n    password: xxx\n  data:\n    redis:\n      database: 1\n\nsa-token:\n  token-name: X-Token\n  # token有效期，单位s 默认30天, -1代表永不过期\n  timeout: -1\n  # token 最低活跃频率（单位：秒），如果 token 超过此时间没有访问系统就会被冻结，默认-1 代表不限制，永不冻结\n  active-timeout: 3600\n  # jwt秘钥\n  jwt-secret-key: qazwsxedc\n\n# 文件上传下载目录\nfiles:\n  upload:\n    path: D:/files/\n```\n\n### 2.3 常量\n\n```java\npackage com.dragon.springboot3vue3.common;\n\nimport io.swagger.v3.oas.annotations.media.Schema;\n\n@Schema(description = \"常量\")\npublic class Constant {\n\n    // SaResult 默认设置了 200 为成功, 500 为 失败\n    \n    /********** CODE & MSG **********/\n    public static final String TOKEN= \"X-Token\";\n    public static final String USER_PASSWORD= \"123456\";\n    public static final int TOKEN_INVALID_CODE = 20001; public static final String TOKEN_INVALID_MSG = \"Token无效，请重新登录\";\n    public static final int USERNAME_OCCUPIED_CODE = 20002; public static final String USERNAME_OCCUPIED_MSG = \"用户名被占用，请重新输入\";\n    public static final int USERNAME_OR_PASSWORD_ERROR_CODE = 20003; public static final String USERNAME_OR_PASSWORD_ERROR_MSG = \"用户名或密码输入错误\";\n    public static final int MISSING_NECESSARY_PARAMETERS_CODE = 20004; public static final String MISSING_NECESSARY_PARAMETERS_MSG = \"缺少必要的参数\";\n    public static final int ORIGINAL_PASSWORD_ERROR_CODE = 20005; public static final String ORIGINAL_PASSWORD_ERROR_MSG = \"原密码输入错误\";\n    public static final int PASSWORD_INCONSISTENCY_CODE = 20006; public static final String PASSWORD_INCONSISTENCY_MSG = \"两次输入的新密码不一致\";\n\n    //  请求白名单，请求会放行\n    public static final String[] WHITE_LIST = {\n            \"/user/register\",\n            \"/user/login\",\n            \"/user/logout\",\n            \"/swagger-ui/**\",\n            \"/v3/**\",\n            \"/files/{fileName}\",\n    };\n}\n```\n\n### 2.4 config-配置类\n\n#### 2.4.1 跨域配置类\n\n```java\npackage com.dragon.springboot3vue3.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\nimport org.springframework.web.filter.CorsFilter;\nimport java.util.List;\n\n/**\n * 跨域配置类\n */\n@Configuration\npublic class CorsConfig {\n\n    @Bean\n    public CorsFilter corsFilter(){\n        CorsConfiguration corsConfiguration = new CorsConfiguration();\n        corsConfiguration.setAllowedOrigins(List.of(\"http://localhost:3000\", \"http://127.0.0.1:5173\",\"http://localhost:5173\")); // 设置允许的来源\n        corsConfiguration.setAllowedMethods(List.of(\"*\"));     // 设置允许的方法\n        corsConfiguration.setAllowedHeaders(List.of(\"*\"));     // 设置允许的头部\n        corsConfiguration.setAllowCredentials(true); // 允许携带凭证\n\n        UrlBasedCorsConfigurationSource urlBasedCorsConfigurationSource = new UrlBasedCorsConfigurationSource();\n        urlBasedCorsConfigurationSource.registerCorsConfiguration(\"/**\",corsConfiguration);\n\n        return new CorsFilter(urlBasedCorsConfigurationSource);\n    }\n}\n```\n\n#### 2.4.2 SaToken 配置类\n\n```java\npackage com.dragon.springboot3vue3.config;\n\nimport cn.dev33.satoken.interceptor.SaInterceptor;\nimport cn.dev33.satoken.jwt.StpLogicJwtForSimple;\nimport cn.dev33.satoken.router.SaRouter;\nimport cn.dev33.satoken.stp.StpLogic;\nimport cn.dev33.satoken.stp.StpUtil;\nimport com.dragon.springboot3vue3.common.Constant;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Configuration\npublic class SaTokenConfigure implements WebMvcConfigurer {\n    // Sa-Token 整合 jwt (Simple 简单模式)\n    @Bean\n    public StpLogic getStpLogicJwt() {\n        return new StpLogicJwtForSimple();\n    }\n\n    // 注册 Sa-Token 拦截器\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(new SaInterceptor(handle -> {\n            // 登录拦截，放行白名单\n            SaRouter.match(\"/**\").notMatch(Constant.WHITE_LIST).check(r -> StpUtil.checkLogin());\n\n        }))\n        .addPathPatterns(\"/**\");\n    }\n}\n```\n\n#### 2.4.3 Swagger 配置类\n\n```java\npackage com.dragon.springboot3vue3.config;\n\nimport io.swagger.v3.oas.models.ExternalDocumentation;\nimport io.swagger.v3.oas.models.OpenAPI;\nimport io.swagger.v3.oas.models.info.Info;\nimport io.swagger.v3.oas.models.info.License;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class SwaggerConfig {\n\n    @Bean\n    public OpenAPI openAPI() {\n        OpenAPI openAPI = new OpenAPI();\n        openAPI.info(new Info().title(\"前后端分离管理系统\")\n                               .description(\"使用springboot3-vue3等技术\")\n                               .version(\"v1.0.0\")\n                               .license(new License().name(\"Apache 2.0\").url(\"https://springdoc.org\")));\n        openAPI.externalDocs(new ExternalDocumentation().description(\"项目API文档\")\n                                                        .url(\"/\"));\n        return openAPI;\n    }\n}\n```\n\n#### 2.4.4 MybatisPlus 配置类\n\n```java\npackage com.dragon.springboot3vue3.config;\n\nimport com.baomidou.mybatisplus.annotation.DbType;\nimport com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;\nimport com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class MybatisPlusConfig {\n    /**\n     * 添加 MybatisPlus 分页插件\n     */\n    @Bean\n    public MybatisPlusInterceptor mybatisPlusInterceptor() {\n        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();\n        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));\n        return interceptor;\n    }\n}\n```\n\n### 2.5 实现登录认证\n\n2.5.1 SaResult - SaToken封装的结果集\n\n2.5.2 StpUtil - SaToken的鉴权工具类（[Sa-Token](https://sa-token.cc/doc.html#/api/stp-util \"Sa-Token\")）\n\n2.5.3 StringRedisTemplate - Redis工具类\n\n2.5.4 BCrypt - 密码加密方式（[Sa-Token](https://sa-token.cc/doc.html#/up/password-secure \"Sa-Token\")）\n\n2.5.5 @Tag、@Operation - Swagger(SpringDoc)注解\n\n```java\npackage com.dragon.springboot3vue3.controller;\n\nimport cn.dev33.satoken.secure.BCrypt;\nimport cn.dev33.satoken.stp.StpUtil;\nimport cn.dev33.satoken.util.SaResult;\nimport com.alibaba.fastjson2.JSON;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport com.dragon.springboot3vue3.common.Constant;\nimport com.dragon.springboot3vue3.controller.dto.entityDto.RegisterOrLoginDto;\nimport com.dragon.springboot3vue3.controller.dto.entityDto.UserDto;\nimport com.dragon.springboot3vue3.controller.dto.pageDto.UserPageDto;\nimport com.dragon.springboot3vue3.entity.User;\nimport com.dragon.springboot3vue3.service.IUserService;\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport jakarta.servlet.http.HttpServletResponse;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\n@Tag(name = \"用户接口\")\n@RestController\n@RequestMapping(\"/user\")\npublic class UserController {\n    @Autowired\n    private IUserService userService;\n    @Autowired\n    private StringRedisTemplate stringRedisTemplate;\n\n    @Operation(summary = \"注册\")\n    @PostMapping(\"/register\")\n    public SaResult register(@RequestBody @Validated RegisterOrLoginDto registerDto){\n        User user=userService.lambdaQuery().eq(User::getUsername,registerDto.getUsername()).one();\n        if(user!=null){\n            return SaResult.error(Constant.USERNAME_OCCUPIED_MSG).setCode(Constant.USERNAME_OCCUPIED_CODE);\n        }\n        user=new User();\n        BeanUtils.copyProperties(registerDto,user);\n        // BCrypt.hashpw() 密码加密\n        user.setPassword(BCrypt.hashpw(registerDto.getPassword(), BCrypt.gensalt()));\n        userService.save(user);\n        return SaResult.ok();\n    }\n\n    @Operation(summary = \"登录\")\n    @PostMapping(\"/login\")\n    public SaResult login(@RequestBody @Validated RegisterOrLoginDto loginDto){\n        User user=userService.lambdaQuery().eq(User::getUsername,loginDto.getUsername()).one();\n        // BCrypt.checkpw(前端明文,后端密文)\n        if(user!=null && BCrypt.checkpw(loginDto.getPassword(),user.getPassword())){\n            // 登录认证\n            StpUtil.login(user.getId());\n            // 生成token，token 信息自动存入redis，在yml里配置 sa-token 相关信息\n            String token = StpUtil.getTokenValue();\n            // 将用户信息存入 redis\n            stringRedisTemplate.opsForValue().set(user.getId(), JSON.toJSONString(user),1, TimeUnit.DAYS);\n\n            return SaResult.ok().setData(token);\n        }\n        return SaResult.error(Constant.USERNAME_OR_PASSWORD_ERROR_MSG).setCode(Constant.USERNAME_OR_PASSWORD_ERROR_CODE);\n    }\n\n    @Operation(summary = \"注销\")\n    @PostMapping(\"/logout\")\n    public SaResult logout(){\n        StpUtil.logout();\n        return SaResult.ok();\n    }\n\n    @Operation(summary = \"获取登录用户信息\")\n    @GetMapping(\"/userInfo\")\n    public SaResult userInfo(){\n        // Redis 中获取登录的用户信息\n        String userInfo = stringRedisTemplate.opsForValue().get(StpUtil.getLoginIdAsString());\n        User user= JSON.parseObject(userInfo,User.class);\n        return SaResult.ok().setData(user);\n    }\n}\n```\n\n### 2.6 swagger-ui地址：[http://localhost:8080/swagger-ui/index.html](http://localhost:8080/swagger-ui/index.html \"http://localhost:8080/swagger-ui/index.html\")\n\n![](https://i-blog.csdnimg.cn/blog_migrate/8036ff05256828c0d4ad6c70ca1a3e18.png)\n',1,1,1,1,1,1,'https://blog.csdn.net/qq_58159506/article/details/139647081',1,'111',NULL,'2025-04-26 11:58:46','2025-07-28 14:34:21'),(298,1,17,'OAuth 2.0 授权认证详解','http://113.45.240.54:9092/article-cover/c545319f-3fa1-4f63-a7b5-592ddfa3db20_freecompress-Neat-Admin 管理系统 (2).png','OAuth 2.0 授权认证详解','<h2><a id=\"OAuth20_content_views_0\"></a>​​​​​​一、认识OAuth2.0 {#content_views}</h2>\n<h3><a id=\"t111_OAuth_20__311OAuth_20__3\"></a>{#t1}{#11_OAuth_20__3}1.1、OAuth 2.0 应用场景</h3>\n<p>OAuth 2.0 （Open Authorization，开放授权）标准目前被广泛应用在<ins>第三方登录场景</ins> 中，以下是虚拟出来的角色，阐述 OAuth2 能帮我们干什么，引用阮一峰这篇<a href=\"https://link.juejin.cn/?target=https%3A%2F%2Fwww.ruanyifeng.com%2Fblog%2F2014%2F05%2Foauth_2_0.html\" title=\"理解OAuth 2.0\" target=\"_blank\">理解OAuth 2.0</a>中的例子：</p>\n<p>有一个&quot;云冲印&quot;的网站（客户端），可以将用户（资源拥有者）储存在Google（HTTP服务提供商）的照片，冲印出来。用户为了使用该服务，必须让&quot;云冲印&quot;读取自己储存在Google上的照片。</p>\n<p>问题是只有得到用户的授权，Google才会同意&quot;云冲印&quot;读取这些照片。那么，&quot;云冲印&quot;怎样获得用户的授权呢？</p>\n<p>传统方法是，用户将自己的Google用户名和密码，告诉&quot;云冲印&quot;，后者就可以读取用户的照片了。这样的做法有以下几个严重的缺点：</p>\n<p>1）&quot;云冲印&quot;为了后续的服务，会保存用户的密码，这样很不安全。</p>\n<p>2）Google不得不部署密码登录，而我们知道，单纯的密码登录并不安全。</p>\n<p>3）&quot;云冲印&quot;拥有了获取用户储存在Google所有资料的权力，用户没法限制&quot;云冲印&quot;获得授权的范围和有效期。</p>\n<p>4）用户只有修改密码，才能收回赋予&quot;云冲印&quot;的权力。但是这样做，会使得其他所有获得用户授权的第三方应用程序全部失效。</p>\n<p>5）只要有一个第三方应用程序被破解，就会导致用户密码泄漏，以及所有被密码保护的数据泄漏。</p>\n<h3><a id=\"t212__1512_23\"></a>{#t2}{#12__15}1.2、名词概念</h3>\n<p>OAuth 就是为了解决上面这些问题而诞生的。在详解 OAuth 之前，需要明确一些基本的概念，从上面场景中抽象出以下概念。</p>\n<p><strong>第三方应用程序</strong></p>\n<p><strong>Third-party application</strong> ：第三方应用程序，本文中又称&quot;客户端&quot;（client），即上一节例子中的&quot;云冲印&quot;。</p>\n<p><strong>HTTP服务提供商</strong></p>\n<p><strong>HTTP service</strong> ：HTTP服务提供商，本文中简称&quot;服务提供商&quot;，即上一节例子中的Google。</p>\n<p><strong>资源所有者</strong></p>\n<p><strong>Resource Owner</strong>：资源所有者，本文中又称&quot;用户&quot;（user）。</p>\n<p><strong>用户代理</strong></p>\n<p><strong>User Agent</strong>：用户代理，本文中就是指浏览器。</p>\n<p><strong>认证服务器</strong></p>\n<p><strong>Authorization server</strong> ：认证服务器，即<ins>服务提供商专门用来处理认证的服务器</ins>。</p>\n<p><strong>资源服务器</strong></p>\n<p><strong>Resource server</strong> ：资源服务器，即<ins>服务提供商存放用户生成的资源的服务器</ins>。它与认证服务器，可以是同一台服务器，也可以是不同的服务器。</p>\n<p>知道了上面这些名词，就不难理解，OAuth的作用就是<ins>让&quot;客户端&quot;安全可控地获取&quot;用户&quot;的授权，从而可以和&quot;服务商提供商&quot;进行互动。</ins></p>\n<h2><a id=\"t3OAuth__45OAuth__53\"></a>{#t3}{#OAuth__45}二、OAuth 的授权认证流程</h2>\n<h3><a id=\"t421__4821_56\"></a>{#t4}{#21__48}2.1、认证思路</h3>\n<p>OAuth 在&quot;客户端&quot;与&quot;服务提供商&quot;之间，设置了一个 <strong>授权层</strong> （authorization layer）。“客户端&quot;不能直接登录&quot;服务提供商”，只能登录授权层，以此将用户与客户端区分开来。<ins>&quot;客户端&quot;登录授权层所用的令牌（token），与用户的密码不同。用户可以在登录的时候，指定授权层令牌的权限范围和有效期。</ins></p>\n<p>&quot;客户端&quot;登录授权层以后，&quot;服务提供商&quot;根据令牌的权限范围和有效期，向&quot;客户端&quot;开放用户储存的资料。</p>\n<h3><a id=\"t522__5422_62\"></a>{#t5}{#22__54}2.2、认证流程</h3>\n<p>官方 RFC 6749 文件中的 OAuth 2.0 流程图有点晦涩，优化了 一下：</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/ca456ad49e2b8ada819e5f09a05a0410.png\" alt=\"\" /></p>\n<p>1）用户访问第三方应用程序（简称：客户端）以后，客户端要求用户给予授权。</p>\n<p>2）用户同意给予客户端授权。</p>\n<p>3）<ins>客户端使用第 2 步获得的授权，向认证服务器申请令牌</ins>。</p>\n<p>4）认证服务器对客户端进行认证以后，确认无误，同意发放令牌。</p>\n<p>5）客户端使用令牌，向资源服务器申请获取资源。</p>\n<p>6）资源服务器确认令牌无误，同意向客户端开放资源。</p>\n<p>上述中的第 2 步 是关键，即用户怎样才能给于客户端授权。有了这个授权以后，客户端就可以获取令牌，进而凭令牌获取资源。</p>\n<h2><a id=\"t6_69_82\"></a>{#t6}{#_69}三、四种授权模式</h2>\n<p>上一小节可以得出用户对客户端的授权动作是核心，客户端必须得到用户的授权（authorization grant），才能获得令牌（access token）。OAuth 2.0定义了四种授权方式：</p>\n<h3><a id=\"t731_authorization_code_7431authorization_code_87\"></a>{#t7}{#31_authorization_code_74}3.1、授权码模式（authorization code）</h3>\n<p>授权码（authorization code）方式，指的是<ins>第三方应用先申请一个授权码，然后再用该码获取令牌。</ins></p>\n<h3><a id=\"t832_implicit_7832implicit_91\"></a>{#t8}{#32_implicit_78}3.2、简化模式（implicit）</h3>\n<p>有些 Web 应用是纯前端应用，没有后端。这时就不能用上面的方式了，必须将令牌储存在前端。RFC 6749 就规定了第二种方式，<ins>允许直接向前端颁发令牌</ins>。这种方式没有授权码这个中间步骤，所以称为（授权码）“隐藏式”（implicit）。</p>\n<h3><a id=\"t933_resource_owner_password_credentials_8233resource_owner_password_credentials_95\"></a>{#t9}{#33_resource_owner_password_credentials_82}3.3、密码模式（resource owner password credentials）</h3>\n<p>如果你高度信任某个应用，RFC 6749 也允许用户把用户名和密码，直接告诉该应用。该应用就使用你的密码，申请令牌，这种方式称为&quot;密码式&quot;（password）。</p>\n<h3><a id=\"t1034_client_credentials_8634client_credentials_99\"></a>{#t10}{#34_client_credentials_86}3.4、客户端模式（client credentials）</h3>\n<p>最后一种方式是凭证式（client credentials），<ins>适用于没有前端的命令行应用，即在命令行下请求令牌。</ins></p>\n<h2><a id=\"t11_90_103\"></a>{#t11}{#_90}四、授权码模式详解</h2>\n<h3><a id=\"t1241__9341_106\"></a>{#t12}{#41__93}4.1、授权码模式流程</h3>\n<p>授权码模式（authorization code）是功能最完整、流程最严密安全的授权模式。它的特点就是<ins>通过客户端的<strong>后台服务器</strong>，与&quot;服务提供商&quot;的认证服务器进行互动。</ins></p>\n<p>注意这种方式适用于那些有后端的 Web 应用。<ins>授权码通过前端传送，令牌则是储存在后端</ins>，而且所有与资源服务器的通信都在后端完成。这样的前后端分离，可以避免令牌泄漏。</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/b162ba0ab8877cc5dc79389b7c103a22.png\" alt=\"\" /></p>\n<p>授权码模式流程如下：</p>\n<p>1）用户访问客户端，客户端将用户导向认证服务器。</p>\n<p>2）用户选择是否给予客户端授权。</p>\n<p>3）假设用户给予授权，认证服务器将用户导向客户端事先指定的&quot;重定向URI&quot;（redirection URI），同时附上一个授权码（每个用户的授权码不同）。</p>\n<p>4）客户端收到授权码，附上早先的&quot;重定向URI&quot;，向认证服务器申请令牌。这一步是在客户端的 <strong>后台服务器</strong> 上完成的，对用户不可见。</p>\n<p>5）认证服务器核对了授权码和重定向URI，确认无误后，向客户端发送访问令牌（access token）和更新令牌（refresh token）。</p>\n<p>从上述的流程描述可知，只有第 2 步需要用户进行授权操作，之后的流程都是在客户端的后台和认证服务器后台之前进行&quot;静默&quot;操作，对于用户来说是无感知的。</p>\n<p>下面是上面这些步骤所需要的参数。</p>\n<h3><a id=\"t1342__11342_130\"></a>{#t13}{#42__113}4.2、授权码模式流程的五个步骤</h3>\n<p>{#_1__115}<strong>第 1 步骤</strong></p>\n<p>{#_117}<strong>参数说明</strong></p>\n<p>第 1 步骤中，客户端申请认证的URI，包含以下参数：</p>\n<ul>\n<li><code>response_type</code>：表示授权类型，<strong>必选项</strong>，此处的值固定为&quot;code&quot;</li>\n<li><code>client_id</code>：表示客户端的ID，<strong>必选项</strong></li>\n<li><code>redirect_uri</code>：表示重定向URI，可选项</li>\n<li><code>scope</code>：表示申请的权限范围，可选项</li>\n<li><code>state</code>：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。</li>\n</ul>\n<p>{#_127}<strong>示例</strong></p>\n<p>A 网站提供一个链接，用户点击后就会跳转到 B 网站，授权用户数据给 A 网站使用。下面就是 A 网站跳转 B 网站的一个示意链接：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">https:<span class=\"hljs-comment\">//b.com/oauth/authorize?response_type=code&amp;client_id=CLIENT_ID&amp;redirect_uri=CALLBACK_URL&amp;scope=read </span>\n</code></div></pre>\n<p>上面 URL 中：</p>\n<p><code>response_type</code>参数表示要求返回授权码（<code>code</code>）；</p>\n<p><ins><code>client_id</code>参数让 B 网站知道是谁在请求；</ins></p>\n<p><code>redirect_uri</code>参数是 B 网站接受或拒绝请求后的跳转网址；</p>\n<p><code>scope</code>参数表示要求的授权范围（这里是只读）。</p>\n<p>{#_2__145}<strong>第 2 步骤</strong></p>\n<p>第 2 步骤中，<ins>用户跳转后，</ins> <ins>B 网站会要求用户登录，然后询问是否同意给予 A 网站授权</ins>。</p>\n<p>{#_3__149}<strong>第 3 步骤</strong></p>\n<p>{#_151}<strong>参数说明</strong></p>\n<p>第 3 步骤中，服务器回应客户端的URI，包含以下参数：</p>\n<ul>\n<li><code>code</code>：表示授权码，<strong>必选项</strong> 。该码的有效期应该很短，<ins>通常设为10分钟，客户端只能使用该码一次，否则会被授权服务器拒绝。</ins> 该码与客户端ID和重定向URI，是一一对应关系。</li>\n<li><code>state</code>：如果客户端的请求中包含这个参数，认证服务器的回应也必须一模一样包含这个参数。</li>\n</ul>\n<p>{#_158}<strong>示例</strong></p>\n<p>在第 2 步骤用户表示同意之后，这时 B 网站就会跳回<code>redirect_uri</code>参数指定的网址。跳转时，会传回一个授权码，就像下面这样。</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">https:<span class=\"hljs-comment\">//a.com/callback?code=AUTHORIZATION_CODE </span>\n</code></div></pre>\n<p>上面 URL 中，<code>code</code>参数就是授权码。</p>\n<p>{#_4__168}<strong>第 4 步骤</strong></p>\n<p>{#_170}<strong>参数说明</strong></p>\n<p>第 4 步骤中，客户端向认证服务器申请令牌的HTTP请求，包含以下参数：</p>\n<ul>\n<li><code>grant_type</code>：表示使用的授权模式，<strong>必选项</strong>，此处的值固定为&quot;authorization_code&quot;。</li>\n<li><code>code</code>：表示上一步获得的授权码，<strong>必选项</strong>。</li>\n<li><code>redirect_uri</code>：表示重定向URI，<strong>必选项</strong>，且必须与A步骤中的该参数值保持一致。</li>\n<li><code>client_id</code>：表示客户端ID，<strong>必选项</strong>。</li>\n</ul>\n<p>{#_179}<strong>示例</strong></p>\n<p>在第 3 步骤中，A 网站拿到授权码以后，就可以在后端，向 B 网站请求令牌。</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">https:<span class=\"hljs-comment\">//b.com/oauth/token?</span>\n client_id=CLIENT_ID&amp;\n client_secret=CLIENT_SECRET&amp;\n grant_type=authorization_code&amp;\n code=AUTHORIZATION_CODE&amp;\n redirect_uri=CALLBACK_URL \n</code></div></pre>\n<p>上面 URL 中：</p>\n<p><code>client_id</code>参数和<code>client_secret</code>参数用来让 B 确认 A 的身份（<code>client_secret</code>参数是保密的，因此只能在后端发请求）；</p>\n<p><code>grant_type</code>参数的值是<code>AUTHORIZATION_CODE</code>，表示采用的授权方式是授权码；</p>\n<p><code>code</code>参数是上一步拿到的授权码；</p>\n<p><code>redirect_uri</code>参数是令牌颁发后的回调网址。</p>\n<p>{#_5__202}<strong>第 5 步骤</strong></p>\n<p>{#_204}<strong>参数说明</strong></p>\n<p>第 5 步骤中，认证服务器发送的HTTP回复，包含以下参数：</p>\n<ul>\n<li><code>access_token</code>：表示访问令牌，必选项。</li>\n<li><code>token_type</code>：表示令牌类型，该值大小写不敏感，必选项，可以是bearer类型或mac类型。</li>\n<li><code>expires_in</code>：表示过期时间，单位为秒。如果省略该参数，必须其他方式设置过期时间。</li>\n<li><code>refresh_token</code>：表示更新令牌，用来获取下一次的访问令牌，可选项。</li>\n<li><code>scope</code>：表示权限范围，如果与客户端申请的范围一致，此项可省略。</li>\n</ul>\n<p>{#_214}<strong>示例</strong></p>\n<p>第 4 步骤中，B 网站收到请求以后，就会颁发令牌。具体做法是向<code>redirect_uri</code>指定的网址，发送一段 JSON 数据：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">HTTP/<span class=\"hljs-number\">1.1</span> <span class=\"hljs-number\">200</span> OK\nContent-Type: application/json;charset=UTF-<span class=\"hljs-number\">8</span>\nCache-Control: no-store\nPragma: no-cache\n\n{<span class=\"hljs-string\">&quot;access_token&quot;</span>:<span class=\"hljs-string\">&quot;ACCESS_TOKEN&quot;</span>,<span class=\"hljs-string\">&quot;token_type&quot;</span>:<span class=\"hljs-string\">&quot;bearer&quot;</span>,<span class=\"hljs-string\">&quot;expires_in&quot;</span>:<span class=\"hljs-number\">2592000</span>,<span class=\"hljs-string\">&quot;refresh_token&quot;</span>:<span class=\"hljs-string\">&quot;REFRESH_TOKEN&quot;</span>,<span class=\"hljs-string\">&quot;scope&quot;</span>:<span class=\"hljs-string\">&quot;read&quot;</span>,<span class=\"hljs-string\">&quot;uid&quot;</span>:<span class=\"hljs-number\">100101</span>,<span class=\"hljs-string\">&quot;info&quot;</span>:{...}\n} \n</code></div></pre>\n<p>上面 JSON 数据中，<code>access_token</code>字段就是令牌，A 网站在后端拿到了。注意：HTTP头信息中明确指定不得缓存。</p>\n<h2><a id=\"t14Token_230Token_247\"></a>{#t14}{#Token_230}五、令牌（Token）传递方式</h2>\n<p>当客户端（第三方应用程序）拿到访问资源服务器的令牌时，便可以使用这个令牌进行资源访问了。</p>\n<p>在第三方应用程序拿到<code>access_token</code>后，如何发送给资源服务器这个问题并没有在 RFC6729 文件中定义，而是作为一个单独的 <a href=\"https://link.juejin.cn/?target=https%3A%2F%2Fwww.rfc-editor.org%2Frfc%2Frfc6750.txt\" title=\"RFC6750\" target=\"_blank\">RFC6750</a> 文件中独立定义了。这里做以下简单的介绍，主要有三种方式如下：</p>\n<p>1.URI Query Parameter</p>\n<p>2.Authorization Request Header Field</p>\n<p>3.Form-Encoded Body Parameter</p>\n<h3><a id=\"t1551__24151_260\"></a>{#t15}{#51__241}5.1、请求头参数传递</h3>\n<p>Authorization Request Header Field，因为在HTTP应用层协议中，专门有定义一个授权使用的Request Header，所以也可以使用这种方式：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">GET /resource HTTP/<span class=\"hljs-number\">1.1</span>\nHost: server.example.com\nAuthorization: Bearer mF_9.B5f-<span class=\"hljs-number\">4.</span>1JqM \n</code></div></pre>\n<p>其中&quot;Bearer &quot;是固定的在access_token前面的头部信息。</p>\n<h3><a id=\"t1652__25352_272\"></a>{#t16}{#52__253}5.2、表单编码传递</h3>\n<p>使用 Request Body 这种方式，有一个额外的要求，就是 Request Header 的<code>Content-Type</code>必须是固定的<code>application/x-www-form-urlencoded</code>，此外还有一个限制就是 <strong>不可以使用 GET</strong> 访问，这个好理解，毕竟 GET 请求是不能携带 Request Body 的。</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">POST /resource HTTP/<span class=\"hljs-number\">1.1</span>\nHost: server.example.com\nContent-Type: application/x-www-form-urlencoded\n\naccess_token=mF_9.B5f-<span class=\"hljs-number\">4.</span>1JqM \n</code></div></pre>\n<h3><a id=\"t1753_URI__26553URI__284\"></a>{#t17}{#53_URI__265}5.3、URI 请求参数传递</h3>\n<p>URI Query Parameter，这种使用途径应该是最常见的一种方式，非常简单，比如：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">GET /resource?access_token=mF_9.B5f-<span class=\"hljs-number\">4.</span>1JqM HTTP/<span class=\"hljs-number\">1.1</span>\nHost: server.example.com \n</code></div></pre>\n<p>在我们请求受保护的资源的 Url 后面追加一个 access_token 的参数即可。另外还有一点要求，就是 Client 需要设置以下 Request Header 的 <strong>Cache-Control:no-store</strong>，用来阻止 access_token 不会被 Web 中间件给 log 下来，属于安全防护方面的一个考虑。</p>\n<h3><a id=\"t1854__27654_295\"></a>{#t18}{#54__276}5.4、令牌的刷新</h3>\n<p>为了防止客户端使用一个令牌无限次数使用，令牌一般会有过期时间限制，当快要到期时，需要重新获取令牌，如果再重新走授权码的授权流程，对用户体验非常不好，于是 OAuth 2.0 允许用户自动更新令牌。</p>\n<p>具体方法是，B 网站颁发令牌的时候，一次性颁发两个令牌，一个用于获取数据，另一个用于获取新的令牌（refresh token 字段）。令牌到期前，用户使用 refresh token 发一个请求，去更新令牌。</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">https:<span class=\"hljs-comment\">//b.com/oauth/token?grant_type=refresh_token&amp;client_id=CLIENT_ID&amp;client_secret=CLIENT_SECRET&amp;refresh_token=REFRESH_TOKEN </span>\n</code></div></pre>\n<p>上面 URL 中：</p>\n<p><code>grant_type</code>参数为<code>refresh_token</code>表示要求更新令牌，此处的值固定为<code>refresh_token</code>，必选项；</p>\n<p><code>client_id</code>参数和<code>client_secret</code>参数用于确认身份；</p>\n<p><code>refresh_token</code>参数就是用于更新令牌的令牌。</p>\n<p>B 网站验证通过以后，就会颁发新的令牌。</p>\n<p><strong>注意：</strong> 第三方应用服务器拿到刷新令牌必须存于服务器，通过后台进行重新获取新的令牌，以保障刷新令牌的保密性。</p>\n<h2><a id=\"t19OAuth2_298OAuth2_317\"></a>{#t19}{#OAuth2_298}六、OAuth2的安全问题</h2>\n<h3><a id=\"t2061_CSRF_30161CSRF_320\"></a>{#t20}{#61_CSRF_301}6.1、CSRF攻击</h3>\n<p>应用程序在早期使用 OAuth2 的时候爆发过不少相关的安全方面的漏洞，其实仔细分析后会发现大都都是没有严格遵循 OAuth2 的安全相关的指导造成的，相关的漏洞事件自行搜索。</p>\n<p>其实 OAuth2 在设计之初是已经做了很多安全方面的考虑，并且在 RFC6749 中加入了一些安全方面的规范指导。比如：</p>\n<p>1、要求 Authorization server 进行有效的客户端验证；</p>\n<p>2、client_serect，access_token，refresh_token，code等敏感信息的安全存储（不得泄露给第三方）、传输通道的安全性（TSL的要求）；</p>\n<p>3、维持 refresh_token 和第三方应用的绑定，刷新失效机制；</p>\n<p>4、维持 Authorization Code 和第三方应用的绑定，这也是state参数为什么是推荐的一点，以防止CSRF攻击；</p>\n<p>5、保证上述各种令牌信息的不可猜测行，以防止被猜测得到；安全无小事，这方面是要靠各方面（开放平台，第三方开发者）共同防范的。</p>\n<h3><a id=\"t2162__30962_336\"></a>{#t21}{#62__309}6.2、攻击流程</h3>\n<p>假设有用户张三，攻击者李四，第三方&quot;云冲印&quot;应用（它集成了第三方社交账号登录，并且允许用户将社交账号和&quot;云冲印&quot;中的账号进行绑定），以及 OAuth2 服务提供者 Google。</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/b1a4f58a179a89687ebfc0203713e017.png\" alt=\"\" /></p>\n<p><strong>步骤1</strong></p>\n<p>攻击者李四登录&quot;云冲印&quot;网站，并且选择绑定自己的 Google 账号</p>\n<p><strong>步骤2</strong></p>\n<p>&quot;云冲印&quot;网站将李四重定向到 Google，由于他之前已经登录过 Google，所以 Google 直接向他显示是否授权&quot;云冲印&quot;访问的页面。</p>\n<p><strong>步骤3</strong></p>\n<p>李四在点击&quot;同意授权&quot;之后，截获 Google 服务器返回的含有<code>Authorization code</code>参数的HTTP响应。</p>\n<p><strong>步骤4</strong></p>\n<p>李四精心构造一个 Web 页面，它会触发&quot;云冲印&quot;网站向 Google 发起令牌申请的请求，而这个请求中的<code>Authorization Code</code>参数正是上一步截获到的 code。</p>\n<p><strong>步骤5</strong></p>\n<p>李四将这个 Web 页面放到互联网上，等待或者诱骗受害者张三来访问。</p>\n<p><strong>步骤6</strong></p>\n<p>张三之前登录了&quot;云冲印&quot;网站，只是没有把自己的账号和其他社交账号绑定起来。在张三访问了李四准备的这个 Web 页面，令牌申请流程在张三的浏览器里被顺利触发，&quot;云冲印&quot;网站从 Google 那里获取到<code>access_token</code>，但是这个 token 以及通过它进一步获取到的用户信息却都是攻击者李四的。</p>\n<p><strong>步骤7</strong></p>\n<p>&quot;云冲印&quot;网站将李四的 Google 账号同张三的&quot;云冲印&quot;账号关联绑定起来，从此以后，李四就可以用自己的 Google 账号通过 OAuth 登录到张三在 “云冲印” 网站中的账号，堂而皇之的冒充张三的身份执行各种操作。</p>\n<p>从整体上来看，本次 CSRF 攻击的时序图应该是下面这个样子的：</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/9a3835545d31ef1167888721bd653ec8.png\" alt=\"\" /></p>\n<p>从上图中可以看出，造成 CSRF 攻击漏洞问题的关键点在于，OAuth2 的认证流程是分为好几步来完成的，在上一章节授权码模式流程中的流程图中的第 4步骤中，第三方应用在收到一个 GET 请求时，除了能知道当前用户的 cookie，以及 URL 中的<code>Authorization Code</code>之外，难以分辨出这个请求到底是用户本人的意愿，还是攻击者利用用户的身份伪造出来的请求。</p>\n<p>于是，攻击者就能使用移花接木的手段，提前准备一个含有自己的<code>Authorization Code</code>的请求，并让受害者的浏览器来接着完成后续的令牌申请流程。</p>\n<h3><a id=\"t2263__35163_378\"></a>{#t22}{#63__351}6.3、解决方案</h3>\n<p>要防止这样的攻击其实很容易，作为第三方应用的开发者，只需在 OAuth 认证过程中加入<code>state</code>参数，并验证它的参数值即可。具体细节如下：</p>\n<ul>\n<li>在将用户重定向到资源认证服务器授权界面的时候，为当前用户生成一个随机的字符串，并作为<code>state</code>参数加入到URL中，同时存储一份到 session 中。</li>\n<li>当第三方应用收到资源服务提供者返回的<code>Authorization Code</code>请求的时候，验证接收到的<code>state</code>参数值。如果是正确合法的请求，那么此时接收到的参数值应该和上一步提到的为该用户生成的<code>state</code>参数值（存于当前用户的 session 中）完全一致，否则就是异常请求。</li>\n<li><code>state</code>参数值需要具备下面几个特性：* 不可预测性：足够的随机，使得攻击者难以猜到正确的参数值* 关联性：<code>state</code>参数值和当前用户会话（user session）是相互关联的* 唯一性：每个用户，甚至每次请求生成的<code>state</code>参数值都是唯一的* 时效性：<code>state</code>参数一旦被使用则立即失效</li>\n</ul>\n<p><code>state</code>参数在 OAuth2 认证过程中不是必选参数，因此在早期第三方应用开发者在集成 OAuth2 认证的时候很容易会忽略它的存在，导致应用易受 CSRF 攻击。所以必须对这个安全问题重视起来。</p>\n<p>安全是双方的，需要第三方应用和资源服务提供商均要严格遵守安全规范。如 QQ 互联的 OAuth2 API 中，state 参数是强制必选的参数，授权接口是基于 HTTPS 的加密通道等；作为第三方开发者在使用消费这些服务的时候也应该重视注意安全中存在的漏洞。</p>\n<p>转自：<a href=\"https://blog.csdn.net/GJ_ia/article/details/128663296?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-2-128663296-blog-127730870.235%5Ev38%5Epc_relevant_sort_base1&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-2-128663296-blog-127730870.235%5Ev38%5Epc_relevant_sort_base1&amp;utm_relevant_index=3\" title=\"OAuth 2.0 授权认证详解_oauth2.0_GJ_ia的博客-CSDN博客\" target=\"_blank\">OAuth 2.0 授权认证详解_oauth2.0_GJ_ia的博客-CSDN博客</a></p>\n','​​​​​​一、认识OAuth2.0 {#content_views}\n-----------------------------------\n\n### {#t1}{#11_OAuth_20__3}1.1、OAuth 2.0 应用场景\n\nOAuth 2.0 （Open Authorization，开放授权）标准目前被广泛应用在++第三方登录场景++ 中，以下是虚拟出来的角色，阐述 OAuth2 能帮我们干什么，引用阮一峰这篇[理解OAuth 2.0](https://link.juejin.cn/?target=https%3A%2F%2Fwww.ruanyifeng.com%2Fblog%2F2014%2F05%2Foauth_2_0.html \"理解OAuth 2.0\")中的例子：\n\n有一个\"云冲印\"的网站（客户端），可以将用户（资源拥有者）储存在Google（HTTP服务提供商）的照片，冲印出来。用户为了使用该服务，必须让\"云冲印\"读取自己储存在Google上的照片。\n\n问题是只有得到用户的授权，Google才会同意\"云冲印\"读取这些照片。那么，\"云冲印\"怎样获得用户的授权呢？\n\n传统方法是，用户将自己的Google用户名和密码，告诉\"云冲印\"，后者就可以读取用户的照片了。这样的做法有以下几个严重的缺点：\n\n1）\"云冲印\"为了后续的服务，会保存用户的密码，这样很不安全。\n\n2）Google不得不部署密码登录，而我们知道，单纯的密码登录并不安全。\n\n3）\"云冲印\"拥有了获取用户储存在Google所有资料的权力，用户没法限制\"云冲印\"获得授权的范围和有效期。\n\n4）用户只有修改密码，才能收回赋予\"云冲印\"的权力。但是这样做，会使得其他所有获得用户授权的第三方应用程序全部失效。\n\n5）只要有一个第三方应用程序被破解，就会导致用户密码泄漏，以及所有被密码保护的数据泄漏。\n\n### {#t2}{#12__15}1.2、名词概念\n\nOAuth 就是为了解决上面这些问题而诞生的。在详解 OAuth 之前，需要明确一些基本的概念，从上面场景中抽象出以下概念。\n\n**第三方应用程序**\n\n**Third-party application** ：第三方应用程序，本文中又称\"客户端\"（client），即上一节例子中的\"云冲印\"。\n\n**HTTP服务提供商**\n\n**HTTP service** ：HTTP服务提供商，本文中简称\"服务提供商\"，即上一节例子中的Google。\n\n**资源所有者**\n\n**Resource Owner**：资源所有者，本文中又称\"用户\"（user）。\n\n**用户代理**\n\n**User Agent**：用户代理，本文中就是指浏览器。\n\n**认证服务器**\n\n**Authorization server** ：认证服务器，即++服务提供商专门用来处理认证的服务器++。\n\n**资源服务器**\n\n**Resource server** ：资源服务器，即++服务提供商存放用户生成的资源的服务器++。它与认证服务器，可以是同一台服务器，也可以是不同的服务器。\n\n知道了上面这些名词，就不难理解，OAuth的作用就是++让\"客户端\"安全可控地获取\"用户\"的授权，从而可以和\"服务商提供商\"进行互动。++\n\n{#t3}{#OAuth__45}二、OAuth 的授权认证流程\n--------------------------------\n\n### {#t4}{#21__48}2.1、认证思路\n\nOAuth 在\"客户端\"与\"服务提供商\"之间，设置了一个 **授权层** （authorization layer）。\"客户端\"不能直接登录\"服务提供商\"，只能登录授权层，以此将用户与客户端区分开来。++\"客户端\"登录授权层所用的令牌（token），与用户的密码不同。用户可以在登录的时候，指定授权层令牌的权限范围和有效期。++\n\n\"客户端\"登录授权层以后，\"服务提供商\"根据令牌的权限范围和有效期，向\"客户端\"开放用户储存的资料。\n\n### {#t5}{#22__54}2.2、认证流程\n\n官方 RFC 6749 文件中的 OAuth 2.0 流程图有点晦涩，优化了 一下：\n\n![](https://i-blog.csdnimg.cn/blog_migrate/ca456ad49e2b8ada819e5f09a05a0410.png)\n\n1）用户访问第三方应用程序（简称：客户端）以后，客户端要求用户给予授权。\n\n2）用户同意给予客户端授权。\n\n3）++客户端使用第 2 步获得的授权，向认证服务器申请令牌++。\n\n4）认证服务器对客户端进行认证以后，确认无误，同意发放令牌。\n\n5）客户端使用令牌，向资源服务器申请获取资源。\n\n6）资源服务器确认令牌无误，同意向客户端开放资源。\n\n上述中的第 2 步 是关键，即用户怎样才能给于客户端授权。有了这个授权以后，客户端就可以获取令牌，进而凭令牌获取资源。\n\n{#t6}{#_69}三、四种授权模式\n-------------------\n\n上一小节可以得出用户对客户端的授权动作是核心，客户端必须得到用户的授权（authorization grant），才能获得令牌（access token）。OAuth 2.0定义了四种授权方式：\n\n### {#t7}{#31_authorization_code_74}3.1、授权码模式（authorization code）\n\n授权码（authorization code）方式，指的是++第三方应用先申请一个授权码，然后再用该码获取令牌。++\n\n### {#t8}{#32_implicit_78}3.2、简化模式（implicit）\n\n有些 Web 应用是纯前端应用，没有后端。这时就不能用上面的方式了，必须将令牌储存在前端。RFC 6749 就规定了第二种方式，++允许直接向前端颁发令牌++。这种方式没有授权码这个中间步骤，所以称为（授权码）\"隐藏式\"（implicit）。\n\n### {#t9}{#33_resource_owner_password_credentials_82}3.3、密码模式（resource owner password credentials）\n\n如果你高度信任某个应用，RFC 6749 也允许用户把用户名和密码，直接告诉该应用。该应用就使用你的密码，申请令牌，这种方式称为\"密码式\"（password）。\n\n### {#t10}{#34_client_credentials_86}3.4、客户端模式（client credentials）\n\n最后一种方式是凭证式（client credentials），++适用于没有前端的命令行应用，即在命令行下请求令牌。++\n\n{#t11}{#_90}四、授权码模式详解\n---------------------\n\n### {#t12}{#41__93}4.1、授权码模式流程\n\n授权码模式（authorization code）是功能最完整、流程最严密安全的授权模式。它的特点就是++通过客户端的**后台服务器**，与\"服务提供商\"的认证服务器进行互动。++\n\n注意这种方式适用于那些有后端的 Web 应用。++授权码通过前端传送，令牌则是储存在后端++，而且所有与资源服务器的通信都在后端完成。这样的前后端分离，可以避免令牌泄漏。\n\n![](https://i-blog.csdnimg.cn/blog_migrate/b162ba0ab8877cc5dc79389b7c103a22.png)\n\n授权码模式流程如下：\n\n1）用户访问客户端，客户端将用户导向认证服务器。\n\n2）用户选择是否给予客户端授权。\n\n3）假设用户给予授权，认证服务器将用户导向客户端事先指定的\"重定向URI\"（redirection URI），同时附上一个授权码（每个用户的授权码不同）。\n\n4）客户端收到授权码，附上早先的\"重定向URI\"，向认证服务器申请令牌。这一步是在客户端的 **后台服务器** 上完成的，对用户不可见。\n\n5）认证服务器核对了授权码和重定向URI，确认无误后，向客户端发送访问令牌（access token）和更新令牌（refresh token）。\n\n从上述的流程描述可知，只有第 2 步需要用户进行授权操作，之后的流程都是在客户端的后台和认证服务器后台之前进行\"静默\"操作，对于用户来说是无感知的。\n\n下面是上面这些步骤所需要的参数。\n\n### {#t13}{#42__113}4.2、授权码模式流程的五个步骤\n\n{#_1__115}**第 1 步骤**\n\n{#_117}**参数说明**\n\n第 1 步骤中，客户端申请认证的URI，包含以下参数：\n\n* `response_type`：表示授权类型，**必选项**，此处的值固定为\"code\"\n* `client_id`：表示客户端的ID，**必选项**\n* `redirect_uri`：表示重定向URI，可选项\n* `scope`：表示申请的权限范围，可选项\n* `state`：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。\n\n{#_127}**示例**\n\nA 网站提供一个链接，用户点击后就会跳转到 B 网站，授权用户数据给 A 网站使用。下面就是 A 网站跳转 B 网站的一个示意链接：\n\n```java\nhttps://b.com/oauth/authorize?response_type=code&client_id=CLIENT_ID&redirect_uri=CALLBACK_URL&scope=read \n```\n\n上面 URL 中：\n\n`response_type`参数表示要求返回授权码（`code`）；\n\n++`client_id`参数让 B 网站知道是谁在请求；++\n\n`redirect_uri`参数是 B 网站接受或拒绝请求后的跳转网址；\n\n`scope`参数表示要求的授权范围（这里是只读）。\n\n{#_2__145}**第 2 步骤**\n\n第 2 步骤中，++用户跳转后，++ ++B 网站会要求用户登录，然后询问是否同意给予 A 网站授权++。\n\n{#_3__149}**第 3 步骤**\n\n{#_151}**参数说明**\n\n第 3 步骤中，服务器回应客户端的URI，包含以下参数：\n\n* `code`：表示授权码，**必选项** 。该码的有效期应该很短，++通常设为10分钟，客户端只能使用该码一次，否则会被授权服务器拒绝。++ 该码与客户端ID和重定向URI，是一一对应关系。\n* `state`：如果客户端的请求中包含这个参数，认证服务器的回应也必须一模一样包含这个参数。\n\n{#_158}**示例**\n\n在第 2 步骤用户表示同意之后，这时 B 网站就会跳回`redirect_uri`参数指定的网址。跳转时，会传回一个授权码，就像下面这样。\n\n```java\nhttps://a.com/callback?code=AUTHORIZATION_CODE \n```\n\n上面 URL 中，`code`参数就是授权码。\n\n{#_4__168}**第 4 步骤**\n\n{#_170}**参数说明**\n\n第 4 步骤中，客户端向认证服务器申请令牌的HTTP请求，包含以下参数：\n\n* `grant_type`：表示使用的授权模式，**必选项**，此处的值固定为\"authorization_code\"。\n* `code`：表示上一步获得的授权码，**必选项**。\n* `redirect_uri`：表示重定向URI，**必选项**，且必须与A步骤中的该参数值保持一致。\n* `client_id`：表示客户端ID，**必选项**。\n\n{#_179}**示例**\n\n在第 3 步骤中，A 网站拿到授权码以后，就可以在后端，向 B 网站请求令牌。\n\n```java\nhttps://b.com/oauth/token?\n client_id=CLIENT_ID&\n client_secret=CLIENT_SECRET&\n grant_type=authorization_code&\n code=AUTHORIZATION_CODE&\n redirect_uri=CALLBACK_URL \n```\n\n上面 URL 中：\n\n`client_id`参数和`client_secret`参数用来让 B 确认 A 的身份（`client_secret`参数是保密的，因此只能在后端发请求）；\n\n`grant_type`参数的值是`AUTHORIZATION_CODE`，表示采用的授权方式是授权码；\n\n`code`参数是上一步拿到的授权码；\n\n`redirect_uri`参数是令牌颁发后的回调网址。\n\n{#_5__202}**第 5 步骤**\n\n{#_204}**参数说明**\n\n第 5 步骤中，认证服务器发送的HTTP回复，包含以下参数：\n\n* `access_token`：表示访问令牌，必选项。\n* `token_type`：表示令牌类型，该值大小写不敏感，必选项，可以是bearer类型或mac类型。\n* `expires_in`：表示过期时间，单位为秒。如果省略该参数，必须其他方式设置过期时间。\n* `refresh_token`：表示更新令牌，用来获取下一次的访问令牌，可选项。\n* `scope`：表示权限范围，如果与客户端申请的范围一致，此项可省略。\n\n{#_214}**示例**\n\n第 4 步骤中，B 网站收到请求以后，就会颁发令牌。具体做法是向`redirect_uri`指定的网址，发送一段 JSON 数据：\n\n```java\nHTTP/1.1 200 OK\nContent-Type: application/json;charset=UTF-8\nCache-Control: no-store\nPragma: no-cache\n\n{\"access_token\":\"ACCESS_TOKEN\",\"token_type\":\"bearer\",\"expires_in\":2592000,\"refresh_token\":\"REFRESH_TOKEN\",\"scope\":\"read\",\"uid\":100101,\"info\":{...}\n} \n```\n\n上面 JSON 数据中，`access_token`字段就是令牌，A 网站在后端拿到了。注意：HTTP头信息中明确指定不得缓存。\n\n{#t14}{#Token_230}五、令牌（Token）传递方式\n---------------------------------\n\n当客户端（第三方应用程序）拿到访问资源服务器的令牌时，便可以使用这个令牌进行资源访问了。\n\n在第三方应用程序拿到`access_token`后，如何发送给资源服务器这个问题并没有在 RFC6729 文件中定义，而是作为一个单独的 [RFC6750](https://link.juejin.cn/?target=https%3A%2F%2Fwww.rfc-editor.org%2Frfc%2Frfc6750.txt \"RFC6750\") 文件中独立定义了。这里做以下简单的介绍，主要有三种方式如下：\n\n1.URI Query Parameter\n\n2.Authorization Request Header Field\n\n3.Form-Encoded Body Parameter\n\n### {#t15}{#51__241}5.1、请求头参数传递\n\nAuthorization Request Header Field，因为在HTTP应用层协议中，专门有定义一个授权使用的Request Header，所以也可以使用这种方式：\n\n```java\nGET /resource HTTP/1.1\nHost: server.example.com\nAuthorization: Bearer mF_9.B5f-4.1JqM \n```\n\n其中\"Bearer \"是固定的在access_token前面的头部信息。\n\n### {#t16}{#52__253}5.2、表单编码传递\n\n使用 Request Body 这种方式，有一个额外的要求，就是 Request Header 的`Content-Type`必须是固定的`application/x-www-form-urlencoded`，此外还有一个限制就是 **不可以使用 GET** 访问，这个好理解，毕竟 GET 请求是不能携带 Request Body 的。\n\n```java\nPOST /resource HTTP/1.1\nHost: server.example.com\nContent-Type: application/x-www-form-urlencoded\n\naccess_token=mF_9.B5f-4.1JqM \n```\n\n### {#t17}{#53_URI__265}5.3、URI 请求参数传递\n\nURI Query Parameter，这种使用途径应该是最常见的一种方式，非常简单，比如：\n\n```java\nGET /resource?access_token=mF_9.B5f-4.1JqM HTTP/1.1\nHost: server.example.com \n```\n\n在我们请求受保护的资源的 Url 后面追加一个 access_token 的参数即可。另外还有一点要求，就是 Client 需要设置以下 Request Header 的 **Cache-Control:no-store**，用来阻止 access_token 不会被 Web 中间件给 log 下来，属于安全防护方面的一个考虑。\n\n### {#t18}{#54__276}5.4、令牌的刷新\n\n为了防止客户端使用一个令牌无限次数使用，令牌一般会有过期时间限制，当快要到期时，需要重新获取令牌，如果再重新走授权码的授权流程，对用户体验非常不好，于是 OAuth 2.0 允许用户自动更新令牌。\n\n具体方法是，B 网站颁发令牌的时候，一次性颁发两个令牌，一个用于获取数据，另一个用于获取新的令牌（refresh token 字段）。令牌到期前，用户使用 refresh token 发一个请求，去更新令牌。\n\n```java\nhttps://b.com/oauth/token?grant_type=refresh_token&client_id=CLIENT_ID&client_secret=CLIENT_SECRET&refresh_token=REFRESH_TOKEN \n```\n\n上面 URL 中：\n\n`grant_type`参数为`refresh_token`表示要求更新令牌，此处的值固定为`refresh_token`，必选项；\n\n`client_id`参数和`client_secret`参数用于确认身份；\n\n`refresh_token`参数就是用于更新令牌的令牌。\n\nB 网站验证通过以后，就会颁发新的令牌。\n\n**注意：** 第三方应用服务器拿到刷新令牌必须存于服务器，通过后台进行重新获取新的令牌，以保障刷新令牌的保密性。\n\n{#t19}{#OAuth2_298}六、OAuth2的安全问题\n--------------------------------\n\n### {#t20}{#61_CSRF_301}6.1、CSRF攻击\n\n应用程序在早期使用 OAuth2 的时候爆发过不少相关的安全方面的漏洞，其实仔细分析后会发现大都都是没有严格遵循 OAuth2 的安全相关的指导造成的，相关的漏洞事件自行搜索。\n\n其实 OAuth2 在设计之初是已经做了很多安全方面的考虑，并且在 RFC6749 中加入了一些安全方面的规范指导。比如：\n\n1、要求 Authorization server 进行有效的客户端验证；\n\n2、client_serect，access_token，refresh_token，code等敏感信息的安全存储（不得泄露给第三方）、传输通道的安全性（TSL的要求）；\n\n3、维持 refresh_token 和第三方应用的绑定，刷新失效机制；\n\n4、维持 Authorization Code 和第三方应用的绑定，这也是state参数为什么是推荐的一点，以防止CSRF攻击；\n\n5、保证上述各种令牌信息的不可猜测行，以防止被猜测得到；安全无小事，这方面是要靠各方面（开放平台，第三方开发者）共同防范的。\n\n### {#t21}{#62__309}6.2、攻击流程\n\n假设有用户张三，攻击者李四，第三方\"云冲印\"应用（它集成了第三方社交账号登录，并且允许用户将社交账号和\"云冲印\"中的账号进行绑定），以及 OAuth2 服务提供者 Google。\n\n![](https://i-blog.csdnimg.cn/blog_migrate/b1a4f58a179a89687ebfc0203713e017.png)\n\n**步骤1**\n\n攻击者李四登录\"云冲印\"网站，并且选择绑定自己的 Google 账号\n\n**步骤2**\n\n\"云冲印\"网站将李四重定向到 Google，由于他之前已经登录过 Google，所以 Google 直接向他显示是否授权\"云冲印\"访问的页面。\n\n**步骤3**\n\n李四在点击\"同意授权\"之后，截获 Google 服务器返回的含有`Authorization code`参数的HTTP响应。\n\n**步骤4**\n\n李四精心构造一个 Web 页面，它会触发\"云冲印\"网站向 Google 发起令牌申请的请求，而这个请求中的`Authorization Code`参数正是上一步截获到的 code。\n\n**步骤5**\n\n李四将这个 Web 页面放到互联网上，等待或者诱骗受害者张三来访问。\n\n**步骤6**\n\n张三之前登录了\"云冲印\"网站，只是没有把自己的账号和其他社交账号绑定起来。在张三访问了李四准备的这个 Web 页面，令牌申请流程在张三的浏览器里被顺利触发，\"云冲印\"网站从 Google 那里获取到`access_token`，但是这个 token 以及通过它进一步获取到的用户信息却都是攻击者李四的。\n\n**步骤7**\n\n\"云冲印\"网站将李四的 Google 账号同张三的\"云冲印\"账号关联绑定起来，从此以后，李四就可以用自己的 Google 账号通过 OAuth 登录到张三在 \"云冲印\" 网站中的账号，堂而皇之的冒充张三的身份执行各种操作。\n\n从整体上来看，本次 CSRF 攻击的时序图应该是下面这个样子的：\n\n![](https://i-blog.csdnimg.cn/blog_migrate/9a3835545d31ef1167888721bd653ec8.png)\n\n从上图中可以看出，造成 CSRF 攻击漏洞问题的关键点在于，OAuth2 的认证流程是分为好几步来完成的，在上一章节授权码模式流程中的流程图中的第 4步骤中，第三方应用在收到一个 GET 请求时，除了能知道当前用户的 cookie，以及 URL 中的`Authorization Code`之外，难以分辨出这个请求到底是用户本人的意愿，还是攻击者利用用户的身份伪造出来的请求。\n\n于是，攻击者就能使用移花接木的手段，提前准备一个含有自己的`Authorization Code`的请求，并让受害者的浏览器来接着完成后续的令牌申请流程。\n\n### {#t22}{#63__351}6.3、解决方案\n\n要防止这样的攻击其实很容易，作为第三方应用的开发者，只需在 OAuth 认证过程中加入`state`参数，并验证它的参数值即可。具体细节如下：\n\n* 在将用户重定向到资源认证服务器授权界面的时候，为当前用户生成一个随机的字符串，并作为`state`参数加入到URL中，同时存储一份到 session 中。\n* 当第三方应用收到资源服务提供者返回的`Authorization Code`请求的时候，验证接收到的`state`参数值。如果是正确合法的请求，那么此时接收到的参数值应该和上一步提到的为该用户生成的`state`参数值（存于当前用户的 session 中）完全一致，否则就是异常请求。\n* `state`参数值需要具备下面几个特性：\\* 不可预测性：足够的随机，使得攻击者难以猜到正确的参数值\\* 关联性：`state`参数值和当前用户会话（user session）是相互关联的\\* 唯一性：每个用户，甚至每次请求生成的`state`参数值都是唯一的\\* 时效性：`state`参数一旦被使用则立即失效\n\n`state`参数在 OAuth2 认证过程中不是必选参数，因此在早期第三方应用开发者在集成 OAuth2 认证的时候很容易会忽略它的存在，导致应用易受 CSRF 攻击。所以必须对这个安全问题重视起来。\n\n安全是双方的，需要第三方应用和资源服务提供商均要严格遵守安全规范。如 QQ 互联的 OAuth2 API 中，state 参数是强制必选的参数，授权接口是基于 HTTPS 的加密通道等；作为第三方开发者在使用消费这些服务的时候也应该重视注意安全中存在的漏洞。\n\n转自：[OAuth 2.0 授权认证详解_oauth2.0_GJ_ia的博客-CSDN博客](https://blog.csdn.net/GJ_ia/article/details/128663296?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-2-128663296-blog-127730870.235%5Ev38%5Epc_relevant_sort_base1&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-2-128663296-blog-127730870.235%5Ev38%5Epc_relevant_sort_base1&utm_relevant_index=3 \"OAuth 2.0 授权认证详解_oauth2.0_GJ_ia的博客-CSDN博客\")\n',2,0,1,0,0,1,'https://blog.csdn.net/fuhanghang/article/details/131394196',1,NULL,NULL,'2025-04-27 14:51:27','2025-07-08 22:58:09'),(302,1,39,'用 DeepSeek 打造你的超强代码助手','http://113.45.240.54:9092/article-cover/fffd6a63-f881-42c9-9e40-308e97d29730_freecompress-Neat-Admin 管理系统 (4).png','DeepSeek ','<h3><a id=\"DeepSeek_Engineer__1\"></a>DeepSeek Engineer 是啥？</h3>\n<p>简单来说，<strong>DeepSeek Engineer</strong> 是一个基于命令行的智能助手。它能帮你完成这些事：</p>\n<ul>\n<li><strong>快速读文件内容</strong>：比如你有个配置文件，直接用命令把它加载进助手，后续所有操作都可以基于这个文件。</li>\n<li><strong>自动改文件</strong>：它不仅能提建议，还可以直接生成差异表（diff），甚至自动应用修改。</li>\n<li><strong>智能代码生成</strong>：比如你让它生成代码片段，它会按照指定格式和规则直接返回。</li>\n</ul>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/c20921e4-d54f-426b-9f56-658a36e7000b_7f28e0203e7440a2a5b0b3594223af6d.png\" alt=\"7f28e0203e7440a2a5b0b3594223af6d.png\" /></p>\n<p>更重要的是，这一切都是通过 DeepSeek 的强大 API 来实现的。想象一下，你有个贴身助手，不仅能听懂你的代码需求，还能直接动手帮你写！</p>\n<hr />\n<h3><a id=\"_19_15\"></a>{#_19}核心功能拆解</h3>\n<p>我们先来看 DeepSeek Engineer 的几个核心能力，让你更好地理解它的强大之处。</p>\n<h4><a id=\"1__DeepSeek__241__DeepSeek__19\"></a>{#1__DeepSeek__24}1. 自动配置 DeepSeek 客户端</h4>\n<p>启动这个工具时，你只需要准备一个 <code>.env</code> 文件，里面写上你的 API Key，比如：</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\n<span class=\"hljs-variable constant_\">DEEPSEEK_API_KEY</span>=your_api_key_here\n\n</code></div></pre>\n<p>然后它会自动帮你连接到 DeepSeek 的服务器（地址通过环境变量配置）。接下来，所有的对话和操作都走这个 API，让你体验到类似 GPT 的流畅交互。</p>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/23aa0c52-fa34-49b1-8de6-9be2875d0dea_29e47b92c95546f4915797929ae9d5d9.png\" alt=\"29e47b92c95546f4915797929ae9d5d9.png\" /></p>\n<hr />\n<h4><a id=\"2__402__35\"></a>{#2__40}2. 数据模型：严格又灵活</h4>\n<p>DeepSeek Engineer 使用了 <strong>Pydantic</strong> 来定义和管理数据模型，这保证了所有操作都很安全且清晰。比如，它的模型包括以下几个部分：</p>\n<ul>\n<li><strong>FileToCreate</strong>：描述新建或更新的文件。</li>\n<li><strong>FileToEdit</strong>：定义某个文件里需要替换的代码片段。</li>\n<li><strong>AssistantResponse</strong>：用来结构化处理助手返回的对话内容和文件操作。</li>\n</ul>\n<p>具体来说，如果你想改文件内容，可以让它返回一个 JSON 格式的修改建议，类似这样：</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\n{\n  <span class=\"hljs-string\">&quot;file&quot;</span>: <span class=\"hljs-string\">&quot;example.py&quot;</span>,\n  <span class=\"hljs-string\">&quot;changes&quot;</span>: [\n    {\n      <span class=\"hljs-string\">&quot;original&quot;</span>: <span class=\"hljs-string\">&quot;print(&#x27;Hello&#x27;)&quot;</span>,\n      <span class=\"hljs-string\">&quot;replacement&quot;</span>: <span class=\"hljs-string\">&quot;print(&#x27;Hello, DeepSeek!&#x27;)&quot;</span>\n    }\n  ]\n}\n\n</code></div></pre>\n<p>这种方式既直观又安全，你完全可以放心地应用这些修改。</p>\n<hr />\n<h4><a id=\"3__Prompt_673__Prompt_63\"></a>{#3__Prompt_67}3. 强大的系统 Prompt</h4>\n<p>DeepSeek Engineer 背后有一个设计得非常好的系统 Prompt，它会引导对话始终输出结构化的 JSON 数据，同时还能支持文件创建和编辑操作。</p>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/29d3348f-2b1d-4a10-87da-c6d178273e09_70a89d4247074e7f8b41f7ee32a33bec.png\" alt=\"70a89d4247074e7f8b41f7ee32a33bec.png\" /></p>\n<p>这个设计的好处是，开发者不用担心助手回复出错或格式混乱。所有的响应都像程序接口一样，清晰、标准。</p>\n<hr />\n<h4><a id=\"4__Helper__784__Helper__73\"></a>{#4__Helper__78}4. 常用 Helper 函数</h4>\n<p>工具中还提供了一些实用的函数，专门用来操作文件和内容：</p>\n<ul>\n<li><strong><code>read_local_file</code></strong>：快速读取本地文件内容，返回成字符串。</li>\n<li><strong><code>create_file</code></strong>：帮你新建或覆盖文件。</li>\n<li><strong><code>show_diff_table</code></strong>：生成一个漂亮的差异表，展示文件修改前后的对比。</li>\n<li><strong><code>apply_diff_edit</code></strong>：直接应用代码片段级别的修改。</li>\n</ul>\n<p>比如，你想更新一个文件里的某段代码，只需输入以下命令：</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\n/add path/to/file\n\n</code></div></pre>\n<p>DeepSeek 会把这个文件的内容加载进来，你可以继续对话，让它生成修改建议并直接应用到文件中。</p>\n<hr />\n<h4><a id=\"5__985__94\"></a>{#5__98}5. 交互式会话</h4>\n<p>运行主程序（比如 <code>python3 main.py</code>），你会进入一个交互式的命令行界面。这里你可以随时输入请求、加载文件，或者让助手生成代码。</p>\n<p>完整操作流程可以是这样的：</p>\n<ol>\n<li>\n<p>启动工具：```</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\n python3 main.<span class=\"hljs-property\">py</span>\n\n</code></div></pre>\n</li>\n<li>\n<p>加载一个文件：```</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\n /add example.<span class=\"hljs-property\">py</span>\n</code></div></pre>\n</li>\n<li>\n<p>让助手修改内容：```</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\n 请把函数 <span class=\"hljs-string\">`foo`</span> 改成返回值为整数。\n</code></div></pre>\n</li>\n<li>\n<p>查看生成的建议并确认应用。</p>\n</li>\n</ol>\n<p>是不是很贴心？</p>\n<hr />\n<h3><a id=\"_125_130\"></a>{#_125}与其他工具的对比</h3>\n<p>市面上其实有不少类似的代码助手，比如 GitHub Copilot、TabNine 等。那么 DeepSeek Engineer 和它们相比有什么特别之处呢？我们通过下表来简单对比一下：</p>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>DeepSeek Engineer</th>\n<th>GitHub Copilot</th>\n<th>TabNine</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>文件内容读取</td>\n<td>✅ 支持</td>\n<td>❌ 不支持</td>\n<td>❌ 不支持</td>\n</tr>\n<tr>\n<td>文件修改和应用</td>\n<td>✅ 支持</td>\n<td>❌ 不支持</td>\n<td>❌ 不支持</td>\n</tr>\n<tr>\n<td>JSON 响应结构化</td>\n<td>✅ 内置支持</td>\n<td>❌ 不支持</td>\n<td>❌ 不支持</td>\n</tr>\n<tr>\n<td>离线使用</td>\n<td>❌ 需要联网</td>\n<td>❌ 需要联网</td>\n<td>✅ 部分支持</td>\n</tr>\n<tr>\n<td>灵活性和可定制性</td>\n<td>✅ 可配置 Prompt</td>\n<td>❌ 不支持</td>\n<td>❌ 不支持</td>\n</tr>\n</tbody>\n</table>\n<p>可以看出，DeepSeek Engineer 更加注重文件操作和开发流程的实际需求，非常适合需要精确控制和定制化的场景。</p>\n<hr />\n<h3><a id=\"_142_146\"></a>{#_142}如何快速上手？</h3>\n<p>最后，说点大家最关心的：怎么用？</p>\n<ol>\n<li>\n<p><strong>准备环境</strong></p>\n<ul>\n<li>\n<p>安装依赖：```<br />\npip install -r requirements.txt</p>\n</li>\n<li>\n<p>配置 API Key：创建 <code>.env</code> 文件，写入你的 Key。</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>启动工具</strong></p>\n<ul>\n<li>直接运行主程序：```<br />\npython3 main.py</li>\n</ul>\n</li>\n<li>\n<p><strong>体验功能</strong></p>\n<ul>\n<li>\n<p>用 <code>/add</code> 命令加载文件：```<br />\n/add your_file.py</p>\n</li>\n<li>\n<p>提出需求，让助手生成代码或修改建议。</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>探索更多用法</strong></p>\n<ul>\n<li>修改配置，试试用不同的环境变量自定义连接方式。</li>\n</ul>\n</li>\n</ol>\n<hr />\n<h3><a id=\"__AI_176__AI_178\"></a>{#__AI_176}如何零基础入门 / 学习AI大模型？</h3>\n<p>大模型时代，火爆出圈的LLM大模型让程序员们开始重新评估自己的本领。 “<code>AI会取代那些行业？</code>”&quot;<code>谁的饭碗又将不保了？</code>&quot;等问题热议不断。</p>\n<p>不如成为<code>「掌握AI工具的技术人」</code>，毕竟AI时代，<strong>谁先尝试，谁就能占得先机！</strong></p>\n<p>想正式转到一些新兴的 AI 行业，不仅需要系统的学习AI大模型。同时也要跟已有的技能结合，辅助编程提效，或上手实操应用，增加自己的职场竞争力。</p>\n<p><strong>但是LLM相关的内容很多，现在网上的老课程老教材关于LLM又太少。所以现在小白入门就只能靠自学，学习成本和门槛很高</strong></p>\n<p>那么我作为一名热心肠的互联网老兵，<strong>我意识到有很多经验和知识值得分享给大家，希望可以帮助到更多学习大模型的人！<strong>至于能学习到多少就看你的学习毅力和能力了 。</strong> <code>我已将重要的AI大模型资料包括AI大模型入门学习思维导图、精品AI大模型学习书籍手册、视频教程、实战学习等录播视频免费分享出来。</code></strong></p>\n<p><strong>这份完整版的大模型 AI 学习资料已经上传CSDN，朋友们如果需要可以微信扫描下方CSDN官方认证二维码免费领取【<code>保证100%免费</code>】</strong><br />\n<img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/9b8116b1-18fb-47cc-8d7c-dccfc6d304fc_081da29992e52fdd6785e11039fba33c.jpeg\" alt=\"081da29992e52fdd6785e11039fba33c.jpeg\" /></p>\n<p>👉 <strong><code>福利来袭</code><a href=\"https://mp.weixin.qq.com/s/zHr-AIrnRe1xGnel0X_8Lw\" target=\"_blank\">CSDN大礼包：《2025最全AI大模型学习资源包》免费分享，安全可点</a></strong> 👈</p>\n<h5><a id=\"httpsblogcsdnnetpython12345_articledetails145053759spm1001201430015501AGI_193httpsblogcsdnnetpython12345_articledetails145053759spm1001201430015501AGI_195\"></a>{#httpsblogcsdnnetpython12345_articledetails145053759spm1001201430015501AGI_193}<a href=\"https://blog.csdn.net/python12345_/article/details/145053759?spm=1001.2014.3001.5501\" target=\"_blank\"></a>全套AGI大模型学习大纲+路线</h5>\n<p><strong>AI大模型时代的学习之旅：从基础到前沿，掌握人工智能的核心技能！</strong></p>\n<h5><a id=\"_199\"></a></h5>\n<p>这套包含640份报告的合集，涵盖了AI大模型的理论研究、技术实现、行业应用等多个方面。无论您是科研人员、工程师，还是对AI大模型感兴趣的爱好者，这套报告合集都将为您提供宝贵的信息和启示。</p>\n<p><strong>👉学会后的收获：👈</strong><br />\n• <strong>基于大模型全栈工程实现</strong>（前端、后端、产品经理、设计、数据分析等），通过这门课可获得不同能力；</p>\n<p>• <strong>能够利用大模型解决相关实际项目需求</strong>： 大数据时代，越来越多的企业和机构需要处理海量数据，利用大模型技术可以更好地处理这些数据，提高数据分析和决策的准确性。因此，掌握大模型应用开发技能，可以让程序员更好地应对实际项目需求；</p>\n<p>• 基于大模型和企业数据AI应用开发，<strong>实现大模型理论、掌握GPU算力、硬件、LangChain开发框架和项目实战技能</strong>， 学会Fine-tuning垂直训练大模型（数据准备、数据蒸馏、大模型部署）一站式掌握；</p>\n<p>• <strong>能够完成时下热门大模型垂直领域模型训练能力，提高程序员的编码能力</strong>： 大模型应用开发需要掌握机器学习算法、深度学习框架等技术，这些技术的掌握可以提高程序员的编码能力和分析能力，让程序员更加熟练地编写高质量的代码。</p>\n<p>👉 <strong><code>福利来袭</code><a href=\"https://mp.weixin.qq.com/s/zHr-AIrnRe1xGnel0X_8Lw\" target=\"_blank\">CSDN大礼包：《2025最全AI大模型学习资源包》免费分享，安全可点</a></strong> 👈</p>\n<p><strong>这份完整版的大模型 AI 学习资料已经上传CSDN，朋友们如果需要可以微信扫描下方CSDN官方认证二维码免费领取【<code>保证100%免费</code>】</strong></p>\n<p><strong>作为普通人，入局大模型时代需要持续学习和实践，不断提高自己的技能和认知水平，同时也需要有责任感和伦理意识，为人工智能的健康发展贡献力量。</strong></p>\n','\n### DeepSeek Engineer 是啥？\n\n简单来说，**DeepSeek Engineer** 是一个基于命令行的智能助手。它能帮你完成这些事：\n\n* **快速读文件内容**：比如你有个配置文件，直接用命令把它加载进助手，后续所有操作都可以基于这个文件。\n* **自动改文件**：它不仅能提建议，还可以直接生成差异表（diff），甚至自动应用修改。\n* **智能代码生成**：比如你让它生成代码片段，它会按照指定格式和规则直接返回。\n\n![7f28e0203e7440a2a5b0b3594223af6d.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/c20921e4-d54f-426b-9f56-658a36e7000b_7f28e0203e7440a2a5b0b3594223af6d.png)\n\n更重要的是，这一切都是通过 DeepSeek 的强大 API 来实现的。想象一下，你有个贴身助手，不仅能听懂你的代码需求，还能直接动手帮你写！\n\n*** ** * ** ***\n\n### {#_19}核心功能拆解\n\n我们先来看 DeepSeek Engineer 的几个核心能力，让你更好地理解它的强大之处。\n\n#### {#1__DeepSeek__24}1. 自动配置 DeepSeek 客户端\n\n启动这个工具时，你只需要准备一个 `.env` 文件，里面写上你的 API Key，比如：\n\n```js\n\nDEEPSEEK_API_KEY=your_api_key_here\n\n```\n\n然后它会自动帮你连接到 DeepSeek 的服务器（地址通过环境变量配置）。接下来，所有的对话和操作都走这个 API，让你体验到类似 GPT 的流畅交互。\n\n![29e47b92c95546f4915797929ae9d5d9.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/23aa0c52-fa34-49b1-8de6-9be2875d0dea_29e47b92c95546f4915797929ae9d5d9.png)\n\n*** ** * ** ***\n\n#### {#2__40}2. 数据模型：严格又灵活\n\nDeepSeek Engineer 使用了 **Pydantic** 来定义和管理数据模型，这保证了所有操作都很安全且清晰。比如，它的模型包括以下几个部分：\n\n* **FileToCreate**：描述新建或更新的文件。\n* **FileToEdit**：定义某个文件里需要替换的代码片段。\n* **AssistantResponse**：用来结构化处理助手返回的对话内容和文件操作。\n\n具体来说，如果你想改文件内容，可以让它返回一个 JSON 格式的修改建议，类似这样：\n\n```js\n\n{\n  \"file\": \"example.py\",\n  \"changes\": [\n    {\n      \"original\": \"print(\'Hello\')\",\n      \"replacement\": \"print(\'Hello, DeepSeek!\')\"\n    }\n  ]\n}\n\n```\n\n这种方式既直观又安全，你完全可以放心地应用这些修改。\n\n*** ** * ** ***\n\n#### {#3__Prompt_67}3. 强大的系统 Prompt\n\nDeepSeek Engineer 背后有一个设计得非常好的系统 Prompt，它会引导对话始终输出结构化的 JSON 数据，同时还能支持文件创建和编辑操作。\n\n![70a89d4247074e7f8b41f7ee32a33bec.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/29d3348f-2b1d-4a10-87da-c6d178273e09_70a89d4247074e7f8b41f7ee32a33bec.png)\n\n这个设计的好处是，开发者不用担心助手回复出错或格式混乱。所有的响应都像程序接口一样，清晰、标准。\n\n*** ** * ** ***\n\n#### {#4__Helper__78}4. 常用 Helper 函数\n\n工具中还提供了一些实用的函数，专门用来操作文件和内容：\n\n* **`read_local_file`**：快速读取本地文件内容，返回成字符串。\n* **`create_file`**：帮你新建或覆盖文件。\n* **`show_diff_table`**：生成一个漂亮的差异表，展示文件修改前后的对比。\n* **`apply_diff_edit`**：直接应用代码片段级别的修改。\n\n比如，你想更新一个文件里的某段代码，只需输入以下命令：\n\n```js\n\n/add path/to/file\n\n```\n\nDeepSeek 会把这个文件的内容加载进来，你可以继续对话，让它生成修改建议并直接应用到文件中。\n\n*** ** * ** ***\n\n#### {#5__98}5. 交互式会话\n\n运行主程序（比如 `python3 main.py`），你会进入一个交互式的命令行界面。这里你可以随时输入请求、加载文件，或者让助手生成代码。\n\n完整操作流程可以是这样的：\n\n1. 启动工具：\\`\\`\\`  \n  \n\n   ```js\n\n 	python3 main.py\n\n   ```\n\n2. 加载一个文件：\\`\\`\\`  \n   \n\n   ```js\n\n	/add example.py\n   ```\n\n3. 让助手修改内容：\\`\\`\\`  \n   \n   ```js\n\n	请把函数 `foo` 改成返回值为整数。\n   ```\n\n4. 查看生成的建议并确认应用。\n\n是不是很贴心？\n\n*** ** * ** ***\n\n### {#_125}与其他工具的对比\n\n市面上其实有不少类似的代码助手，比如 GitHub Copilot、TabNine 等。那么 DeepSeek Engineer 和它们相比有什么特别之处呢？我们通过下表来简单对比一下：\n\n|     功能     | DeepSeek Engineer | GitHub Copilot | TabNine |\n|------------|-------------------|----------------|---------|\n| 文件内容读取     | ✅ 支持              | ❌ 不支持          | ❌ 不支持   |\n| 文件修改和应用    | ✅ 支持              | ❌ 不支持          | ❌ 不支持   |\n| JSON 响应结构化 | ✅ 内置支持            | ❌ 不支持          | ❌ 不支持   |\n| 离线使用       | ❌ 需要联网            | ❌ 需要联网         | ✅ 部分支持  |\n| 灵活性和可定制性   | ✅ 可配置 Prompt      | ❌ 不支持          | ❌ 不支持   |\n\n可以看出，DeepSeek Engineer 更加注重文件操作和开发流程的实际需求，非常适合需要精确控制和定制化的场景。\n\n*** ** * ** ***\n\n### {#_142}如何快速上手？\n\n最后，说点大家最关心的：怎么用？\n\n1. **准备环境**\n\n   * 安装依赖：\\`\\`\\`  \n     pip install -r requirements.txt\n\n\n   * 配置 API Key：创建 `.env` 文件，写入你的 Key。\n\n2. **启动工具**\n\n   * 直接运行主程序：\\`\\`\\`  \n     python3 main.py\n\n3. **体验功能**\n\n   * 用 `/add` 命令加载文件：\\`\\`\\`  \n     /add your_file.py\n\n \n\n   * 提出需求，让助手生成代码或修改建议。\n\n4. **探索更多用法**\n\n   * 修改配置，试试用不同的环境变量自定义连接方式。\n\n*** ** * ** ***\n\n### {#__AI_176}如何零基础入门 / 学习AI大模型？\n\n大模型时代，火爆出圈的LLM大模型让程序员们开始重新评估自己的本领。 \"`AI会取代那些行业？`\"\"`谁的饭碗又将不保了？`\"等问题热议不断。\n\n不如成为`「掌握AI工具的技术人」`，毕竟AI时代，**谁先尝试，谁就能占得先机！**\n\n想正式转到一些新兴的 AI 行业，不仅需要系统的学习AI大模型。同时也要跟已有的技能结合，辅助编程提效，或上手实操应用，增加自己的职场竞争力。\n\n**但是LLM相关的内容很多，现在网上的老课程老教材关于LLM又太少。所以现在小白入门就只能靠自学，学习成本和门槛很高**\n\n那么我作为一名热心肠的互联网老兵，**我意识到有很多经验和知识值得分享给大家，希望可以帮助到更多学习大模型的人！**至于能学习到多少就看你的学习毅力和能力了 。** `我已将重要的AI大模型资料包括AI大模型入门学习思维导图、精品AI大模型学习书籍手册、视频教程、实战学习等录播视频免费分享出来。`**\n\n**这份完整版的大模型 AI 学习资料已经上传CSDN，朋友们如果需要可以微信扫描下方CSDN官方认证二维码免费领取【`保证100%免费`】**   \n![081da29992e52fdd6785e11039fba33c.jpeg](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/9b8116b1-18fb-47cc-8d7c-dccfc6d304fc_081da29992e52fdd6785e11039fba33c.jpeg)\n\n👉 **`福利来袭`[CSDN大礼包：《2025最全AI大模型学习资源包》免费分享，安全可点](https://mp.weixin.qq.com/s/zHr-AIrnRe1xGnel0X_8Lw)** 👈\n\n##### {#httpsblogcsdnnetpython12345_articledetails145053759spm1001201430015501AGI_193}[](https://blog.csdn.net/python12345_/article/details/145053759?spm=1001.2014.3001.5501)全套AGI大模型学习大纲+路线\n\n**AI大模型时代的学习之旅：从基础到前沿，掌握人工智能的核心技能！**\n\n##### \n\n这套包含640份报告的合集，涵盖了AI大模型的理论研究、技术实现、行业应用等多个方面。无论您是科研人员、工程师，还是对AI大模型感兴趣的爱好者，这套报告合集都将为您提供宝贵的信息和启示。\n\n\n**👉学会后的收获：👈**   \n• **基于大模型全栈工程实现**（前端、后端、产品经理、设计、数据分析等），通过这门课可获得不同能力；\n\n• **能够利用大模型解决相关实际项目需求**： 大数据时代，越来越多的企业和机构需要处理海量数据，利用大模型技术可以更好地处理这些数据，提高数据分析和决策的准确性。因此，掌握大模型应用开发技能，可以让程序员更好地应对实际项目需求；\n\n• 基于大模型和企业数据AI应用开发，**实现大模型理论、掌握GPU算力、硬件、LangChain开发框架和项目实战技能**， 学会Fine-tuning垂直训练大模型（数据准备、数据蒸馏、大模型部署）一站式掌握；\n\n• **能够完成时下热门大模型垂直领域模型训练能力，提高程序员的编码能力**： 大模型应用开发需要掌握机器学习算法、深度学习框架等技术，这些技术的掌握可以提高程序员的编码能力和分析能力，让程序员更加熟练地编写高质量的代码。\n\n👉 **`福利来袭`[CSDN大礼包：《2025最全AI大模型学习资源包》免费分享，安全可点](https://mp.weixin.qq.com/s/zHr-AIrnRe1xGnel0X_8Lw)** 👈\n\n\n**这份完整版的大模型 AI 学习资料已经上传CSDN，朋友们如果需要可以微信扫描下方CSDN官方认证二维码免费领取【`保证100%免费`】**   \n\n**作为普通人，入局大模型时代需要持续学习和实践，不断提高自己的技能和认知水平，同时也需要有责任感和伦理意识，为人工智能的健康发展贡献力量。**\n',1,0,1,0,0,0,'https://blog.csdn.net/zhishi0000/article/details/146395609?spm=1000.2115.3001.10525',0,NULL,NULL,'2025-05-15 16:45:42','2025-07-08 22:55:22'),(304,1,40,'【优选算法 | 双指针】双指针大揭秘：如何用两根指针优化你的代码','http://113.45.240.54:9092/article-cover/e267c375-7a36-419c-babe-1655c7f821ca_freecompress-Neat-Admin 管理系统 (17).png','双指针','<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">算法</th>\n<th style=\"text-align:center\">相关知识点</th>\n<th style=\"text-align:center\">可以通过点击</th>\n<th style=\"text-align:center\">以下链接进行学习</th>\n<th style=\"text-align:center\">一起加油！</th>\n</tr>\n</thead>\n<tbody></tbody>\n</table>\n<blockquote>\n<p>在本篇文章中，我们将深入探索双指针算法的奥秘。从基础概念到实际应用，带你全面了解如何利用两根指针高效解决各种编程问题。无论你是刚接触算法的新人，还是希望提升代码性能的老手，双指针都是你不可忽视的利器！</p>\n</blockquote>\n<p>🌈个人主页：<a href=\"https://blog.csdn.net/2302_79177254?type=blog\" target=\"_blank\">是店小二呀</a><br />\n🌈C/C++专栏：<a href=\"https://blog.csdn.net/2302_79177254/category_12498683.html?spm=1001.2014.3001.5482\" target=\"_blank\">C语言</a>\\ <a href=\"https://blog.csdn.net/2302_79177254/category_12596619.html\" target=\"_blank\">C++</a><br />\n🌈初/高阶数据结构专栏： <a href=\"https://blog.csdn.net/2302_79177254/category_12596619.html\" target=\"_blank\">初阶数据结构</a>\\ <a href=\"https://blog.csdn.net/2302_79177254/category_12773774.html?spm=1001.2014.3001.5482\" target=\"_blank\">高阶数据结构</a><br />\n🌈Linux专栏： <a href=\"https://blog.csdn.net/2302_79177254/category_12742437.html\" target=\"_blank\">Linux</a><br />\n🌈算法专栏：<a href=\"https://blog.csdn.net/2302_79177254/category_12889122.html\" target=\"_blank\">算法</a><br />\n🌈Mysql专栏:<a href=\"https://blog.csdn.net/2302_79177254/category_12955608.html\" target=\"_blank\">Mysql</a></p>\n<p>🌈你可知:无人扶我青云志 我自踏雪至山巅 !</p>\n<br />\n<h4><a id=\"_19\"></a>文章目录</h4>\n<ul>\n<li>\n<ul>\n<li><a href=\"#font_colorcornflowerblue283font_23\">283.移动零[数组划分]</a></li>\n<li><a href=\"#font_colorcornflowerblue1089font_81\">1089.复写零[遍历角度]</a></li>\n<li><a href=\"#font_colorcornflowerblue202font_199\">202.快乐数[快慢指针]</a></li>\n<li><a href=\"#font_colorcornflowerblue11font_289\">11.盛水最多容器[对撞指针、单调性]</a></li>\n<li><a href=\"#font_colorcornflowerblue611font_396\">611.有效三角形的个数[对撞指针、单调性]</a></li>\n<li><a href=\"#font_colorcornflowerblue179sfont_486\">179.和为s的两个数字[对撞指针、单调性]</a></li>\n<li><a href=\"#font_colorcornflowerblue15font_535\">15.三数之和[对撞指针、单调性]</a></li>\n<li><a href=\"#font_colorcornflowerblue18Plusfont_629\">18.四数之和(三数之和Plus)[对撞指针、单调性]</a></li>\n</ul>\n</li>\n</ul>\n<br />\n<h3><a id=\"font_colorcornflowerblue283font_23283_content_views_33\"></a>{#font_colorcornflowerblue283font_23}283.移动零[数组划分] {#content_views}</h3>\n<p>【<strong>题目展示</strong> 】：<a href=\"https://leetcode.cn/problems/move-zeroes/description/\" target=\"_blank\">283.移动零</a></p>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/a2690c6a-c4b4-44bc-835a-a4dfcbf4fd76_6326e66e61434c3897f28c58d8606efe.png\" alt=\"6326e66e61434c3897f28c58d8606efe.png\" /></p>\n<blockquote>\n<p>输入:[0, 1, 0, 3, 12]</p>\n<p>输出:[1, 3, 12, 0, 0]</p>\n</blockquote>\n<p>【<strong>算法思路</strong>】</p>\n<p>这类问题可以分为数组划分或者叫数组分块，并且使用双指针算法。这里提供<strong>指针作用、具体步骤、部分设计</strong>，三个方面的解析。</p>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/858e0647-5a29-465e-a063-d2085288b797_a385f34aa9b34ea79a7a67268a3d270a.png\" alt=\"a385f34aa9b34ea79a7a67268a3d270a.png\" /></p>\n<p>1.<strong>指针作用</strong>：</p>\n<blockquote>\n<ul>\n<li>【cur】:从左往右扫码数组，遍历数组</li>\n<li>【dest】:已处理的区间内，非零元素的最后一个位置</li>\n</ul>\n</blockquote>\n<p>2.<strong>具体步骤</strong>:</p>\n<blockquote>\n<ol>\n<li>cur从前往后遍历的过程中:</li>\n<li>【<strong>遇到0元素</strong>】:cur++;</li>\n<li>【<strong>遇到非零元素</strong>】:swap(<ins>des,cur); cur</ins>;</li>\n</ol>\n</blockquote>\n<p>3.<strong>区域划分</strong>：这里需要保证[0, dest]是非0，[dest + 1, cur - 1]是0这个设计。dest设置为-1使得[0, dest]一开始不存在。最后通过cur遍历通过中，使用swap函数，将数据进行划分。</p>\n<p>【<strong>代码展示</strong>】：</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span>\n {\n<span class=\"hljs-attr\">public</span>:\n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">moveZeroes</span>(<span class=\"hljs-params\">vector&lt;int&gt;&amp; nums</span>) \n    {\n        <span class=\"hljs-keyword\">for</span>(int cur = <span class=\"hljs-number\">0</span>, dest = -<span class=\"hljs-number\">1</span>; cur &lt; nums.<span class=\"hljs-title function_\">size</span>(); cur++)\n        {\n            <span class=\"hljs-keyword\">if</span>(nums[cur]) <span class=\"hljs-title function_\">swap</span>(nums[cur],nums[++dest]);\n        }\n    }\n};\n</code></div></pre>\n<p>【<strong>个人思考</strong>】:遇到数组分块等类似题目，可以借助双指针进行数组划分，通过swap交换将不需要的数据排除该区间</p>\n<p>【<strong>小扩展</strong>】:快排里面最核心的一步，也是通过tmp进行数组的划分</p>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/27654fbe-b850-426a-8247-e087b82889d2_7d539998bb6c4e3484a02674004b9f48.png\" alt=\"7d539998bb6c4e3484a02674004b9f48.png\" /></p>\n<p>那么可以按照[0, tmp]、[tmp, cur -1]、[cur, n -1]来划分，代码是类似的</p>\n<hr />\n<h3><a id=\"font_colorcornflowerblue1089font_811089_86\"></a>{#font_colorcornflowerblue1089font_81}1089.复写零[遍历角度]</h3>\n<p>【<strong>题目展示</strong> 】：<a href=\"https://leetcode.cn/problems/duplicate-zeros/description/\" target=\"_blank\">1089.复写零</a></p>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/fba75bc0-ab61-4332-9e56-550e5e41b256_d8f96ee7c3864fd58ae8f4843fc580c9.png\" alt=\"d8f96ee7c3864fd58ae8f4843fc580c9.png\" /></p>\n<blockquote>\n<ul>\n<li>输入：[1,0,2,3,0,4,5,0]</li>\n<li>输出：[1,0,0,2,3,0,0,4]</li>\n</ul>\n</blockquote>\n<p>【<strong>问题解析</strong>】：</p>\n<p><strong>1.从左到右遍历不行</strong></p>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/f2ab8776-344b-4960-8cc9-daf27dca55b2_83b3cb6547844fc68a6ebbf0e01f5628.png\" alt=\"83b3cb6547844fc68a6ebbf0e01f5628.png\" /></p>\n<p>cur需要判断的数据被dest覆盖，原因在于dest在cur之后进行了操作。如果是’删除等于val值’这类题目中，dest始终保持在cur前面，因此不会出现数据被覆盖的情况。</p>\n<p><strong>2.转化角度</strong></p>\n<p>如果从左往右遍历会出现数据覆盖的情况，可以尝试从右往左进行覆盖，从结果的最后一个数字开始，按逆序遍历。</p>\n<p>【<strong>算法思路</strong>】</p>\n<p><strong>步骤分为两个阶段</strong>：</p>\n<ol>\n<li><strong>定位结果的最后一个元素</strong><br />\n可以使用双指针法遍历数组，此过程中无需修改数据，只需找到结果中的最后一个有效元素，并确定 <code>dest</code> 与 <code>cur</code> 应指向的位置。</li>\n<li><strong>从右往左进行覆盖</strong><br />\n在确定了结果末尾位置后，再从右向左逐步覆盖数据。</li>\n</ol>\n<p><strong>1.第一步:找到最后一个&quot;复写&quot;的数</strong></p>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/ec4e4cee-6a70-46f6-82f2-a4ffecd9fdbe_a36284b9465d4e228a13064f21a6ca5d.png\" alt=\"a36284b9465d4e228a13064f21a6ca5d.png\" /></p>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/44a00e16-f8b3-49c4-b829-33d4a39eb4e5_f1a6d5896f4f4886bec4b6e3c2644d9f.png\" alt=\"f1a6d5896f4f4886bec4b6e3c2644d9f.png\" /></p>\n<p>通过推导输入与输出元素的位置关系，我们发现 <code>cur</code> 指向最后一个有效元素（例如数字 4），而 <code>dest</code> 指向数组的末尾。如果保留原始的两个 0 元素，则 <code>cur</code> 与 <code>dest</code> 之间相差 2，这表明 0 元素的数量会影响 <code>dest</code> 和 <code>cur</code> 的移动步幅。</p>\n<p><strong>2.推导位置出现特殊情况</strong></p>\n<p>如果数组中不存在 0 元素，两个指针会同时向前移动。虽然既可以用 <code>cur &lt; n</code> 也可以用 <code>dest &gt; n - 1</code> 作为循环判断条件，但考虑到只有当 <code>cur &gt; n</code> 时才能确保遍历完整个流程，其范围更广。因此，作为循环的终止条件，通常只需判断 <code>dest &gt; n - 1</code> 来 break 循环即可。</p>\n<p><strong>3.第二步：移动数据</strong></p>\n<blockquote>\n<ul>\n<li>\n<p>【<strong>遇到非零元素</strong> 】:交换数据<code> arr[dest--] = arr[cur];</code></p>\n</li>\n<li>\n<p>【<strong>遇到零元素</strong> 】: 重复两次<code>arr[dest--] = 0;</code></p>\n</li>\n</ul>\n</blockquote>\n<p>【<strong>特殊情况处理</strong>】</p>\n<p>这里需要进行特殊处理：当 <code>dest</code> 达到 <code>n</code> 时，可能会导致数据覆盖，从而引发越界访问。</p>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/fb82bb02-9367-477b-b690-5ba099aa939c_fda75c3b330c45fdafaf27be7ac31f2a.png\" alt=\"fda75c3b330c45fdafaf27be7ac31f2a.png\" /></p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\n<span class=\"hljs-comment\">//2.特殊情况处理,处理完也是需要对位置进行移动的</span>\n        <span class=\"hljs-keyword\">if</span>(dest == n)\n        {\n            arr[n - <span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0</span>;\n            dest -= <span class=\"hljs-number\">2</span>;\n            cur--;\n        }\n</code></div></pre>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/f8ea213b-7eb5-45de-9505-d3d7d45568f8_5aadf0c733b74beead0014d25802ed90.png\" alt=\"5aadf0c733b74beead0014d25802ed90.png\" /></p>\n<p>【<strong>代码展示</strong>】：</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {\n<span class=\"hljs-attr\">public</span>:\n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">duplicateZeros</span>(<span class=\"hljs-params\">vector&lt;int&gt;&amp; arr</span>) \n    {\n        <span class=\"hljs-comment\">//1.先找到最后一个位置</span>\n        int cur = <span class=\"hljs-number\">0</span>, dest = -<span class=\"hljs-number\">1</span>, n = arr.<span class=\"hljs-title function_\">size</span>();\n        <span class=\"hljs-keyword\">while</span>(cur &lt; n)\n        {\n            <span class=\"hljs-keyword\">if</span>(arr[cur] == <span class=\"hljs-number\">0</span>) dest+=<span class=\"hljs-number\">2</span>;\n            <span class=\"hljs-keyword\">else</span> dest++;\n            <span class=\"hljs-keyword\">if</span>(dest &gt;= n - <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">break</span>;\n            cur++;\n        }\n        \n        <span class=\"hljs-comment\">//2.特殊情况处理,处理完也是需要对位置进行移动的</span>\n        <span class=\"hljs-keyword\">if</span>(dest == n)\n        {\n            arr[n - <span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0</span>;\n            dest -= <span class=\"hljs-number\">2</span>;\n            cur--;\n        }\n\n        <span class=\"hljs-comment\">//3.开始数据处理</span>\n        <span class=\"hljs-keyword\">while</span>(cur &gt;= <span class=\"hljs-number\">0</span>)\n        {\n            <span class=\"hljs-keyword\">if</span>(arr[cur]) arr[dest--] = arr[cur];\n\n            <span class=\"hljs-keyword\">if</span>(arr[cur] == <span class=\"hljs-number\">0</span>)\n            {\n                arr[dest--] = <span class=\"hljs-number\">0</span>;\n                arr[dest--] = <span class=\"hljs-number\">0</span>;\n            }\n\n            cur--;\n        }\n    }\n};\n</code></div></pre>\n<p>【<strong>个人思考</strong>】:在需要判断和修改数组元素的问题中，通常会想到双指针方法。但若从左到右遍历，可能会导致数据覆盖，从而影响结果。对此，不妨尝试调整遍历方向，说不定会带来意想不到的优化效果。</p>\n<hr />\n<h3><a id=\"font_colorcornflowerblue202font_199202_199\"></a>{#font_colorcornflowerblue202font_199}202.快乐数[快慢指针]</h3>\n<p>【<strong>题目展示</strong> 】：<a href=\"https://leetcode.cn/problems/happy-number/description/\" target=\"_blank\">202.快乐数</a></p>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/3bb56ce3-8f3d-48cd-849e-6e8c678dbcd6_88327bc26c3f410aa9d179cd98397280.png\" alt=\"88327bc26c3f410aa9d179cd98397280.png\" /></p>\n<blockquote>\n<p>示例 1：</p>\n<ul>\n<li>输入：n = 19</li>\n<li>输出：true</li>\n</ul>\n<p>解释：</p>\n<ul>\n<li>12 + 92 = 82</li>\n<li>82 + 22 = 68</li>\n<li>62 + 82 = 100</li>\n<li>12 + 02 + 02 = 1</li>\n</ul>\n<p>示例 2：</p>\n<ul>\n<li>输入：n = 2</li>\n<li>输出：false</li>\n</ul>\n</blockquote>\n<p><strong>【算法思路】</strong></p>\n<p><strong>1.是否为闭环</strong></p>\n<p>如果题目中没有提示&quot;重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1&quot;，那么我们必须额外判断以下三种情况，以确保程序能够正确终止：</p>\n<blockquote>\n<ul>\n<li>【<strong>情况一</strong>】:一直在 1中死循环，即1-&gt;1-&gt;1</li>\n<li>【<strong>情况二</strong>】:在历史的数据中死循环，但始终变不到1</li>\n<li>【<strong>情况三</strong>】：单路线不断变化新数字，不是死循环</li>\n</ul>\n</blockquote>\n<p><strong>2.闭环会限制变化的范围</strong></p>\n<p>因此，我们需要判断该数在变化过程中是否会形成闭环。形成闭环意味着至少会重复出现一次相同的数，此时数值变化的范围已被锁定。</p>\n<p><strong>3.证明鸽巢原理:</strong></p>\n<p><strong>鸽巢原理</strong>:n个巢，n + 1个鸽，至少有一个巢，里面的鸽数大于1，必有一个重复。那么意味着，只需要确定了[1, n]范围，就说明到n + 1必有一个重复的。而这个最大的n，是可以通过一个最大数去推。</p>\n<p><strong>数据范围</strong> :<code>1 &lt;= n &lt;= 231 - 1</code>,选一个更大的数<code>9999999999</code>。通过变化的最大值9^2 * 10 = 810，那么变化的区间在[1, 810]之间。这里是通过最大数推导出可能的最大变化范围，但实际最大值 810 本身并不包含在内。</p>\n<p>根据鸽巢原理，当一个数变化到811次之后，必然会形成一个循环。**当形成一个闭环时，可以使用我们的快慢指针解决。**因为1形成的闭环，里面全是1。</p>\n<p>【<strong>具体步骤</strong>】：</p>\n<ul>\n<li>\n<p>当快慢指针相遇，相遇位置的值是1，那么这个数一定是快乐数</p>\n</li>\n<li>\n<p>当快慢指针相遇，相遇位置的值不是1，那么这个数不是快乐数</p>\n</li>\n</ul>\n<p>【<strong>代码展示</strong>】：</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> \n{\n<span class=\"hljs-attr\">public</span>:\n\n    int <span class=\"hljs-title function_\">sum</span>(<span class=\"hljs-params\">int n</span>)\n    {\n        int ret = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">while</span>(n)\n        {\n            int tmp = n % <span class=\"hljs-number\">10</span>;\n            ret += tmp * tmp;\n            n/=<span class=\"hljs-number\">10</span>;\n        }\n        <span class=\"hljs-keyword\">return</span> ret;\n    }\n    bool <span class=\"hljs-title function_\">isHappy</span>(<span class=\"hljs-params\">int n</span>) \n    {\n        <span class=\"hljs-comment\">//定义快慢指针</span>\n        int slow = n;\n        int fast = <span class=\"hljs-title function_\">sum</span>(n);\n        <span class=\"hljs-keyword\">while</span>(slow != fast)\n        {\n            slow = <span class=\"hljs-title function_\">sum</span>(slow);\n            fast = <span class=\"hljs-title function_\">sum</span>(<span class=\"hljs-title function_\">sum</span>(fast));\n        }\n        <span class=\"hljs-keyword\">return</span> slow == <span class=\"hljs-number\">1</span>;\n    }\n};\n</code></div></pre>\n<p>【<strong>个人思考</strong>】:在这个问题中，我们需要根据需求特性判断是否形成闭环，而闭环的判断条件就是是否出现重复数。最初，这个思路并不容易想到，但可以借助鸽巢原理，通过数据的最大值来推导可能的变化范围。**因此，在求解范围时，可以考虑是否能利用数据的最大值来确定 n的界限。**闭环会限制变化的范围。</p>\n<hr />\n<h3><a id=\"font_colorcornflowerblue11font_28911_287\"></a>{#font_colorcornflowerblue11font_289}11.盛水最多容器[对撞指针、单调性]</h3>\n<p>【<strong>题目展示</strong> 】：盛水最多容器</p>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/328d223b-f11d-4a12-8c43-989eff1e9a08_a203efcf5f1c4a68b40282fe41522595.png\" alt=\"a203efcf5f1c4a68b40282fe41522595.png\" /></p>\n<blockquote>\n<ul>\n<li>输入：[1,8,6,2,5,4,8,3,7]</li>\n<li>输出：49</li>\n<li>解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49</li>\n</ul>\n</blockquote>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/613efcb2-40df-4f3b-9701-906b0edd4e83_3ebbdc35775143bdac04472311ebb938.png\" alt=\"3ebbdc35775143bdac04472311ebb938.png\" /></p>\n<p>【<strong>题目解析</strong>】：</p>\n<p><strong>1.解法一:暴力求解(会超时)</strong></p>\n<p>枚举出能构成的所有容器，找出其中容积最⼤的值，直接两层for循环，枚举能构成容器的体积，求得最大值。</p>\n<p>代码展示:</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> \n{\n<span class=\"hljs-attr\">public</span>:\n	int <span class=\"hljs-title function_\">maxArea</span>(<span class=\"hljs-params\">vector&lt;int&gt;&amp; height</span>) \n	{\n		int n = height.<span class=\"hljs-title function_\">size</span>();\n		int ret = <span class=\"hljs-number\">0</span>;\n		<span class=\"hljs-comment\">// 两层 for 枚举出所有可能出现的情况</span>\n	<span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\n    {\n		<span class=\"hljs-keyword\">for</span> (int j = i + <span class=\"hljs-number\">1</span>; j &lt; n; j++) \n			{\n				<span class=\"hljs-comment\">// 计算容积，找出最⼤的那⼀个</span>\n				ret = <span class=\"hljs-title function_\">max</span>(ret, <span class=\"hljs-title function_\">min</span>(height[i], height[j]) * (j - i));\n				}\n		}\n    <span class=\"hljs-keyword\">return</span> ret;\n}\n};\n</code></div></pre>\n<p><strong>2.解法二:对撞指针</strong></p>\n<p>【<strong>算法思路</strong>】</p>\n<p>首先，我们需要理解如何计算容器的体积。通过设置 <code>left</code> 和 <code>right</code> 两个指针，分别指向容器的左边和右边，然后根据短板效应来决定水的高度，即水的高度由两边中较短的那块木板决定。</p>\n<p>公式：</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\n\nint v =  <span class=\"hljs-title function_\">min</span>(higth[left], higth[right]) * (right - left);\n\n</code></div></pre>\n<p>这里 <code>v</code> 代表容器的体积，其中有两个变量控制体积：<code>height</code> 和 <code>width</code>。<code>height</code> 是水的高度，<code>width</code> 是容器的宽度。</p>\n<p>假设左边木板比右边木板短（即短板在左边），我们可以从这里分析水的容积变化。(这步骤可以暂时省去很多考虑)</p>\n<p><strong>容积变化的分析</strong>：</p>\n<ol>\n<li><strong>容器的宽度会变小</strong><br />\n无论我们如何调整左或右边界，容器的宽度始终会减小（<code>wide ↓</code>），这意味着容积的变化必然受到宽度减少的影响。</li>\n<li><strong>移动左边界（短木板）</strong><br />\n改变左边界(短木板)，由于左边界较小，新的水面高度不确定，但是不会超过右边界的高度，因此容器的容积可能会增大，导致<code>v（未知） = w↓ * h（未知，可以增大）</code></li>\n<li><strong>移动右边界（长木板）</strong><br />\n由于右边界较大，无论有边界移动到哪里，新的水面高度一定不会超过左边界，意味着当前高度h不变，由于宽度不断变小，对于容积一定会变小的。<code>v↓ = w↓ * h（↓ 或者 不变）</code></li>\n</ol>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/68181488-bcf3-4e20-8603-fe47ffda2c47_f76777ada1ca4166875fbfea60f3756d.png\" alt=\"f76777ada1ca4166875fbfea60f3756d.png\" /></p>\n<p>当我们移动短木板，这里因为h的不确定性，导致了容积可大可小。对此，当我们记录完一个区间的体积，<strong>将短木板往长木板靠拢，不间断判断下一个边界情况，不断刷新最大的容积</strong>。</p>\n<p>【<strong>代码展示</strong>】：</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> \n{\n<span class=\"hljs-attr\">public</span>:\n    int <span class=\"hljs-title function_\">maxArea</span>(<span class=\"hljs-params\">vector&lt;int&gt;&amp; height</span>) \n    {\n        <span class=\"hljs-comment\">//需要取最小的数据</span>\n        int left = <span class=\"hljs-number\">0</span>;\n        int right = height.<span class=\"hljs-title function_\">size</span>() - <span class=\"hljs-number\">1</span>;\n        int ret = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">while</span>(left &lt; right)\n        {\n            <span class=\"hljs-comment\">//算体积</span>\n            int v = <span class=\"hljs-title function_\">min</span>(height[left],height[right])*(right - left);\n            \n            <span class=\"hljs-comment\">//更新最大的体积</span>\n            ret = <span class=\"hljs-title function_\">max</span>(ret, v);\n            \n            <span class=\"hljs-keyword\">if</span>(height[left] &lt;= height[right])  left++;\n            <span class=\"hljs-keyword\">else</span> right--;\n        }\n        <span class=\"hljs-keyword\">return</span> ret;\n    }\n};\n</code></div></pre>\n<p>【<strong>个人思考</strong>】：<strong>遇到这类涉及公式计算最值的问题时，可以利用单调性来简化分析</strong>。关键在于如何选择移动边界：移动长木板时，容积必然减小，而移动短木板时，容积变化不确定，但有可能增大。</p>\n<p>本质上，<strong>问题的核心是利用单调性，从大到小向内枚举，逐步更新容积</strong>。每次移动边界时，更新容积并与当前最大值进行比较，最终得到最大的容积。</p>\n<hr />\n<h3><a id=\"font_colorcornflowerblue611font_396611_398\"></a>{#font_colorcornflowerblue611font_396}611.有效三角形的个数[对撞指针、单调性]</h3>\n<p>【<strong>题目展示</strong> 】：<a href=\"https://leetcode.cn/problems/valid-triangle-number/\" target=\"_blank\">611.有效三角形的个数</a></p>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/8a428a3e-4de3-43c7-ba68-3eecf13776d2_9ae0408c18954864a4cf6fe137320a9b.png\" alt=\"9ae0408c18954864a4cf6fe137320a9b.png\" /></p>\n<blockquote>\n<ul>\n<li>\n<p>输入: nums = [2,2,3,4]</p>\n</li>\n<li>\n<p>输出: 3<br />\n解释:有效的组合是:</p>\n</li>\n<li>\n<p>2,3,4 (使用第一个 2)</p>\n</li>\n<li>\n<p>2,3,4 (使用第二个 2)</p>\n</li>\n<li>\n<p>2,2,3</p>\n</li>\n</ul>\n</blockquote>\n<p>【<strong>算法思路</strong>】</p>\n<p><strong>1.数学知识：如何通过三个数，判断是否能构成三角形</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\n只需要两边之和大于第三边\n    a + b &gt; c\n    a + c &gt; b\n    b + c &gt; a\n</code></div></pre>\n<p><strong>2.解法一：暴力解法</strong></p>\n<p>通过暴力枚举法，可以使用三层for循环遍历所有可能的三角形数据，记录并筛选出符合条件的组合。</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\n	 <span class=\"hljs-keyword\">for</span>(i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\n        <span class=\"hljs-keyword\">for</span>(j = i + <span class=\"hljs-number\">1</span>; j &lt; n; j++)\n            <span class=\"hljs-keyword\">for</span>(k = j + <span class=\"hljs-number\">1</span>; k &lt; n; k++)\n                <span class=\"hljs-title function_\">check</span>(i, j , k);\n</code></div></pre>\n<p>通过数学优化，当<code>a &lt;= b &lt;= c</code>时，判断三角形成立只需验证<code>a + b &gt; c</code>。因为在这种情况下，<code>c</code>是最大的，<code>a + c</code>和<code>b + c</code>必然大于另一个边。优化步骤：首先对数组进行排序，得到有序数组。</p>\n<p><strong>时间复杂度</strong></p>\n<p>没有进行优化，三层for循环的时间复杂度就是<code>O(3N^3^)</code>。如果进行了优化，时间复杂度就是<code>O(NlogN + N^3^)</code>。虽然时间复杂度是取主要影响的变量，但是不管如何，这里进行了优化的情况下，时间复杂度是得到了优化，同时处理数据方面也是得到改善。</p>\n<p><strong>2.解法二:对撞指针</strong></p>\n<blockquote>\n<p>提示：借鉴上次容积问题的思路，**当根据公式或表达式判断条件时，可以利用单调性优化。**通过固定最大数，并使用<code>left</code>和<code>right</code>指针指向左右两端，避免枚举。类似容积问题，从左到右或从右到左的差异源自数据大小顺序，影响判断条件的判断效率。</p>\n</blockquote>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/8bf38456-9e97-4440-81ca-f4b12d144137_894250985bd84c7b8f356e3f2301f1bc.png\" alt=\"894250985bd84c7b8f356e3f2301f1bc.png\" /></p>\n<p>通过设置两个变量作为边界，首先判断<code>a + b</code>是否大于<code>c</code>。如果<code>a + b &gt; c</code>，那么从左到右时，<code>a + b</code>会始终大于<code>c</code>，无需再继续枚举；从右到左时，<code>a + b</code>的大小关系不确定，因此需要保留这个操作进行整体判断。如果<code>a + b &lt;= c</code>，则从右到左会使<code>b</code>变小，导致无法满足条件，因此需要移动<code>left</code>，使得<code>a + b</code>不断逼近并超过<code>c</code>。在此过程中，<code>left</code>和<code>right</code>会不断调整，因此需要在循环内进行相应的更新。</p>\n<p>这里的 <code>sum += right - left</code> 表示以 <code>right</code> 为边界时，所有满足条件的组合数量。</p>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/14b63785-a839-4a04-a64d-fce57c2dd111_326457348abe41f881799232c987de54.png\" alt=\"326457348abe41f881799232c987de54.png\" /></p>\n<p>【<strong>代码展示</strong>】：</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> \n{\n<span class=\"hljs-attr\">public</span>:\n    int <span class=\"hljs-title function_\">triangleNumber</span>(<span class=\"hljs-params\">vector&lt;int&gt;&amp; nums</span>)\n    {\n      <span class=\"hljs-title function_\">sort</span>(nums.<span class=\"hljs-title function_\">begin</span>(), nums.<span class=\"hljs-title function_\">end</span>());\n        int n = nums.<span class=\"hljs-title function_\">size</span>();\n        int sum = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span>(int i = n - <span class=\"hljs-number\">1</span>; i &gt;=<span class=\"hljs-number\">2</span>; i--)\n        {\n            int left = <span class=\"hljs-number\">0</span>, right = i - <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-keyword\">while</span>(left &lt; right)\n            {\n                <span class=\"hljs-keyword\">if</span>(nums[left] + nums[right] &gt; nums[i]) \n                {\n                    sum+=right - left;\n                    right--;\n                }\n                <span class=\"hljs-keyword\">else</span> left++;\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> sum;\n    }\n};\n</code></div></pre>\n<hr />\n<h3><a id=\"font_colorcornflowerblue179sfont_486179s_484\"></a>{#font_colorcornflowerblue179sfont_486}179.和为s的两个数字[对撞指针、单调性]</h3>\n<p>【<strong>题目展示</strong> 】：<a href=\"https://leetcode.cn/problems/he-wei-sde-liang-ge-shu-zi-lcof/description/\" target=\"_blank\">179.和为s的两个数字(原题目)</a>)</p>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/e421c2ca-d239-47ff-9886-102d1728c190_29bdc0503e114843aea79f54d21c8990.png\" alt=\"29bdc0503e114843aea79f54d21c8990.png\" /></p>\n<blockquote>\n<ul>\n<li>输入：price = [3, 9, 12, 15], target = 18</li>\n<li>输出：[3,15] 或者 [15,3]</li>\n</ul>\n</blockquote>\n<p>【<strong>算法思路</strong>】</p>\n<p>这道题属于基础题，主要考察双指针法在单调性匹配中的应用。关键是判断 <code>left + right == target</code>。</p>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/0493a97d-c43f-4268-a704-03813fc7a0c2_af8df8b29e59448793dd35c8fcc8915e.png\" alt=\"af8df8b29e59448793dd35c8fcc8915e.png\" /></p>\n<p>对于 <code>left + right ? target</code>，共有三种情况。通过利用单调性，依据 <code>left</code> 和 <code>right</code> 指向的数据关系，调整它们的位置以达到目标。</p>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/562ec37b-1566-47a6-b11a-107f8d8a801a_9e4caf3d12204d00963ce7c8ac970790.png\" alt=\"9e4caf3d12204d00963ce7c8ac970790.png\" /></p>\n<p>【<strong>代码展示</strong>】</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> \n{\n<span class=\"hljs-attr\">public</span>:\n    vector&lt;int&gt; <span class=\"hljs-title function_\">twoSum</span>(<span class=\"hljs-params\">vector&lt;int&gt;&amp; price, int target</span>) \n    {\n        int left = <span class=\"hljs-number\">0</span>, right = price.<span class=\"hljs-title function_\">size</span>() - <span class=\"hljs-number\">1</span>;\n        \n        <span class=\"hljs-keyword\">while</span>(left &lt; right)\n        {\n            int sum = price[left] + price[right];\n\n            <span class=\"hljs-comment\">//连续判断还是写else if分支语句</span>\n            <span class=\"hljs-keyword\">if</span>(sum &gt; target) right--;\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(sum &lt; target) left++;\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> {price[left], price[right]};\n        }\n        <span class=\"hljs-comment\">//为了照护编译器，通过返回-1</span>\n        <span class=\"hljs-keyword\">return</span> {-<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>};\n    }\n};\n\n</code></div></pre>\n<hr />\n<h3><a id=\"font_colorcornflowerblue15font_53515_532\"></a>{#font_colorcornflowerblue15font_535}15.三数之和[对撞指针、单调性]</h3>\n<p>【<strong>题目展示</strong> 】：<a href=\"https://leetcode.cn/problems/3sum/description/\" target=\"_blank\">15.三数之和</a></p>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/59e0a5f9-b729-40cc-81b4-029dd070996f_45abe5a2e65b4053ad2990a16d55408a.png\" alt=\"45abe5a2e65b4053ad2990a16d55408a.png\" /></p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\n\n输入：nums = [-<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,-<span class=\"hljs-number\">1</span>,-<span class=\"hljs-number\">4</span>]\n输出：[[-<span class=\"hljs-number\">1</span>,-<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>],[-<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>]]\n解释：\nnums[<span class=\"hljs-number\">0</span>] + nums[<span class=\"hljs-number\">1</span>] + nums[<span class=\"hljs-number\">2</span>] = (-<span class=\"hljs-number\">1</span>) + <span class=\"hljs-number\">0</span> + <span class=\"hljs-number\">1</span> = <span class=\"hljs-number\">0</span> 。\nnums[<span class=\"hljs-number\">1</span>] + nums[<span class=\"hljs-number\">2</span>] + nums[<span class=\"hljs-number\">4</span>] = <span class=\"hljs-number\">0</span> + <span class=\"hljs-number\">1</span> + (-<span class=\"hljs-number\">1</span>) = <span class=\"hljs-number\">0</span> 。\nnums[<span class=\"hljs-number\">0</span>] + nums[<span class=\"hljs-number\">3</span>] + nums[<span class=\"hljs-number\">4</span>] = (-<span class=\"hljs-number\">1</span>) + <span class=\"hljs-number\">2</span> + (-<span class=\"hljs-number\">1</span>) = <span class=\"hljs-number\">0</span> 。\n不同的三元组是 [-<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>] 和 [-<span class=\"hljs-number\">1</span>,-<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>] 。\n注意，输出的顺序和三元组的顺序并不重要。\n\n</code></div></pre>\n<p>首先分析题目给出的信息，注意到题目没有明确说明是否允许重复三元组。因此，需要通过实例来推断是否存在重复三元组的情况。<br />\n<img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/acf87efa-8327-4bd2-83d7-61565b73744a_39d73a845176457a92a2dfc207ba2c58.png\" alt=\"39d73a845176457a92a2dfc207ba2c58.png\" /></p>\n<p>题目中说明三元组的顺序不重要，因此我们关注的是数据是否重复。通过例子 <code>[-1, 0, 1]</code>、<code>[0, 1, -1]</code> 和 <code>[-1, 1, 0]</code>，我们可以发现这些是重复的三元组。为了简化判断，可以统一将三元组排序为 [-1, 0, 1]，通过排序来优化，<strong>避免不必要的重复判断</strong>。</p>\n<p><strong>3.解法一:排序 + 暴力枚举 + 利用set去重:时间复杂度O(N<sup>3</sup>)</strong></p>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/021dea31-1f9b-4033-b770-29c5c77be5cc_f7387b2994b74db29e653800a3c1e4b4.png\" alt=\"f7387b2994b74db29e653800a3c1e4b4.png\" /></p>\n<p><strong>4.解法二:对撞指针</strong></p>\n<p>根据题目需求，我们需要统计满足 <code>nums[a] + nums[left] + nums[right] == 0</code> 的三元组。可以将其转化为 <code>nums[left] + nums[right] = -nums[a]</code>，这意味着当 <code>nums[left] + nums[right]</code> 等于 <code>nums[a]</code> 的相反数时，条件成立。通过固定一个数值并移动两个边界，我们能够减少不必要的枚举次数。</p>\n<p>【<strong>个人思考</strong>】：这个问题和两数之和的单调性问题类似，只需固定一个数并让另两个数的和等于目标值，之后通过调整左右指针来查找所有满足条件的组合。</p>\n<p>【<strong>细节问题</strong>】</p>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/4507758c-05ac-4247-9648-25fd3034d992_2ef326a50e8d4c729481ad88d1772d3e.png\" alt=\"2ef326a50e8d4c729481ad88d1772d3e.png\" /></p>\n<p>如果使用 <code>set</code> 来去重，则需要额外的时间来插入和查找每个元素，时间复杂度为 <code>O(log n)</code>。我们通过排序的方法，将<code>[-1, 0, 1]、[0, 1, -1]、[-1, 1, 0]</code>重复的数据统一变成了<code>[-1, 0, 1]</code>的形式，但是重复的数据，我们是不需要的。固定一个数，当<code>left</code>和<code>right</code>指向位置符合要求后，就需要考虑重复问题，进行去重操作。当然不止<code>left</code>和<code>right</code>需要去重，固定的数据也需要完成去重操作，避免越界<code>[0, 0, 0, 0]</code>。</p>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/f803d3e8-16b0-45c7-b0ad-8470f99e418a_8cd619ffefe24de8bffbd0ea07fa7c5c.png\" alt=\"8cd619ffefe24de8bffbd0ea07fa7c5c.png\" /></p>\n<p>【<strong>代码展示</strong>】</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span>\n{\n    <span class=\"hljs-attr\">public</span>:\n    vector&lt;vector&lt;int&gt;&gt; <span class=\"hljs-title function_\">threeSum</span>(<span class=\"hljs-params\">vector&lt;int&gt;&amp; nums</span>) \n    {\n        vector&lt;vector&lt;int&gt;&gt; v;\n\n        <span class=\"hljs-comment\">// -3 -2 -1</span>\n        <span class=\"hljs-comment\">//排序下</span>\n        <span class=\"hljs-title function_\">sort</span>(nums.<span class=\"hljs-title function_\">begin</span>(), nums.<span class=\"hljs-title function_\">end</span>());\n        int n = nums.<span class=\"hljs-title function_\">size</span>();\n        <span class=\"hljs-keyword\">for</span>(int i = <span class=\"hljs-number\">0</span>; i &lt; n - <span class=\"hljs-number\">2</span> ;  )\n        {\n            \n            <span class=\"hljs-comment\">//不存在 nums[]+nums[] = minPositive_nums[i]</span>\n            <span class=\"hljs-keyword\">if</span>(nums[i] &gt; <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">break</span>;\n\n            int left = i + <span class=\"hljs-number\">1</span>, right =  n - <span class=\"hljs-number\">1</span>;\n            int target = -nums[i];\n\n            <span class=\"hljs-keyword\">while</span>(left &lt; right)\n            {\n                int sum = nums[left] + nums[right];\n                <span class=\"hljs-keyword\">if</span>(sum &gt; target) right--;\n                <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(sum &lt; target) left++;\n                <span class=\"hljs-keyword\">else</span>\n                {\n                    <span class=\"hljs-comment\">//初始化列表自动转为vector&lt;int&gt;类型</span>\n                    v.<span class=\"hljs-title function_\">push_back</span>({nums[left], nums[right], nums[i]});\n                    left++;right--;\n                    <span class=\"hljs-comment\">//去重判断</span>\n                    <span class=\"hljs-keyword\">while</span>(left &lt; right &amp;&amp; nums[left] == nums[left - <span class=\"hljs-number\">1</span>]) left++;\n                    <span class=\"hljs-keyword\">while</span>(left &lt; right &amp;&amp; nums[right] == nums[right + <span class=\"hljs-number\">1</span>]) right--;\n                }\n            }\n\n            <span class=\"hljs-comment\">//去重操作</span>\n            <span class=\"hljs-comment\">//这里会到导致判断时，造成越界访问</span>\n            <span class=\"hljs-comment\">//while(nums[i] == nums[i + 1]) i++;</span>\n            i++;\n            <span class=\"hljs-comment\">///关于越界访问，需要判断循环逻辑是否有问题。</span>\n            <span class=\"hljs-keyword\">while</span>(i &lt; n &amp;&amp; nums[i] == nums[i - <span class=\"hljs-number\">1</span>]) i++;\n        }\n        <span class=\"hljs-keyword\">return</span> v;\n    }\n\n</code></div></pre>\n<hr />\n<h3><a id=\"font_colorcornflowerblue18Plusfont_62918Plus_630\"></a>{#font_colorcornflowerblue18Plusfont_629}18.四数之和(三数之和Plus)[对撞指针、单调性]</h3>\n<p>【<strong>题目展示</strong> 】：<a href=\"https://leetcode.cn/problems/4sum/submissions/597939657/\" target=\"_blank\">18.四数之和</a></p>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/436227b0-b06e-4cc3-acc5-1b2f3af9a1ff_68ebff45d7c44065b5e1ad9b49d52712.png\" alt=\"68ebff45d7c44065b5e1ad9b49d52712.png\" /></p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\n输入：nums = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,-<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,-<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>], target = <span class=\"hljs-number\">0</span>\n输出：[[-<span class=\"hljs-number\">2</span>,-<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>],[-<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>],[-<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>]]\n</code></div></pre>\n<p>【<strong>算法思路</strong>】</p>\n<p>这里同样的，按照题目要求可以得到一个表达式<code>nums[a] + nums[b] + nums[left] + nums[right] == target</code>,按照我们熟悉的解法，我们是通过固定一个数，以left和right两个数作为边界向内进行查找。但是这里多出了一个数，那么不妨可以这样<code> nums[b] + nums[left] + nums[right] == target - nums[a]</code>，跟三数之和题目不是一样了吗？这里多次一个数的意义，就是多了一层循环。</p>\n<p><strong>1.解法一:排序 + 暴力枚举 + 利用set去重 时间复杂度O(N<sup>4</sup>)</strong></p>\n<p><strong>2.解法二:对撞指针</strong></p>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/5d4526eb-2184-45a6-b47f-c09a24ff7ee8_0538fb10d81c48a19edbdefc3b7d1fdd.png\" alt=\"0538fb10d81c48a19edbdefc3b7d1fdd.png\" /></p>\n<p>【<strong>问题：栈溢出</strong>】</p>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/561811ab-8470-4e55-b23f-37a19b155617_9737a09a647d49ab8145d2ed4e08b400.png\" alt=\"9737a09a647d49ab8145d2ed4e08b400.png\" /></p>\n<p>对此这里需要考虑数据的范围将<code>dest</code>和<code>target</code>类型转化为<code>long long</code></p>\n<p>【<strong>代码展示</strong>】</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> \n{\n    <span class=\"hljs-attr\">public</span>:\n    vector&lt;vector&lt;int&gt;&gt; <span class=\"hljs-title function_\">fourSum</span>(<span class=\"hljs-params\">vector&lt;int&gt;&amp; nums, int target</span>) \n    {\n        <span class=\"hljs-comment\">//-4 - 3 -2 -1</span>\n        <span class=\"hljs-title function_\">sort</span>(nums.<span class=\"hljs-title function_\">begin</span>(), nums.<span class=\"hljs-title function_\">end</span>());\n\n        int n = nums.<span class=\"hljs-title function_\">size</span>();\n        vector&lt;vector&lt;int&gt;&gt; v;\n        <span class=\"hljs-keyword\">for</span>(int i = <span class=\"hljs-number\">0</span>; i &lt; n - <span class=\"hljs-number\">3</span>;)\n        {\n            <span class=\"hljs-keyword\">for</span>(int j = i + <span class=\"hljs-number\">1</span>; j &lt; n - <span class=\"hljs-number\">2</span>;)\n            {\n                <span class=\"hljs-comment\">//新的目标数</span>\n                long long dest = (long long)target - nums[i] - nums[j];\n                int left = j + <span class=\"hljs-number\">1</span>, right = n - <span class=\"hljs-number\">1</span>;\n                <span class=\"hljs-keyword\">while</span>(left &lt; right)\n                {\n                    int sum = nums[left] + nums[right];\n                    <span class=\"hljs-keyword\">if</span>(sum &gt; dest) right--;\n                    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(sum &lt; dest) left++;\n                    <span class=\"hljs-keyword\">else</span>\n                    {\n                        v.<span class=\"hljs-title function_\">push_back</span>({nums[i], nums[j], nums[left], nums[right]});\n                        left++;right--;\n                        <span class=\"hljs-comment\">//去重操作</span>\n                        <span class=\"hljs-keyword\">while</span>(left &lt; right &amp;&amp; nums[left] == nums[left - <span class=\"hljs-number\">1</span>]) left++;\n                        <span class=\"hljs-keyword\">while</span>(left &lt; right &amp;&amp; nums[right] == nums[right + <span class=\"hljs-number\">1</span>]) right--;\n                    }\n                }\n                j++;\n                <span class=\"hljs-keyword\">while</span>(j &lt; n - <span class=\"hljs-number\">2</span> &amp;&amp; nums[j] == nums[j - <span class=\"hljs-number\">1</span>])  j++;\n            }\n            i++;\n            <span class=\"hljs-keyword\">while</span>(i &lt; n - <span class=\"hljs-number\">3</span> &amp;&amp; nums[i] == nums[i - <span class=\"hljs-number\">1</span>])  i++;\n        }\n        <span class=\"hljs-keyword\">return</span> v;\n    }\n};\n\n</code></div></pre>\n','\n\n| 算法 | 相关知识点 | 可以通过点击 | 以下链接进行学习 | 一起加油！ |\n|:--:|:-----:|:------:|:--------:|:-----:|\n\n> 在本篇文章中，我们将深入探索双指针算法的奥秘。从基础概念到实际应用，带你全面了解如何利用两根指针高效解决各种编程问题。无论你是刚接触算法的新人，还是希望提升代码性能的老手，双指针都是你不可忽视的利器！\n\n\n🌈个人主页：[是店小二呀](https://blog.csdn.net/2302_79177254?type=blog)  \n🌈C/C++专栏：[C语言](https://blog.csdn.net/2302_79177254/category_12498683.html?spm=1001.2014.3001.5482)\\\\ [C++](https://blog.csdn.net/2302_79177254/category_12596619.html)  \n🌈初/高阶数据结构专栏： [初阶数据结构](https://blog.csdn.net/2302_79177254/category_12596619.html)\\\\ [高阶数据结构](https://blog.csdn.net/2302_79177254/category_12773774.html?spm=1001.2014.3001.5482)  \n🌈Linux专栏： [Linux](https://blog.csdn.net/2302_79177254/category_12742437.html)  \n🌈算法专栏：[算法](https://blog.csdn.net/2302_79177254/category_12889122.html)  \n🌈Mysql专栏:[Mysql](https://blog.csdn.net/2302_79177254/category_12955608.html)\n\n🌈你可知:无人扶我青云志 我自踏雪至山巅 !\n\n<br />\n\n#### 文章目录\n\n*\n  * [283.移动零\\[数组划分\\]](#font_colorcornflowerblue283font_23)\n  * [1089.复写零\\[遍历角度\\]](#font_colorcornflowerblue1089font_81)\n  * [202.快乐数\\[快慢指针\\]](#font_colorcornflowerblue202font_199)\n  * [11.盛水最多容器\\[对撞指针、单调性\\]](#font_colorcornflowerblue11font_289)\n  * [611.有效三角形的个数\\[对撞指针、单调性\\]](#font_colorcornflowerblue611font_396)\n  * [179.和为s的两个数字\\[对撞指针、单调性\\]](#font_colorcornflowerblue179sfont_486)\n  * [15.三数之和\\[对撞指针、单调性\\]](#font_colorcornflowerblue15font_535)\n  * [18.四数之和(三数之和Plus)\\[对撞指针、单调性\\]](#font_colorcornflowerblue18Plusfont_629)\n\n<br />\n\n### {#font_colorcornflowerblue283font_23}283.移动零\\[数组划分\\] {#content_views}\n\n【**题目展示** 】：[283.移动零](https://leetcode.cn/problems/move-zeroes/description/)\n\n![6326e66e61434c3897f28c58d8606efe.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/a2690c6a-c4b4-44bc-835a-a4dfcbf4fd76_6326e66e61434c3897f28c58d8606efe.png)\n> 输入:\\[0, 1, 0, 3, 12\\]\n>\n> 输出:\\[1, 3, 12, 0, 0\\]\n\n【**算法思路**】\n\n这类问题可以分为数组划分或者叫数组分块，并且使用双指针算法。这里提供**指针作用、具体步骤、部分设计**，三个方面的解析。\n\n![a385f34aa9b34ea79a7a67268a3d270a.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/858e0647-5a29-465e-a063-d2085288b797_a385f34aa9b34ea79a7a67268a3d270a.png)\n\n1.**指针作用**：\n> * 【cur】:从左往右扫码数组，遍历数组\n> * 【dest】:已处理的区间内，非零元素的最后一个位置\n\n2.**具体步骤**:\n> 1. cur从前往后遍历的过程中:\n> 2. 【**遇到0元素**】:cur++;\n> 3. 【**遇到非零元素**】:swap(++des,cur); cur++;\n\n3.**区域划分**：这里需要保证\\[0, dest\\]是非0，\\[dest + 1, cur - 1\\]是0这个设计。dest设置为-1使得\\[0, dest\\]一开始不存在。最后通过cur遍历通过中，使用swap函数，将数据进行划分。\n\n【**代码展示**】：\n\n```js\n\nclass Solution\n {\npublic:\n    void moveZeroes(vector<int>& nums) \n    {\n        for(int cur = 0, dest = -1; cur < nums.size(); cur++)\n        {\n            if(nums[cur]) swap(nums[cur],nums[++dest]);\n        }\n    }\n};\n```\n\n【**个人思考**】:遇到数组分块等类似题目，可以借助双指针进行数组划分，通过swap交换将不需要的数据排除该区间\n\n【**小扩展**】:快排里面最核心的一步，也是通过tmp进行数组的划分\n\n![7d539998bb6c4e3484a02674004b9f48.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/27654fbe-b850-426a-8247-e087b82889d2_7d539998bb6c4e3484a02674004b9f48.png)\n\n那么可以按照\\[0, tmp\\]、\\[tmp, cur -1\\]、\\[cur, n -1\\]来划分，代码是类似的\n\n*** ** * ** ***\n\n### {#font_colorcornflowerblue1089font_81}1089.复写零\\[遍历角度\\]\n\n【**题目展示** 】：[1089.复写零](https://leetcode.cn/problems/duplicate-zeros/description/)\n\n![d8f96ee7c3864fd58ae8f4843fc580c9.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/fba75bc0-ab61-4332-9e56-550e5e41b256_d8f96ee7c3864fd58ae8f4843fc580c9.png)\n> * 输入：\\[1,0,2,3,0,4,5,0\\]\n> * 输出：\\[1,0,0,2,3,0,0,4\\]\n\n【**问题解析**】：\n\n**1.从左到右遍历不行**\n\n![83b3cb6547844fc68a6ebbf0e01f5628.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/f2ab8776-344b-4960-8cc9-daf27dca55b2_83b3cb6547844fc68a6ebbf0e01f5628.png)\n\ncur需要判断的数据被dest覆盖，原因在于dest在cur之后进行了操作。如果是\'删除等于val值\'这类题目中，dest始终保持在cur前面，因此不会出现数据被覆盖的情况。\n\n**2.转化角度**\n\n如果从左往右遍历会出现数据覆盖的情况，可以尝试从右往左进行覆盖，从结果的最后一个数字开始，按逆序遍历。\n\n【**算法思路**】\n\n**步骤分为两个阶段**：\n\n1. **定位结果的最后一个元素**   \n   可以使用双指针法遍历数组，此过程中无需修改数据，只需找到结果中的最后一个有效元素，并确定 `dest` 与 `cur` 应指向的位置。\n2. **从右往左进行覆盖**   \n   在确定了结果末尾位置后，再从右向左逐步覆盖数据。\n\n**1.第一步:找到最后一个\"复写\"的数**\n\n![a36284b9465d4e228a13064f21a6ca5d.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/ec4e4cee-6a70-46f6-82f2-a4ffecd9fdbe_a36284b9465d4e228a13064f21a6ca5d.png)\n\n![f1a6d5896f4f4886bec4b6e3c2644d9f.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/44a00e16-f8b3-49c4-b829-33d4a39eb4e5_f1a6d5896f4f4886bec4b6e3c2644d9f.png)\n\n通过推导输入与输出元素的位置关系，我们发现 `cur` 指向最后一个有效元素（例如数字 4），而 `dest` 指向数组的末尾。如果保留原始的两个 0 元素，则 `cur` 与 `dest` 之间相差 2，这表明 0 元素的数量会影响 `dest` 和 `cur` 的移动步幅。\n\n**2.推导位置出现特殊情况**\n\n如果数组中不存在 0 元素，两个指针会同时向前移动。虽然既可以用 `cur < n` 也可以用 `dest > n - 1` 作为循环判断条件，但考虑到只有当 `cur > n` 时才能确保遍历完整个流程，其范围更广。因此，作为循环的终止条件，通常只需判断 `dest > n - 1` 来 break 循环即可。\n\n**3.第二步：移动数据**\n> * 【**遇到非零元素** 】:交换数据` arr[dest--] = arr[cur];`\n>\n> * 【**遇到零元素** 】: 重复两次`arr[dest--] = 0;`\n\n【**特殊情况处理**】\n\n这里需要进行特殊处理：当 `dest` 达到 `n` 时，可能会导致数据覆盖，从而引发越界访问。\n\n![fda75c3b330c45fdafaf27be7ac31f2a.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/fb82bb02-9367-477b-b690-5ba099aa939c_fda75c3b330c45fdafaf27be7ac31f2a.png)\n\n```js\n\n//2.特殊情况处理,处理完也是需要对位置进行移动的\n        if(dest == n)\n        {\n            arr[n - 1] = 0;\n            dest -= 2;\n            cur--;\n        }\n```\n\n![5aadf0c733b74beead0014d25802ed90.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/f8ea213b-7eb5-45de-9505-d3d7d45568f8_5aadf0c733b74beead0014d25802ed90.png)\n\n【**代码展示**】：\n\n```js\n\n\nclass Solution {\npublic:\n    void duplicateZeros(vector<int>& arr) \n    {\n        //1.先找到最后一个位置\n        int cur = 0, dest = -1, n = arr.size();\n        while(cur < n)\n        {\n            if(arr[cur] == 0) dest+=2;\n            else dest++;\n            if(dest >= n - 1) break;\n            cur++;\n        }\n        \n        //2.特殊情况处理,处理完也是需要对位置进行移动的\n        if(dest == n)\n        {\n            arr[n - 1] = 0;\n            dest -= 2;\n            cur--;\n        }\n\n        //3.开始数据处理\n        while(cur >= 0)\n        {\n            if(arr[cur]) arr[dest--] = arr[cur];\n\n            if(arr[cur] == 0)\n            {\n                arr[dest--] = 0;\n                arr[dest--] = 0;\n            }\n\n            cur--;\n        }\n    }\n};\n```\n\n【**个人思考**】:在需要判断和修改数组元素的问题中，通常会想到双指针方法。但若从左到右遍历，可能会导致数据覆盖，从而影响结果。对此，不妨尝试调整遍历方向，说不定会带来意想不到的优化效果。\n\n*** ** * ** ***\n\n### {#font_colorcornflowerblue202font_199}202.快乐数\\[快慢指针\\]\n\n【**题目展示** 】：[202.快乐数](https://leetcode.cn/problems/happy-number/description/)\n\n![88327bc26c3f410aa9d179cd98397280.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/3bb56ce3-8f3d-48cd-849e-6e8c678dbcd6_88327bc26c3f410aa9d179cd98397280.png)\n> 示例 1：\n>\n> * 输入：n = 19\n> * 输出：true\n>\n> 解释：\n>\n> * 12 + 92 = 82\n> * 82 + 22 = 68\n> * 62 + 82 = 100\n> * 12 + 02 + 02 = 1\n>\n> 示例 2：\n>\n> * 输入：n = 2\n> * 输出：false\n\n**【算法思路】**\n\n**1.是否为闭环**\n\n如果题目中没有提示\"重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1\"，那么我们必须额外判断以下三种情况，以确保程序能够正确终止：\n> * 【**情况一**】:一直在 1中死循环，即1-\\>1-\\>1\n> * 【**情况二**】:在历史的数据中死循环，但始终变不到1\n> * 【**情况三**】：单路线不断变化新数字，不是死循环\n\n**2.闭环会限制变化的范围**\n\n因此，我们需要判断该数在变化过程中是否会形成闭环。形成闭环意味着至少会重复出现一次相同的数，此时数值变化的范围已被锁定。\n\n**3.证明鸽巢原理:**\n\n**鸽巢原理**:n个巢，n + 1个鸽，至少有一个巢，里面的鸽数大于1，必有一个重复。那么意味着，只需要确定了\\[1, n\\]范围，就说明到n + 1必有一个重复的。而这个最大的n，是可以通过一个最大数去推。\n\n**数据范围** :`1 <= n <= 231 - 1`,选一个更大的数`9999999999`。通过变化的最大值9\\^2 \\* 10 = 810，那么变化的区间在\\[1, 810\\]之间。这里是通过最大数推导出可能的最大变化范围，但实际最大值 810 本身并不包含在内。\n\n根据鸽巢原理，当一个数变化到811次之后，必然会形成一个循环。\\*\\*当形成一个闭环时，可以使用我们的快慢指针解决。\\*\\*因为1形成的闭环，里面全是1。\n\n【**具体步骤**】：\n\n* 当快慢指针相遇，相遇位置的值是1，那么这个数一定是快乐数\n\n* 当快慢指针相遇，相遇位置的值不是1，那么这个数不是快乐数\n\n【**代码展示**】：\n\n```js\n\n\nclass Solution \n{\npublic:\n\n    int sum(int n)\n    {\n        int ret = 0;\n        while(n)\n        {\n            int tmp = n % 10;\n            ret += tmp * tmp;\n            n/=10;\n        }\n        return ret;\n    }\n    bool isHappy(int n) \n    {\n        //定义快慢指针\n        int slow = n;\n        int fast = sum(n);\n        while(slow != fast)\n        {\n            slow = sum(slow);\n            fast = sum(sum(fast));\n        }\n        return slow == 1;\n    }\n};\n```\n\n【**个人思考**】:在这个问题中，我们需要根据需求特性判断是否形成闭环，而闭环的判断条件就是是否出现重复数。最初，这个思路并不容易想到，但可以借助鸽巢原理，通过数据的最大值来推导可能的变化范围。\\*\\*因此，在求解范围时，可以考虑是否能利用数据的最大值来确定 n的界限。\\*\\*闭环会限制变化的范围。\n\n*** ** * ** ***\n\n### {#font_colorcornflowerblue11font_289}11.盛水最多容器\\[对撞指针、单调性\\]\n\n【**题目展示** 】：盛水最多容器\n\n![a203efcf5f1c4a68b40282fe41522595.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/328d223b-f11d-4a12-8c43-989eff1e9a08_a203efcf5f1c4a68b40282fe41522595.png)\n> * 输入：\\[1,8,6,2,5,4,8,3,7\\]\n> * 输出：49\n> * 解释：图中垂直线代表输入数组 \\[1,8,6,2,5,4,8,3,7\\]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49\n\n![3ebbdc35775143bdac04472311ebb938.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/613efcb2-40df-4f3b-9701-906b0edd4e83_3ebbdc35775143bdac04472311ebb938.png)\n\n【**题目解析**】：\n\n**1.解法一:暴力求解(会超时)**\n\n枚举出能构成的所有容器，找出其中容积最⼤的值，直接两层for循环，枚举能构成容器的体积，求得最大值。\n\n代码展示:\n\n```js\n\n\nclass Solution \n{\npublic:\n	int maxArea(vector<int>& height) \n	{\n		int n = height.size();\n		int ret = 0;\n		// 两层 for 枚举出所有可能出现的情况\n	for (int i = 0; i < n; i++)\n    {\n		for (int j = i + 1; j < n; j++) \n			{\n				// 计算容积，找出最⼤的那⼀个\n				ret = max(ret, min(height[i], height[j]) * (j - i));\n				}\n		}\n    return ret;\n}\n};\n```\n\n**2.解法二:对撞指针**\n\n【**算法思路**】\n\n首先，我们需要理解如何计算容器的体积。通过设置 `left` 和 `right` 两个指针，分别指向容器的左边和右边，然后根据短板效应来决定水的高度，即水的高度由两边中较短的那块木板决定。\n\n公式：\n\n```js\n\n\nint v =  min(higth[left], higth[right]) * (right - left);\n\n```\n\n这里 `v` 代表容器的体积，其中有两个变量控制体积：`height` 和 `width`。`height` 是水的高度，`width` 是容器的宽度。\n\n假设左边木板比右边木板短（即短板在左边），我们可以从这里分析水的容积变化。(这步骤可以暂时省去很多考虑)\n\n**容积变化的分析**：\n\n1. **容器的宽度会变小**   \n   无论我们如何调整左或右边界，容器的宽度始终会减小（`wide ↓`），这意味着容积的变化必然受到宽度减少的影响。\n2. **移动左边界（短木板）**   \n   改变左边界(短木板)，由于左边界较小，新的水面高度不确定，但是不会超过右边界的高度，因此容器的容积可能会增大，导致`v（未知） = w↓ * h（未知，可以增大）`\n3. **移动右边界（长木板）**   \n   由于右边界较大，无论有边界移动到哪里，新的水面高度一定不会超过左边界，意味着当前高度h不变，由于宽度不断变小，对于容积一定会变小的。`v↓ = w↓ * h（↓ 或者 不变）`\n\n![f76777ada1ca4166875fbfea60f3756d.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/68181488-bcf3-4e20-8603-fe47ffda2c47_f76777ada1ca4166875fbfea60f3756d.png)\n\n当我们移动短木板，这里因为h的不确定性，导致了容积可大可小。对此，当我们记录完一个区间的体积，**将短木板往长木板靠拢，不间断判断下一个边界情况，不断刷新最大的容积**。\n\n【**代码展示**】：\n\n```js\n\n\nclass Solution \n{\npublic:\n    int maxArea(vector<int>& height) \n    {\n        //需要取最小的数据\n        int left = 0;\n        int right = height.size() - 1;\n        int ret = 0;\n        while(left < right)\n        {\n            //算体积\n            int v = min(height[left],height[right])*(right - left);\n            \n            //更新最大的体积\n            ret = max(ret, v);\n            \n            if(height[left] <= height[right])  left++;\n            else right--;\n        }\n        return ret;\n    }\n};\n```\n\n【**个人思考**】：**遇到这类涉及公式计算最值的问题时，可以利用单调性来简化分析**。关键在于如何选择移动边界：移动长木板时，容积必然减小，而移动短木板时，容积变化不确定，但有可能增大。\n\n本质上，**问题的核心是利用单调性，从大到小向内枚举，逐步更新容积**。每次移动边界时，更新容积并与当前最大值进行比较，最终得到最大的容积。\n\n*** ** * ** ***\n\n### {#font_colorcornflowerblue611font_396}611.有效三角形的个数\\[对撞指针、单调性\\]\n\n【**题目展示** 】：[611.有效三角形的个数](https://leetcode.cn/problems/valid-triangle-number/)\n\n![9ae0408c18954864a4cf6fe137320a9b.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/8a428a3e-4de3-43c7-ba68-3eecf13776d2_9ae0408c18954864a4cf6fe137320a9b.png)\n> * 输入: nums = \\[2,2,3,4\\]\n> * 输出: 3\n> 解释:有效的组合是:\n>\n> * 2,3,4 (使用第一个 2)\n> * 2,3,4 (使用第二个 2)\n> * 2,2,3\n\n【**算法思路**】\n\n**1.数学知识：如何通过三个数，判断是否能构成三角形**\n\n```js\n\n只需要两边之和大于第三边\n    a + b > c\n    a + c > b\n    b + c > a\n```\n\n**2.解法一：暴力解法**\n\n通过暴力枚举法，可以使用三层for循环遍历所有可能的三角形数据，记录并筛选出符合条件的组合。\n\n```js\n\n	 for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                check(i, j , k);\n```\n\n通过数学优化，当`a <= b <= c`时，判断三角形成立只需验证`a + b > c`。因为在这种情况下，`c`是最大的，`a + c`和`b + c`必然大于另一个边。优化步骤：首先对数组进行排序，得到有序数组。\n\n**时间复杂度**\n\n没有进行优化，三层for循环的时间复杂度就是`O(3N^3^)`。如果进行了优化，时间复杂度就是`O(NlogN + N^3^)`。虽然时间复杂度是取主要影响的变量，但是不管如何，这里进行了优化的情况下，时间复杂度是得到了优化，同时处理数据方面也是得到改善。\n\n**2.解法二:对撞指针**\n> 提示：借鉴上次容积问题的思路，\\*\\*当根据公式或表达式判断条件时，可以利用单调性优化。\\*\\*通过固定最大数，并使用`left`和`right`指针指向左右两端，避免枚举。类似容积问题，从左到右或从右到左的差异源自数据大小顺序，影响判断条件的判断效率。\n\n![894250985bd84c7b8f356e3f2301f1bc.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/8bf38456-9e97-4440-81ca-f4b12d144137_894250985bd84c7b8f356e3f2301f1bc.png)\n\n通过设置两个变量作为边界，首先判断`a + b`是否大于`c`。如果`a + b > c`，那么从左到右时，`a + b`会始终大于`c`，无需再继续枚举；从右到左时，`a + b`的大小关系不确定，因此需要保留这个操作进行整体判断。如果`a + b <= c`，则从右到左会使`b`变小，导致无法满足条件，因此需要移动`left`，使得`a + b`不断逼近并超过`c`。在此过程中，`left`和`right`会不断调整，因此需要在循环内进行相应的更新。\n\n这里的 `sum += right - left` 表示以 `right` 为边界时，所有满足条件的组合数量。\n\n![326457348abe41f881799232c987de54.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/14b63785-a839-4a04-a64d-fce57c2dd111_326457348abe41f881799232c987de54.png)\n\n【**代码展示**】：\n\n```js\n\nclass Solution \n{\npublic:\n    int triangleNumber(vector<int>& nums)\n    {\n      sort(nums.begin(), nums.end());\n        int n = nums.size();\n        int sum = 0;\n        for(int i = n - 1; i >=2; i--)\n        {\n            int left = 0, right = i - 1;\n            while(left < right)\n            {\n                if(nums[left] + nums[right] > nums[i]) \n                {\n                    sum+=right - left;\n                    right--;\n                }\n                else left++;\n            }\n        }\n        return sum;\n    }\n};\n```\n\n*** ** * ** ***\n\n### {#font_colorcornflowerblue179sfont_486}179.和为s的两个数字\\[对撞指针、单调性\\]\n\n【**题目展示** 】：[179.和为s的两个数字(原题目)](https://leetcode.cn/problems/he-wei-sde-liang-ge-shu-zi-lcof/description/))\n\n![29bdc0503e114843aea79f54d21c8990.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/e421c2ca-d239-47ff-9886-102d1728c190_29bdc0503e114843aea79f54d21c8990.png)\n> * 输入：price = \\[3, 9, 12, 15\\], target = 18\n> * 输出：\\[3,15\\] 或者 \\[15,3\\]\n\n【**算法思路**】\n\n这道题属于基础题，主要考察双指针法在单调性匹配中的应用。关键是判断 `left + right == target`。\n\n![af8df8b29e59448793dd35c8fcc8915e.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/0493a97d-c43f-4268-a704-03813fc7a0c2_af8df8b29e59448793dd35c8fcc8915e.png)\n\n对于 `left + right ? target`，共有三种情况。通过利用单调性，依据 `left` 和 `right` 指向的数据关系，调整它们的位置以达到目标。\n\n![9e4caf3d12204d00963ce7c8ac970790.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/562ec37b-1566-47a6-b11a-107f8d8a801a_9e4caf3d12204d00963ce7c8ac970790.png)\n\n【**代码展示**】\n\n```js\n\n\nclass Solution \n{\npublic:\n    vector<int> twoSum(vector<int>& price, int target) \n    {\n        int left = 0, right = price.size() - 1;\n        \n        while(left < right)\n        {\n            int sum = price[left] + price[right];\n\n            //连续判断还是写else if分支语句\n            if(sum > target) right--;\n            else if(sum < target) left++;\n            else return {price[left], price[right]};\n        }\n        //为了照护编译器，通过返回-1\n        return {-1, -1};\n    }\n};\n\n```\n\n*** ** * ** ***\n\n### {#font_colorcornflowerblue15font_535}15.三数之和\\[对撞指针、单调性\\]\n\n【**题目展示** 】：[15.三数之和](https://leetcode.cn/problems/3sum/description/)\n\n![45abe5a2e65b4053ad2990a16d55408a.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/59e0a5f9-b729-40cc-81b4-029dd070996f_45abe5a2e65b4053ad2990a16d55408a.png)\n\n```js\n\n\n输入：nums = [-1,0,1,2,-1,-4]\n输出：[[-1,-1,2],[-1,0,1]]\n解释：\nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。\n不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。\n注意，输出的顺序和三元组的顺序并不重要。\n\n```\n\n首先分析题目给出的信息，注意到题目没有明确说明是否允许重复三元组。因此，需要通过实例来推断是否存在重复三元组的情况。  \n![39d73a845176457a92a2dfc207ba2c58.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/acf87efa-8327-4bd2-83d7-61565b73744a_39d73a845176457a92a2dfc207ba2c58.png)\n\n题目中说明三元组的顺序不重要，因此我们关注的是数据是否重复。通过例子 `[-1, 0, 1]`、`[0, 1, -1]` 和 `[-1, 1, 0]`，我们可以发现这些是重复的三元组。为了简化判断，可以统一将三元组排序为 \\[-1, 0, 1\\]，通过排序来优化，**避免不必要的重复判断**。\n\n**3.解法一:排序 + 暴力枚举 + 利用set去重:时间复杂度O(N^3^)**\n\n![f7387b2994b74db29e653800a3c1e4b4.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/021dea31-1f9b-4033-b770-29c5c77be5cc_f7387b2994b74db29e653800a3c1e4b4.png)\n\n**4.解法二:对撞指针**\n\n根据题目需求，我们需要统计满足 `nums[a] + nums[left] + nums[right] == 0` 的三元组。可以将其转化为 `nums[left] + nums[right] = -nums[a]`，这意味着当 `nums[left] + nums[right]` 等于 `nums[a]` 的相反数时，条件成立。通过固定一个数值并移动两个边界，我们能够减少不必要的枚举次数。\n\n【**个人思考**】：这个问题和两数之和的单调性问题类似，只需固定一个数并让另两个数的和等于目标值，之后通过调整左右指针来查找所有满足条件的组合。\n\n【**细节问题**】\n\n![2ef326a50e8d4c729481ad88d1772d3e.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/4507758c-05ac-4247-9648-25fd3034d992_2ef326a50e8d4c729481ad88d1772d3e.png)\n\n如果使用 `set` 来去重，则需要额外的时间来插入和查找每个元素，时间复杂度为 `O(log n)`。我们通过排序的方法，将`[-1, 0, 1]、[0, 1, -1]、[-1, 1, 0]`重复的数据统一变成了`[-1, 0, 1]`的形式，但是重复的数据，我们是不需要的。固定一个数，当`left`和`right`指向位置符合要求后，就需要考虑重复问题，进行去重操作。当然不止`left`和`right`需要去重，固定的数据也需要完成去重操作，避免越界`[0, 0, 0, 0]`。\n\n![8cd619ffefe24de8bffbd0ea07fa7c5c.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/f803d3e8-16b0-45c7-b0ad-8470f99e418a_8cd619ffefe24de8bffbd0ea07fa7c5c.png)\n\n【**代码展示**】\n\n```js\n\n\nclass Solution\n{\n    public:\n    vector<vector<int>> threeSum(vector<int>& nums) \n    {\n        vector<vector<int>> v;\n\n        // -3 -2 -1\n        //排序下\n        sort(nums.begin(), nums.end());\n        int n = nums.size();\n        for(int i = 0; i < n - 2 ;  )\n        {\n            \n            //不存在 nums[]+nums[] = minPositive_nums[i]\n            if(nums[i] > 0) break;\n\n            int left = i + 1, right =  n - 1;\n            int target = -nums[i];\n\n            while(left < right)\n            {\n                int sum = nums[left] + nums[right];\n                if(sum > target) right--;\n                else if(sum < target) left++;\n                else\n                {\n                    //初始化列表自动转为vector<int>类型\n                    v.push_back({nums[left], nums[right], nums[i]});\n                    left++;right--;\n                    //去重判断\n                    while(left < right && nums[left] == nums[left - 1]) left++;\n                    while(left < right && nums[right] == nums[right + 1]) right--;\n                }\n            }\n\n            //去重操作\n            //这里会到导致判断时，造成越界访问\n            //while(nums[i] == nums[i + 1]) i++;\n            i++;\n            ///关于越界访问，需要判断循环逻辑是否有问题。\n            while(i < n && nums[i] == nums[i - 1]) i++;\n        }\n        return v;\n    }\n\n```\n\n*** ** * ** ***\n\n### {#font_colorcornflowerblue18Plusfont_629}18.四数之和(三数之和Plus)\\[对撞指针、单调性\\]\n\n【**题目展示** 】：[18.四数之和](https://leetcode.cn/problems/4sum/submissions/597939657/)\n\n![68ebff45d7c44065b5e1ad9b49d52712.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/436227b0-b06e-4cc3-acc5-1b2f3af9a1ff_68ebff45d7c44065b5e1ad9b49d52712.png)\n\n```js\n\n输入：nums = [1,0,-1,0,-2,2], target = 0\n输出：[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\n```\n\n【**算法思路**】\n\n这里同样的，按照题目要求可以得到一个表达式`nums[a] + nums[b] + nums[left] + nums[right] == target`,按照我们熟悉的解法，我们是通过固定一个数，以left和right两个数作为边界向内进行查找。但是这里多出了一个数，那么不妨可以这样` nums[b] + nums[left] + nums[right] == target - nums[a]`，跟三数之和题目不是一样了吗？这里多次一个数的意义，就是多了一层循环。\n\n**1.解法一:排序 + 暴力枚举 + 利用set去重 时间复杂度O(N^4^)**\n\n**2.解法二:对撞指针**\n\n![0538fb10d81c48a19edbdefc3b7d1fdd.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/5d4526eb-2184-45a6-b47f-c09a24ff7ee8_0538fb10d81c48a19edbdefc3b7d1fdd.png)\n\n【**问题：栈溢出**】\n\n![9737a09a647d49ab8145d2ed4e08b400.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/561811ab-8470-4e55-b23f-37a19b155617_9737a09a647d49ab8145d2ed4e08b400.png)\n\n对此这里需要考虑数据的范围将`dest`和`target`类型转化为`long long`\n\n【**代码展示**】\n\n```js\n\n\nclass Solution \n{\n    public:\n    vector<vector<int>> fourSum(vector<int>& nums, int target) \n    {\n        //-4 - 3 -2 -1\n        sort(nums.begin(), nums.end());\n\n        int n = nums.size();\n        vector<vector<int>> v;\n        for(int i = 0; i < n - 3;)\n        {\n            for(int j = i + 1; j < n - 2;)\n            {\n                //新的目标数\n                long long dest = (long long)target - nums[i] - nums[j];\n                int left = j + 1, right = n - 1;\n                while(left < right)\n                {\n                    int sum = nums[left] + nums[right];\n                    if(sum > dest) right--;\n                    else if(sum < dest) left++;\n                    else\n                    {\n                        v.push_back({nums[i], nums[j], nums[left], nums[right]});\n                        left++;right--;\n                        //去重操作\n                        while(left < right && nums[left] == nums[left - 1]) left++;\n                        while(left < right && nums[right] == nums[right + 1]) right--;\n                    }\n                }\n                j++;\n                while(j < n - 2 && nums[j] == nums[j - 1])  j++;\n            }\n            i++;\n            while(i < n - 3 && nums[i] == nums[i - 1])  i++;\n        }\n        return v;\n    }\n};\n\n```\n\n',1,0,1,0,0,0,'https://blog.csdn.net/2302_79177254/article/details/147440344?spm=1000.2115.3001.10524',0,NULL,NULL,'2025-05-16 16:47:04','2025-07-08 22:55:11'),(308,1,44,'与终端同居日记：Linux指令の进阶撩拨手册','http://113.45.240.54:9092/article-cover/3f14531f-582b-43a2-a645-c526f7ef635f_freecompress-Neat-Admin 管理系统 (7).png','Linux','<h3><a id=\"_content_views_0\"></a>前情提要： {#content_views}</h3>\n<p>当你和终端的关系从「早安打卡」进阶到「深夜代码同居」，那些曾经高冷的指令开始展露<strong>致命の反差萌</strong>------</p>\n<ul>\n<li>\n<p><strong><code>man</code></strong> 是那个永远在线的钢铁直男说明书，只会说：“想懂我？自己看文档！”（但你不得不承认，他的确随叫随到）</p>\n</li>\n<li>\n<p><strong><code>mv</code></strong> 像极了热衷搬家的前任，能把你的青春回忆从 <code>/home/初恋</code> 一键转移到 <code>/tmp/心碎回收站</code></p>\n</li>\n<li>\n<p><strong><code>nano</code></strong> 是初恋记事本，虽然功能朴素，但总在 <code>Ctrl+X</code> 时温柔问你：“要保存这份心动吗？”</p>\n</li>\n</ul>\n<hr />\n<h4><a id=\"_12\"></a><strong>本季同居守则</strong>：</h4>\n<h5><a id=\"1__14\"></a><strong>1. 暧昧期必杀技：指令界的「情感翻译官」</strong></h5>\n<ul>\n<li>\n<p><strong><code>echo &quot;今晚月色真美&quot; &gt; 告白.txt</code></strong></p>\n<ul>\n<li>直男式浪漫：用重定向符 <code>&gt;</code> 把心跳声写入文本（副作用：覆盖式表白可能引发 <code>IOError: 已读不回</code>）</li>\n</ul>\n</li>\n<li>\n<p><strong><code>cat 日记.log | grep &quot;crush&quot;</code></strong></p>\n<ul>\n<li>在百万行的生活日志里，精准捕捞那个TA出现的瞬间（警告：可能挖出黑历史导致 <code>段错误</code>）</li>\n</ul>\n</li>\n</ul>\n<h5><a id=\"2__24\"></a><strong>2. 危险关系の艺术：文件界的「替身文学」</strong></h5>\n<ul>\n<li>\n<p><strong><code>cp -r 前任/ 新欢/ --小心心备份=all</code></strong></p>\n<ul>\n<li>海王の觉悟：用递归复制保留所有纪念品（但 <code>diff</code> 会无情揭穿：“新欢和前任的md5一模一样！”）</li>\n</ul>\n</li>\n<li>\n<p><strong><code>which python</code></strong></p>\n<ul>\n<li>鉴渣神器：查清那个口口声声说只爱你一人的Python，到底在 <code>/usr/bin</code> 藏了多少个版本备胎</li>\n</ul>\n</li>\n</ul>\n<h5><a id=\"3_PUA_34\"></a><strong>3. 终极灵魂拷问：当指令学会PUA</strong></h5>\n<ul>\n<li>\n<p><strong><code>man 爱情</code></strong></p>\n<ul>\n<li>系统冷冰冰地提示：<code>No manual entry for 爱情</code>（但偷偷用 <code>apropos 心动</code> 能搜到隐藏章节）</li>\n</ul>\n</li>\n<li>\n<p><strong><code>sudo rm -rf 犹豫/</code></strong></p>\n<ul>\n<li>用管理员权限删除所有迟疑（副作用：可能误删 <code>/未来/承诺</code> 目录）</li>\n</ul>\n</li>\n</ul>\n<hr />\n<h4><a id=\"_46\"></a><strong>新手指南：同居必备神器</strong></h4>\n<ul>\n<li>\n<p><strong><code>nano 分手信.txt</code></strong></p>\n<ul>\n<li>用最朴素的编辑器写下最痛的句子（若手抖按了 <code>Ctrl+S</code>，请速用 <code>mv 分手信.txt /dev/null</code> 撤回）</li>\n</ul>\n</li>\n<li>\n<p><strong><code>man 7 恋爱哲学</code></strong></p>\n<ul>\n<li>\n<p>隐藏章节揭示真理：</p>\n<pre><code class=\"lang-\">爱情 ≈ 管道符 |   \n你的输出必须是我的输入  \n但永远不要用 &gt; 覆盖对方的灵魂  \n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<hr />\n<p><strong>现在，深呼吸</strong> <strong>在终端敲下这封加密情书</strong>：</p>\n<pre><code class=\"lang-\">echo &quot;SSBsb3ZlIHlvdSAK&quot; | base64 -d  \n</code></pre>\n<p><strong>让Linux告诉你------</strong> <strong>有些指令不需要手册，因为心跳的源码早已开源</strong> 💻💓</p>\n<h3><a id=\"1man_72\"></a>1.man指令</h3>\n<h4><a id=\"11manLinux_74\"></a>1.1.man指令是什么：Linux的百科知识全书</h4>\n<p>可能当很多小伙伴看到这个指令名字的时候，脑袋里会浮现出那个男人的身影，并且会想起一个当今比较热门的梗：man！当然，这个指令和这些可是没有任何关系，man指令可以说是一个比较热门的指令，因为我们会在学习Linux的时候多次使用到它，它其实就是一个Linux的知识百科全书。</p>\n<h4><a id=\"12man_78\"></a>1.2.man指令的用法：一看就懂</h4>\n<p>man指令的语法很简单，首先我们想要可以用man指令查man指令的用法，它的语法如下：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">man man  <span class=\"hljs-comment\">#这样就可以知道man的用法</span>\n</code></div></pre>\n<p><img src=\"https://i-blog.csdnimg.cn/direct/93508a1c424d4aa98df6b7f509d63caf.png\" alt=\"\" /></p>\n<p>这里就可以看到上面显示的man函数的功能，其实它的核心主要是在中间的部分，就是数字对应的部分，每一个数字代表着它所含有的工作，这里小编就给大家搜索了相关的资料，告知各位这些数字代表的含义：</p>\n<table>\n<thead>\n<tr>\n<th>章节号</th>\n<th>内容类型</th>\n<th>示例命令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>1</strong></td>\n<td>用户命令（普通用户可执行）</td>\n<td><code>man 1 ls</code></td>\n</tr>\n<tr>\n<td><strong>2</strong></td>\n<td>系统调用</td>\n<td><code>man 2 fork</code></td>\n</tr>\n<tr>\n<td><strong>3</strong></td>\n<td>C 库函数</td>\n<td><code>man 3 malloc</code></td>\n</tr>\n<tr>\n<td><strong>4</strong></td>\n<td>设备文件和特殊文件</td>\n<td><code>man 4 null</code>（/dev/null 设备）</td>\n</tr>\n<tr>\n<td><strong>5</strong></td>\n<td>配置文件格式</td>\n<td><code>man 5 fstab</code></td>\n</tr>\n<tr>\n<td><strong>6</strong></td>\n<td>游戏和屏保程序</td>\n<td><code>man 6 tetris</code></td>\n</tr>\n<tr>\n<td><strong>7</strong></td>\n<td>杂项（协议、文件系统等）</td>\n<td><code>man 7 tcp</code></td>\n</tr>\n<tr>\n<td><strong>8</strong></td>\n<td>系统管理命令（需 root 权限）</td>\n<td><code>man 8 iptables</code></td>\n</tr>\n<tr>\n<td><strong>9</strong></td>\n<td>内核相关文档</td>\n<td><code>man 9 syscalls</code></td>\n</tr>\n</tbody>\n</table>\n<p>上面就是对于man函数的使用，各位读者以后遇到函数不会用的问题，完全可以通过man函数来帮助我们相关函数的查找，而不用再去一些平台找相关的解释了。</p>\n<h4><a id=\"13man_104\"></a>1.3.man指令可能出现的错误</h4>\n<p>在我们使用man函数的时候，我们可能想要使用man 3 printf的指令，可能部分读者无法使用这个功能，这是因为部分云服务器删减了不少内容，这个手册相关的内容也进行了删除（因为保证功能太多而浪费掉），所以可以用下面这个指令把这个手册下回来：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">yum install -y man-pages  <span class=\"hljs-comment\">#这样就可以使用3的功能了</span>\n</code></div></pre>\n<h3><a id=\"2echo_112\"></a>2.echo指令</h3>\n<h4><a id=\"1echoLinux__114\"></a>1.echo：Linux 界的「复读机」，但比鹦鹉靠谱！</h4>\n<p>echo指令实际上算是Linux中最没有&quot;存在感&quot;但确实常常被使用的指令了，因为它的功能实际上是很简单的，它的名字听起来像在说：「欸，我在呢！」（Echo：回音），但它的真实身份其实是<strong>命令行界的复读机</strong> 。它的任务很简单：<strong>你喂它什么，它就吐什么</strong>。但别小看它！这货可是隐藏了无数骚操作的宝藏工具（就比如之后让我难受好几天的重定向操作）。</p>\n<h4><a id=\"2echohello_world_118\"></a>2.echo的用法：比&quot;hello world&quot;还简单</h4>\n<p>它的用法很经典，如果你给它说：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;我是以后的技术大佬！&quot;</span> <span class=\"hljs-comment\">#这个引号可以不加，纯纯的写C++习惯了，看到个字符串默认&quot;&quot;</span>\n</code></div></pre>\n<p>它给你回：</p>\n<p><img src=\"https://i-blog.csdnimg.cn/direct/0219ea482ffd42ce9a01d4d8664a8856.png\" alt=\"\" /></p>\n<h4><a id=\"3echo___130\"></a>3.高级玩法：echo の 魔法时刻</h4>\n<p><strong>1. 自带弹幕特效（颜色和格式）</strong></p>\n<p>想让终端输出五彩斑斓的黑？加个「魔法参数」<code>-e</code> 就能解锁转义符！</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">&quot;\\033[31m红色警告：\\033[0m 你的咖啡已空！&quot;</span>\n</code></div></pre>\n<p>效果：</p>\n<p><img src=\"https://i-blog.csdnimg.cn/direct/28c50c31f4bd42a5a4fa8db6f8737595.png\" alt=\"\" /></p>\n<hr />\n<p><strong>2. 制造混乱（生成奇葩文件）</strong></p>\n<p>想快速创建一个文件并写入内容？</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;老板说要写周报，但我觉得他在画饼&quot;</span> &gt; weekly_report.txt\n</code></div></pre>\n<p>（<code>&gt;</code> 表示把输出<strong>重定向</strong>到文件，相当于让 echo 当秘书帮你写文档。关于重定向，我以后会详细说说这玩意，难度还是不小的，在大约我讲到文件的部分时，我会进行一个重定向代码的书写）</p>\n<hr />\n<p><strong>3. 哲学の质问（输出变量）</strong></p>\n<p>Linux 有很多自带「人生哲理」变量，比如 <code>$USER</code>（你是谁）、<code>$HOME</code>（你家在哪）：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;你是 <span class=\"hljs-variable\">$USER</span>，此刻正躲在 <span class=\"hljs-variable\">$HOME</span> 里摸鱼。&quot;</span> <span class=\"hljs-comment\">#这些其实就是后来我会讲的环境变量</span>\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">你是 alice，此刻正躲在 /home/alice 里摸鱼。\n</code></div></pre>\n<p>（扎心了，echo。）</p>\n<hr />\n<p><strong>4. 无声胜有声（不换行输出）</strong></p>\n<p>默认 <code>echo</code> 会在结尾加个换行符，像个礼貌的客服。但如果你想当个「叛逆青年」，用 <code>-n</code> 参数让它闭嘴：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">echo</span> -n <span class=\"hljs-string\">&quot;正在加载......&quot;</span>\n<span class=\"hljs-built_in\">sleep</span> 2\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;加载了个寂寞！&quot;</span>\n</code></div></pre>\n<p>效果：两句话会连在一起，假装在加载（实则摸鱼）。</p>\n<hr />\n<h5><a id=\"echo__188\"></a><strong>echo 的冷知识</strong></h5>\n<ul>\n<li>\n<p><strong>「我到底说了啥？」</strong> 如果输入 <code>echo *</code>，它会列出当前目录所有文件（因为 <code>*</code> 被 Shell 先解析了）。 如果想原样输出 <code>*</code>，请用单引号：<code>echo \'*\'</code>（单引号是「封印」，防止 Shell 搞事）。</p>\n</li>\n<li>\n<p><strong>「Windows 用户别学我！」</strong> Windows 的 <code>echo</code> 是另一个物种，比如 <code>echo %PATH%</code>，但功能远不如 Linux 的优雅。（手动狗头）</p>\n</li>\n</ul>\n<hr />\n<h5><a id=\"echo__196\"></a><strong>总结：echo 的「人生信条」</strong></h5>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;人生苦短，我用 echo。&quot;</span>\n</code></div></pre>\n<p>简单、直接、不废话------这就是 <code>echo</code> 的极客哲学。下次写脚本时，记得让这个「复读机」帮你喊话、写文件、甚至假装在工作！（老板看不到的，放心。）</p>\n<h3><a id=\"3cat_204\"></a>3.cat指令</h3>\n<h4><a id=\"31catLinux__206\"></a>3.1.cat：Linux 界的「文件魔术师」，但比你家猫还好奇！</h4>\n<p>它的全名是 <code>concatenate</code>（拼接），但别被这名字吓到，它其实是<strong>文件界的瑞士军刀</strong> 。任务就一条：<strong>把文件内容「喵」给你看</strong>！但它不仅能看文件，还能玩拼接、装高冷、甚至倒放人生…（误）</p>\n<h4><a id=\"32_210\"></a>3.2.基础用法：喵星人的偷窥欲</h4>\n<p>如果你对它说：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">cat</span> 日记.txt  <span class=\"hljs-comment\">#假设文件里面有内容</span>\n</code></div></pre>\n<p>它会立刻把文件内容摊在屏幕上：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">2023年10月1日：今天学会了用<span class=\"hljs-built_in\">cat</span>，感觉自己像个黑客！\n</code></div></pre>\n<h4><a id=\"33cat___224\"></a>3.3.高级玩法：cat の 九条命</h4>\n<h5><a id=\"1_226\"></a>1.合并文件的魔法（文件拼接）</h5>\n<p>想合并两个文件？<code>cat</code> 表示：「给我两片小鱼干（文件），还你一条大鱼！」</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">2023年10月1日：今天学会了用<span class=\"hljs-built_in\">cat</span>，感觉自己像个黑客！\n</code></div></pre>\n<p>（<code>&gt;</code> 表示把合并结果存到新文件，建议别轻易尝试合并「前半生」和「后半生」，容易引发哲学危机。）</p>\n<h5><a id=\"2_236\"></a>2.高冷模式（显示行号）</h5>\n<p>想让 <code>cat</code> 装高冷学霸？加 <code>-n</code> 参数，连行号都给你标好！</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">cat</span> -n 代码.c\n</code></div></pre>\n<p>输出：</p>\n<pre><div class=\"hljs\"><code class=\"lang-cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;摸鱼.h&gt;</span>  <span class=\"hljs-comment\">//开个玩笑的~头文件要好好的写哦~</span></span>\n<span class=\"hljs-number\">2</span>  <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n<span class=\"hljs-number\">3</span>      <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;世界你好，但我不想动！&quot;</span>);\n<span class=\"hljs-number\">4</span>  }\n</code></div></pre>\n<p>（行号暴露了你代码里的摸鱼痕迹…）</p>\n<h5><a id=\"3_255\"></a>3.倒放人生（反向输出）</h5>\n<p>哦不，是反向输出！用 <code>tac</code>（cat 倒过来）指令：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">tac</span> 日记.txt\n</code></div></pre>\n<p>输出：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">2023年10月1日：今天学会了用<span class=\"hljs-built_in\">cat</span>，感觉自己像个黑客！\n</code></div></pre>\n<p>看起来没变化？因为这日记只有一行…建议写长点再试！）</p>\n<h5><a id=\"4_271\"></a>4.无中生有（快速创建文件）</h5>\n<p>懒人必备！用 <code>cat</code> 直接键盘输入内容：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">cat</span> &gt; 紧急备忘录.txt &lt;&lt; <span class=\"hljs-string\">EOF\n1. 买咖啡\n2. 假装在工作\n3. 用cat查看老板的日程（划掉）\nEOF</span>\n</code></div></pre>\n<p>（按 <code>Ctrl+D</code> 保存，深藏功与名。）</p>\n<h5><a id=\"cat__285\"></a><strong>cat 的冷知识</strong></h5>\n<ul>\n<li>\n<p><strong>「别拿我当铲屎官！」</strong> 用 <code>cat</code> 查看超大文件（比如日志）时，它会一口气全吐出来，屏幕直接滚成瀑布！【所以我一般不推荐使用cat指令查看大型的文件，不然有你好果汁吃，嘻嘻~】 此时请用 <code>less</code> 或 <code>more</code> 指令，比如 <code>less 巨型日志.log</code>（猫表示：「我累了，换人！」）。【本来想讲这部分的，但我偷个懒，就不写了】</p>\n</li>\n<li>\n<p><strong>「我和狗（dog）有什么关系？」</strong> 有人觉得 <code>cat</code> 不够酷，于是写了 <code>dog</code> 指令（彩色输出+语法高亮），但记住：<strong>狗是猫的加强版，但猫才是原配！</strong>【原配抵不过天降，总觉着哪里不对】</p>\n</li>\n<li>\n<p><strong>「我是管道工的好朋友！」</strong> <code>cat</code> 常和其他指令「勾搭」干活，比如：</p>\n<pre><code class=\"lang-\">cat 日志.log | grep &quot;error&quot;  # 过滤所有报错（摸鱼时快速甩锅用）\n</code></pre>\n</li>\n</ul>\n<h4><a id=\"cat__297\"></a><strong>总结：cat 的「喵生信条」</strong></h4>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">cat</span> &lt;&lt; <span class=\"hljs-string\">EOF\n猫有九条命，\ncat 有九种用法。\n------ 但第九种通常是老板没教你的那个！\nEOF</span>\n</code></div></pre>\n<p>简单、灵活、好奇心爆棚------这就是 <code>cat</code> 的极客精神。下次遇到文件时，记得召唤这只「好奇猫」，但别让它看到你的浏览器历史记录！（手动狗头）</p>\n<h3><a id=\"4cp_309\"></a>4.cp指令</h3>\n<h4><a id=\"41cpLinux__311\"></a>4.1.cp：Linux 界的「文件快递员」，但比搬家小哥更怕丢件！</h4>\n<p><code> cp</code>，全称 <code>copy</code>（复制），它的任务看似简单------<strong>把文件从A地搬到B地</strong>，但这位「文件快递员」的职业生涯充满了血泪史：</p>\n<ul>\n<li>\n<p><strong>搞丢文件？</strong> 当场失业！</p>\n</li>\n<li>\n<p><strong>覆盖文件？</strong> 用户暴走！</p>\n</li>\n<li>\n<p><strong>忘记参数？</strong> 直接emo…</p>\n</li>\n</ul>\n<p>但别慌，学会以下技巧，你就是它的金牌老板！</p>\n<h4><a id=\"42Ctrl_323\"></a>4.2.基础用法：复制粘贴，但不用Ctrl键</h4>\n<p>如果你对 <code>cp</code> 说：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">cp</span> 老板的废话.txt 我的脑子/    <span class=\"hljs-comment\">#要复制的文件到指定的目录下，此时就要结合之前学的目录相关的知识(＾Ｕ＾)ノ~ＹＯ</span>\n</code></div></pre>\n<p>它会默默把文件复制到指定目录，深藏功与名：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">我的脑子/  \n  └── 老板的废话.txt  \n</code></div></pre>\n<p>（但请注意：你的脑子可能会选择性拒绝接收该文件！）</p>\n<h4><a id=\"43cp___340\"></a>4.3.<strong>高级玩法：cp の 反卷指南</strong></h4>\n<h5><a id=\"1_342\"></a>1.<strong>暴力搬家（覆盖文件不提醒）</strong></h5>\n<p>默认 <code>cp</code> 会静默覆盖同名文件，像极了半夜偷偷改代码的你：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">cp</span> 摸鱼攻略.txt 工作日报.txt  <span class=\"hljs-comment\"># 危险动作，请勿模仿！  这样可能会酿成大错哦~~</span>\n</code></div></pre>\n<p>（第二天：老板：「你的日报为什么写着『如何伪装编译错误』？」）</p>\n<h5><a id=\"2_352\"></a>2.求生欲模式（覆盖前询问）</h5>\n<p>怕手滑？加 <code>-i</code> 参数让 <code>cp</code> 变成「纠结狂魔」：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">cp</span> -i 旧简历.txt 新简历.txt  \n</code></div></pre>\n<p>输出：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">cp</span>: overwrite <span class=\"hljs-string\">&#x27;新简历.txt&#x27;</span>? （你丫想好了再按！）  \n</code></div></pre>\n<p>（此时建议输入 <code>n</code> 并火速删除旧简历中的「精通一切」字样。）</p>\n<h5><a id=\"3_368\"></a>3.抄家式复制（递归复制文件夹）</h5>\n<p>想复制整个文件夹？加 <code>-r</code> 参数，让 <code>cp</code> 化身「抄家大队长」：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">cp</span> -r 我的黑历史/ 备份硬盘/  <span class=\"hljs-comment\"># 建议加密后再操作  ，就比如后面我会讲述的文件以及目录的权限</span>\n</code></div></pre>\n<p>（注：<code>-r</code> 表示递归，适用于文件夹。如果失败，可能是你的黑历史太重了…）</p>\n<h5><a id=\"4or_378\"></a>4.强制式复制（强行复制文件or目录）</h5>\n<p>想要强制复制整个文件夹？加 <code>-f</code> 参数，让 <code>cp</code> 化身「强拆大队长」:</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">cp</span> -f 我的白历史/ 公司公共资源/  <span class=\"hljs-comment\">#建议自信后才这么做，不然文件是第一天发的，班是第二天辞的~</span>\n</code></div></pre>\n<h5><a id=\"5_386\"></a>5.戏精附体（显示复制的详情）</h5>\n<p>加 <code>-v</code> 参数，让 <code>cp</code> 实时播报搬家进度：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">cp</span> -v 猫片.jpg 狗片.jpg /表情包/  \n</code></div></pre>\n<p>输出：</p>\n<pre><code class=\"lang-\">\'猫片.jpg\' -&gt; \'/表情包/猫片.jpg\'  \n\'狗片.jpg\' -&gt; \'/表情包/狗片.jpg\'  \n</code></pre>\n<p>（仿佛听到 <code>cp</code> 在喊：「搬完啦！求打赏小鱼干！」）</p>\n<h4><a id=\"44cp__403\"></a>4.4.<strong>cp 的冷知识</strong></h4>\n<ul>\n<li>\n<p><strong>「我是时间管理大师！」</strong></p>\n<p>用 <code>-u</code> 参数，只有源文件<strong>比目标新</strong>时才复制：</p>\n<pre><code class=\"lang-\">cp -u 我的努力.txt 老板的眼里/  # 如果老板没发现，就不更新！  \n</code></pre>\n</li>\n<li>\n<p><strong>「我比Ctrl+C更正经！」</strong></p>\n<p><code>cp</code> 会保留文件权限和修改时间（除非用 <code>-p</code> 参数故意不保留）。 而 Windows 的复制？呵，连权限都能搞丢。（再次手动狗头）</p>\n</li>\n<li>\n<p><strong>「毁灭性操作：复制到黑洞」</strong></p>\n<p>永远别尝试 <code>cp * ~/</code>（复制所有文件到家目录），除非你想体验「文件雪崩」的绝望！</p>\n</li>\n</ul>\n<h4><a id=\"cp___420\"></a><strong>总结：cp の 生存法则</strong></h4>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">cp</span> -i 勇气 智商 经验  <span class=\"hljs-comment\"># 覆盖人生前请三思！  </span>\n</code></div></pre>\n<p>快、准、狠------这是 <code>cp</code> 的职业素养，但请记住：<strong>「比猫咪打翻水杯更可怕的，是手滑的 <code>cp</code> 指令！」</strong></p>\n<h3><a id=\"5mv_428\"></a>5.mv指令</h3>\n<h4><a id=\"51mvLinux__430\"></a>5.1.<strong>mv：Linux 界的「文件忍者」，但比魔术师更会玩消失！</strong></h4>\n<p><code> mv</code>，全称 <code>move</code>（移动），它看似是个「搬家工人」，实则是<strong>文件界的变形金刚</strong> ------能移动、能重命名，甚至能「偷天换日」覆盖文件！但小心，它的座右铭是：<strong>「我搬过的文件，连原址都不敢回忆！」</strong></p>\n<h4><a id=\"52_434\"></a>5.2.基础用法：文件瞬移术</h4>\n<h5><a id=\"1_436\"></a>1.普通搬家（移动文件）</h5>\n<p>如果你对 <code>mv</code> 说：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">mv</span> 摸鱼计划.txt 老板看不见的角落/  \n</code></div></pre>\n<p>它会瞬间把文件挪走，仿佛从未存在过：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">老板看不见的角落/  \n  └── 摸鱼计划.txt  \n</code></div></pre>\n<p>（注：老板的视力通常与该文件夹的路径成反比。）</p>\n<h5><a id=\"2_453\"></a>2.原地变身（重命名文件）</h5>\n<p>想让文件「换马甲」？直接给新名字就行！</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">mv</span> 离职申请.txt 年度奋进计划.txt  <span class=\"hljs-comment\"># 职场生存必备技能  </span>\n</code></div></pre>\n<p>（第二天：老板：「这份计划书怎么透着一股悲壮的气息？」）</p>\n<h4><a id=\"53mv___463\"></a>5.3.<strong>高级玩法：mv の 暗黑艺术</strong></h4>\n<h5><a id=\"1_465\"></a>1.静默覆盖（危险の美学）</h5>\n<p>默认 <code>mv</code> 会直接覆盖同名文件，像极了删你代码还没 <code>git commit</code> 的同事：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">mv</span> 新数据.csv 旧数据.csv  <span class=\"hljs-comment\"># 旧数据：我当时害怕极了......  </span>\n</code></div></pre>\n<p>（后果：你可能需要连夜跑路。）</p>\n<h5><a id=\"2_475\"></a>2.求生模式（覆盖前询问）</h5>\n<p>加 <code>-i</code> 参数，让 <code>mv</code> 变成「碎碎念狂魔」：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">mv</span> -i 我的黑历史.zip 云备份/  \n</code></div></pre>\n<p>输出：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">mv</span>: overwrite <span class=\"hljs-string\">&#x27;云备份/我的黑历史.zip&#x27;</span>? （你确定云盘不会泄露吗？）  \n</code></div></pre>\n<p>（建议：输入 <code>n</code>，然后买个硬盘埋后院。）</p>\n<h5><a id=\"3_491\"></a>3.暴力搬家公司（移动整个文件夹）</h5>\n<p>和 <code>cp</code> 不同，<code>mv</code> 搬文件夹<strong>不用加参数</strong>，直接干！（有一次有人问我mv指令需不需要用-rf，我还傻呵呵的给他说必须用，结果他用了半天没用出来，最后还是我复习了之前的知识才想起来这件事）</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">mv</span> 陈年旧代码/ 回收站/  <span class=\"hljs-comment\"># 表面风轻云淡，内心慌得一批  </span>\n</code></div></pre>\n<p>（注：如果 <code>回收站/</code> 不存在，<code>陈年旧代码/</code> 会改名为 <code>回收站</code>…建议提前买保险。）</p>\n<h5><a id=\"4_501\"></a>4.戏精模式（显示搬运动作）</h5>\n<p>加 <code>-v</code> 参数，让 <code>mv</code> 实时播报：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">mv</span> -v 老板的丑照.jpg 加密保险箱/  \n</code></div></pre>\n<p>输出：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-string\">&#x27;老板的丑照.jpg&#x27;</span> -&gt; <span class=\"hljs-string\">&#x27;加密保险箱/老板的丑照.jpg&#x27;</span>  \n</code></div></pre>\n<p>（仿佛听到 <code>mv</code> 说：「已安全转移，人质…啊不，文件平安！」）</p>\n<h4><a id=\"54mv_517\"></a>5.4.mv的冷知识</h4>\n<ul>\n<li>\n<p><strong>「我和 cp 是塑料兄弟！」</strong> <code>mv</code> 的真相：如果目标在<strong>同一磁盘</strong> ，它只是改个路径（瞬间完成）； 如果跨磁盘，它其实是「复制+删除」，慢得像在搬砖！（此时不如直接用 <code>cp</code>）</p>\n</li>\n<li>\n<p><strong>「我比删除键更可怕！」</strong> 用 <code>mv</code> 把文件移到不存在的路径，文件会直接「被改名」：</p>\n<pre><code class=\"lang-\">mv 重要文件.txt /不存在的路径/  # 文件会改名为「不存在的路径」……祝你好运！  \n</code></pre>\n</li>\n<li>\n<p><strong>「我能让文件『社死』！」</strong> 用 <code>mv</code> 隐藏文件（加前缀 <code>.</code>）：</p>\n<pre><code class=\"lang-\">mv 摸鱼笔记.txt .摸鱼笔记.txt  # 现在只有 `ls -a` 能看见它了，或者是\'la\'选项才可以看见哦~  \n</code></pre>\n<p>（适用于「假装在工作」高级玩家。）</p>\n</li>\n</ul>\n<h4><a id=\"55mv_535\"></a>5.5.总结：mvの忍者信条</h4>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">mv</span> 过去 未来  <span class=\"hljs-comment\"># 过去的错误，就扔到未来的回收站吧！  </span>\n</code></div></pre>\n<p>快、准、狠------这是 <code>mv</code> 的职业修养，但请记住：<strong>「比误删文件更惨的，是手滑把文件 mv 进了黑洞！」</strong></p>\n<h3><a id=\"6whichfindwhereis_543\"></a>6.which，find，whereis指令</h3>\n<h4><a id=\"61whichLinux__PATH__545\"></a>6.1.<strong>which：Linux 界的「路痴导航员」，但只会指路 PATH 里的店！</strong></h4>\n<p>which，纯纯的就是一个选择性的路痴：它的任务很简单：<strong>告诉你某个命令到底藏在哪个犄角旮旃</strong> 。但有个毛病：<strong>只认 <code>PATH</code> 环境变量里的路径</strong>（环境变量是我后来会讲述的内容），其他地方的命令？它表示：「看不见，下一个！」</p>\n<h5><a id=\"1_549\"></a>1.基础用法：找命令的「藏身之处」</h5>\n<p>如果你问它：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">which</span> python  \n</code></div></pre>\n<p>它会回答：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">/usr/bin/python  <span class=\"hljs-comment\"># 「在这呢！但你是不是装了 10 个版本？」  </span>\n</code></div></pre>\n<p>（注：如果找不到，它会沉默得像被老板抓包的你。）</p>\n<h5><a id=\"2_565\"></a>2.冷知识：</h5>\n<ul>\n<li>\n<p><strong>「我拒绝搜索你的私人小仓库！」</strong> 如果你自己写了脚本放在 <code>~/bin</code> 但没加到 <code>PATH</code>，<code>which</code> 会直接装瞎：</p>\n<pre><code class=\"lang-\">which 我的摸鱼脚本.sh  # 输出：空气  \n</code></pre>\n</li>\n<li>\n<p><strong>「我和 Windows 的 where 是远房亲戚！」</strong> Windows 的 <code>where</code> 命令类似，但 Linux 的 <code>which</code> 更傲娇。</p>\n</li>\n</ul>\n<h4><a id=\"62whereisLinux__575\"></a>6.2.<strong>whereis：Linux 界的「文件八卦记者」，但只爆料系统知道的事！</strong></h4>\n<p>这位比 <code>which</code> 更八卦------<strong>不仅能找命令，还能挖出它的源码、手册页</strong> ！但缺点是：<strong>只搜系统预设的目录</strong> （比如 <code>/bin</code>, <code>/usr/share/man</code>），其他地方它不关心！</p>\n<h5><a id=\"1__579\"></a>1.基础用法：查命令的「 全家桶」</h5>\n<p>如果你问：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">whereis <span class=\"hljs-built_in\">ls</span>\n</code></div></pre>\n<p>它会甩出一堆信息：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">ls</span>: /usr/bin/ls /usr/share/man/man1/ls.1.gz /usr/share/man/man1p/ls.1p.gz\n</code></div></pre>\n<h5><a id=\"2_593\"></a>2.冷知识：</h5>\n<ul>\n<li>\n<p><strong>「你的自定义命令？我不熟！」</strong> 和 <code>which</code> 一样，非系统目录的命令它直接无视。</p>\n</li>\n<li>\n<p><strong>「源码？可能被我吃掉了！」</strong> 有些命令安装时没带源码，<code>whereis</code> 会假装无事发生。</p>\n</li>\n</ul>\n<h4><a id=\"63findLinux__CPU__599\"></a>6.3.<strong>find：Linux 界的「文件福尔摩斯」，但查案时能把你 CPU 跑炸！</strong></h4>\n<p>真正的搜索大佬！<strong>能按名字、大小、时间、权限…甚至文件内容</strong> 满硬盘搜！但代价是：<strong>语法复杂得像侦探小说</strong>，一不小心就搜出 10 万个临时文件！</p>\n<h5><a id=\"1_603\"></a>1.<strong>基础用法：按名字搜文件</strong></h5>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">find / -name <span class=\"hljs-string\">&quot;摸鱼证据.txt&quot;</span>  <span class=\"hljs-comment\"># 从根目录开始搜，但建议加降压药 ，这里就不出事结果了，因为我目前的CPU正在高速运转~ </span>\n</code></div></pre>\n<p>（后果：硬盘狂转，风扇起飞，CPU 大喊：「我要摸鱼！」）</p>\n<h5><a id=\"2_611\"></a>2.<strong>高级玩法：</strong></h5>\n<ol>\n<li></li>\n</ol>\n<h6><a id=\"_615\"></a><strong>按大小抓「胖子文件」</strong></h6>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">find ~ -size +100M  <span class=\"hljs-comment\"># 找出你硬盘里的「隐藏巨婴」  </span>\n</code></div></pre>\n<p>（输出：<code>~/电影/未看完的1080p学习资料.mp4</code>）<br />\n2.</p>\n<h6><a id=\"_624\"></a><strong>按时间抓「旧爱」</strong></h6>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">find /tmp -mtime +30  <span class=\"hljs-comment\"># 找出 30 天没碰过的临时文件（早该分手了！）  </span>\n</code></div></pre>\n<ol start=\"3\">\n<li>\n<p><strong>「找到后，顺便干点啥」</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">find . -name <span class=\"hljs-string\">&quot;*.log&quot;</span> -<span class=\"hljs-built_in\">exec</span> <span class=\"hljs-built_in\">rm</span> {} \\;  <span class=\"hljs-comment\"># 删除所有日志（谨慎！别删库跑路！）  </span>\n</code></div></pre>\n<p>（<code>-exec</code> 表示让 <code>find</code> 兼职杀手，<code>{}</code> 是文件占位符，<code>\\;</code> 是固定结尾）</p>\n</li>\n</ol>\n<h5><a id=\"3_638\"></a>3.冷知识：</h5>\n<ul>\n<li>\n<p><strong>「我比 Windows 搜索强 100 倍，但用户怕我！」</strong> Windows 用户搜文件靠点击，Linux 用户靠 <code>find</code> 加咖啡因。</p>\n</li>\n<li>\n<p><strong>「别让我搜 /dev，那里全是鬼！」</strong> <code>/dev</code> 是设备文件，用 <code>find</code> 搜它可能触发玄学 Bug。</p>\n</li>\n</ul>\n<h4><a id=\"64_644\"></a>6.4.<strong>总结：三巨头的「职场定位」</strong></h4>\n<ul>\n<li>\n<p><strong><code>which</code></strong>：「我就一路人甲，只认识城里的店！」</p>\n</li>\n<li>\n<p><strong><code>whereis</code></strong>：「我八卦，但只爆系统的料！」</p>\n</li>\n<li>\n<p><strong><code>find</code></strong>：「给我一个硬盘，我能搜到宇宙尽头！」</p>\n</li>\n</ul>\n<h4><a id=\"65_652\"></a>6.5.灵魂拷问</h4>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">which</span> whereis  <span class=\"hljs-comment\"># 输出：whereis 在 /usr/bin/whereis  </span>\nwhereis find   <span class=\"hljs-comment\"># 输出：find 在 /usr/bin/find 和它的手册页  </span>\nfind / -name <span class=\"hljs-string\">&quot;人生意义&quot;</span>  <span class=\"hljs-comment\"># 输出：无（建议重启人类试试）  </span>\n</code></div></pre>\n<h3><a id=\"7grep_660\"></a>7.grep指令</h3>\n<h4><a id=\"71grepLinux__662\"></a>7.1.<strong>grep：Linux 界的「文字侦探」，但比柯南更爱找茬！</strong></h4>\n<p><code> grep</code>，全称 <strong>Global Regular Expression Print</strong> （全局正则表达式打印），江湖人称**「键盘界的Ctrl+F」** ，但比浏览器搜索硬核100倍------它能用<strong>正则表达式</strong>在文件大海里精准捞针，甚至能边捞边喊：「真相只有一个！」</p>\n<h4><a id=\"72_666\"></a>7.2.基础用法：字里行间的「捉迷藏」</h4>\n<h5><a id=\"1_668\"></a>1.普通搜索（按关键词抓人）</h5>\n<p>如果你对 <code>grep</code> 说：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">grep <span class=\"hljs-string\">&quot;error&quot;</span> 日志.txt  <span class=\"hljs-comment\"># 在日志里搜所有「error」  </span>\n</code></div></pre>\n<p>它会立刻高亮显示所有匹配行：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">ERROR 2023: 程序员因咖啡不足崩溃。  \nerror 404: 智商未找到。  \n</code></div></pre>\n<p>（注：大小写敏感是它的傲娇设定，<code>Error</code> 和 <code>error</code> 是两码事！）</p>\n<h5><a id=\"2_685\"></a>2.全员逮捕（统计匹配次数）</h5>\n<p>加 <code>-c</code> 参数，直接告诉你抓了多少「嫌疑人」：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">grep -c <span class=\"hljs-string\">&quot;摸鱼&quot;</span> 工作日报.txt  <span class=\"hljs-comment\"># 输出：42  </span>\n</code></div></pre>\n<p>（老板：你一天摸42次鱼？鱼塘都被你摸秃了！）</p>\n<h4><a id=\"73grep___695\"></a>7.3.高级玩法：grep の 刑侦手段</h4>\n<h5><a id=\"1_697\"></a>1.忽略大小写（大小通吃）</h5>\n<p>用 <code>-i</code> 参数，让 <code>grep</code> 变成「脸盲侦探」：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">grep -i <span class=\"hljs-string\">&quot;warning&quot;</span> 系统日志.txt  <span class=\"hljs-comment\"># 连「WaRnInG」都逃不过！  </span>\n</code></div></pre>\n<p>（适合抓那些喜欢伪装成「WARNING」的严重错误。）</p>\n<h5><a id=\"2_707\"></a>2.反向逮捕（排除法）</h5>\n<p>加 <code>-v</code> 参数，专门<strong>排除</strong>符合条件的内容：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">grep -v <span class=\"hljs-string\">&quot;TODO&quot;</span> 代码.py  <span class=\"hljs-comment\"># 只看正经代码，假装TODO不存在  </span>\n</code></div></pre>\n<p>（输出：一片空白------原来你根本没写代码！）</p>\n<h5><a id=\"3_717\"></a>3.地毯式搜索（递归搜索目录）</h5>\n<p>用 <code>-r</code> 参数，让 <code>grep</code> 化身「文件挖掘机」：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">grep -r <span class=\"hljs-string\">&quot;密码&quot;</span> ~/项目  <span class=\"hljs-comment\"># 搜索家目录下所有文件中的「密码」  </span>\n</code></div></pre>\n<p>（后果：可能发现你把数据库密码写在 <code>test.txt</code> 里…）</p>\n<h5><a id=\"4_727\"></a>4.带行号招供（显示行号）</h5>\n<p>加 <code>-n</code> 参数，让匹配行「自曝坐标」：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">grep -n <span class=\"hljs-string\">&quot;BUG&quot;</span> 代码.c  \n</code></div></pre>\n<p>输出：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">42: <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;这里有个BUG，但我不想修！&quot;</span>);  \n</code></div></pre>\n<p>（第42行：程序员の经典摆烂现场。）</p>\n<h5><a id=\"5_743\"></a>5.查案带上下文（显示前后内容）</h5>\n<p>用 <code>-C</code> 参数（比如 <code>-C 2</code>），展示案发现场的前后2行：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">grep -C 2 <span class=\"hljs-string\">&quot;崩溃&quot;</span> 日志.txt  \n</code></div></pre>\n<p>输出：</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">[时间] 尝试拯救世界...  \n[时间] 系统崩溃！  \n[时间] 程序员开始砸键盘。  \n</code></div></pre>\n<p>（破案了：崩溃原因是键盘质量太差！）</p>\n<h4><a id=\"74grep_761\"></a>7.4.grep的冷知识</h4>\n<ul>\n<li>\n<p><strong>「我和正则表达式是CP！」</strong> <code>grep</code> 的终极技能是<strong>正则表达式</strong>，比如：</p>\n<pre><code class=\"lang-\">grep &quot;^[A-Z]&quot; 文件.txt  # 抓所有以大写字母开头的行（适合找嚣张的错误）  \n</code></pre>\n<p>（注：<code>^</code> 表示行首，<code>[A-Z]</code> 表示大写字母，学废了吗？）</p>\n</li>\n<li>\n<p><strong>「我比猫（cat）更懂文件！」</strong> 常和 <code>cat</code> 勾搭干活，比如：</p>\n<pre><code class=\"lang-\">cat 日志.txt | grep &quot;error&quot;  # 先让猫吐文件，再让grep抓重点  \n</code></pre>\n<p>（但其实可以省掉 <code>cat</code>：<code>grep &quot;error&quot; 日志.txt</code>）</p>\n</li>\n<li>\n<p><strong>「我有个花里胡哨的亲戚------<code>egrep</code> 和 <code>fgrep</code>！」</strong></p>\n<ul>\n<li>\n<p><code>egrep</code>：支持<strong>扩展正则表达式</strong> （比如 <code>+</code>, <code>?</code> 不用转义）。</p>\n</li>\n<li>\n<p><code>fgrep</code>：<strong>固定字符串搜索</strong>（速度更快，适合没正则的情况）。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4><a id=\"grep___783\"></a><strong>总结：grep の 侦探守则</strong></h4>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">grep <span class=\"hljs-string\">&quot;智慧&quot;</span> 大脑内存.txt  <span class=\"hljs-comment\"># 输出：查无此词！  </span>\n</code></div></pre>\n<p>快、准、狠------这是 <code>grep</code> 的破案哲学，但请记住：<strong>「比找不到关键词更可怕的，是grep到了老板的敏感词！」</strong></p>\n<h3><a id=\"8_791\"></a>8.总结</h3>\n<p>今天的博客之旅到这里也就结束了，今天讲述了不少的指令，希望各位读者之后会好好的复习这些代码，不然我就会用mv指令快速移动到你身边然后rm你哦~好了，不闹着玩了，指令的记忆不是靠死记硬背，而是靠每天的练习，这样会让自己的记忆变的更加深刻，今天的同居日记已结束，各位朋友们下次见啦！</p>\n<p>是<img src=\"https://i-blog.csdnimg.cn/direct/5fffc8c9f89347c285cc436f23e13ca0.jpeg\" alt=\"\" /></p>\n','### 前情提要： {#content_views}\n\n当你和终端的关系从「早安打卡」进阶到「深夜代码同居」，那些曾经高冷的指令开始展露**致命の反差萌**------\n\n* **`man`** 是那个永远在线的钢铁直男说明书，只会说：\"想懂我？自己看文档！\"（但你不得不承认，他的确随叫随到）\n\n* **`mv`** 像极了热衷搬家的前任，能把你的青春回忆从 `/home/初恋` 一键转移到 `/tmp/心碎回收站`\n\n* **`nano`** 是初恋记事本，虽然功能朴素，但总在 `Ctrl+X` 时温柔问你：\"要保存这份心动吗？\"\n\n*** ** * ** ***\n\n#### **本季同居守则**：\n\n##### **1. 暧昧期必杀技：指令界的「情感翻译官」**\n\n* **`echo \"今晚月色真美\" > 告白.txt`**\n\n  * 直男式浪漫：用重定向符 `>` 把心跳声写入文本（副作用：覆盖式表白可能引发 `IOError: 已读不回`）\n\n* **`cat 日记.log | grep \"crush\"`**\n\n  * 在百万行的生活日志里，精准捕捞那个TA出现的瞬间（警告：可能挖出黑历史导致 `段错误`）\n\n##### **2. 危险关系の艺术：文件界的「替身文学」**\n\n* **`cp -r 前任/ 新欢/ --小心心备份=all`**\n\n  * 海王の觉悟：用递归复制保留所有纪念品（但 `diff` 会无情揭穿：\"新欢和前任的md5一模一样！\"）\n\n* **`which python`**\n\n  * 鉴渣神器：查清那个口口声声说只爱你一人的Python，到底在 `/usr/bin` 藏了多少个版本备胎\n\n##### **3. 终极灵魂拷问：当指令学会PUA**\n\n* **`man 爱情`**\n\n  * 系统冷冰冰地提示：`No manual entry for 爱情`（但偷偷用 `apropos 心动` 能搜到隐藏章节）\n\n* **`sudo rm -rf 犹豫/`**\n\n  * 用管理员权限删除所有迟疑（副作用：可能误删 `/未来/承诺` 目录）\n\n*** ** * ** ***\n\n#### **新手指南：同居必备神器**\n\n* **`nano 分手信.txt`**\n\n  * 用最朴素的编辑器写下最痛的句子（若手抖按了 `Ctrl+S`，请速用 `mv 分手信.txt /dev/null` 撤回）\n\n* **`man 7 恋爱哲学`**\n\n  * 隐藏章节揭示真理：\n\n    ```\n    爱情 ≈ 管道符 |   \n    你的输出必须是我的输入  \n    但永远不要用 > 覆盖对方的灵魂  \n    ```\n\n*** ** * ** ***\n\n**现在，深呼吸** **在终端敲下这封加密情书**：\n\n```\necho \"SSBsb3ZlIHlvdSAK\" | base64 -d  \n```\n\n**让Linux告诉你------** **有些指令不需要手册，因为心跳的源码早已开源** 💻💓\n\n### 1.man指令\n\n#### 1.1.man指令是什么：Linux的百科知识全书\n\n可能当很多小伙伴看到这个指令名字的时候，脑袋里会浮现出那个男人的身影，并且会想起一个当今比较热门的梗：man！当然，这个指令和这些可是没有任何关系，man指令可以说是一个比较热门的指令，因为我们会在学习Linux的时候多次使用到它，它其实就是一个Linux的知识百科全书。\n\n#### 1.2.man指令的用法：一看就懂\n\nman指令的语法很简单，首先我们想要可以用man指令查man指令的用法，它的语法如下：\n\n```bash\nman man  #这样就可以知道man的用法\n```\n\n![](https://i-blog.csdnimg.cn/direct/93508a1c424d4aa98df6b7f509d63caf.png)\n\n这里就可以看到上面显示的man函数的功能，其实它的核心主要是在中间的部分，就是数字对应的部分，每一个数字代表着它所含有的工作，这里小编就给大家搜索了相关的资料，告知各位这些数字代表的含义：\n\n|  章节号  |       内容类型        |            示例命令            |\n|-------|-------------------|----------------------------|\n| **1** | 用户命令（普通用户可执行）     | `man 1 ls`                 |\n| **2** | 系统调用              | `man 2 fork`               |\n| **3** | C 库函数             | `man 3 malloc`             |\n| **4** | 设备文件和特殊文件         | `man 4 null`（/dev/null 设备） |\n| **5** | 配置文件格式            | `man 5 fstab`              |\n| **6** | 游戏和屏保程序           | `man 6 tetris`             |\n| **7** | 杂项（协议、文件系统等）      | `man 7 tcp`                |\n| **8** | 系统管理命令（需 root 权限） | `man 8 iptables`           |\n| **9** | 内核相关文档            | `man 9 syscalls`           |\n\n上面就是对于man函数的使用，各位读者以后遇到函数不会用的问题，完全可以通过man函数来帮助我们相关函数的查找，而不用再去一些平台找相关的解释了。\n\n#### 1.3.man指令可能出现的错误\n\n在我们使用man函数的时候，我们可能想要使用man 3 printf的指令，可能部分读者无法使用这个功能，这是因为部分云服务器删减了不少内容，这个手册相关的内容也进行了删除（因为保证功能太多而浪费掉），所以可以用下面这个指令把这个手册下回来：\n\n```bash\nyum install -y man-pages  #这样就可以使用3的功能了\n```\n\n### 2.echo指令\n\n#### 1.echo：Linux 界的「复读机」，但比鹦鹉靠谱！\n\necho指令实际上算是Linux中最没有\"存在感\"但确实常常被使用的指令了，因为它的功能实际上是很简单的，它的名字听起来像在说：「欸，我在呢！」（Echo：回音），但它的真实身份其实是**命令行界的复读机** 。它的任务很简单：**你喂它什么，它就吐什么**。但别小看它！这货可是隐藏了无数骚操作的宝藏工具（就比如之后让我难受好几天的重定向操作）。\n\n#### 2.echo的用法：比\"hello world\"还简单\n\n它的用法很经典，如果你给它说：\n\n```bash\necho \"我是以后的技术大佬！\" #这个引号可以不加，纯纯的写C++习惯了，看到个字符串默认\"\"\n```\n\n它给你回：\n\n![](https://i-blog.csdnimg.cn/direct/0219ea482ffd42ce9a01d4d8664a8856.png)\n\n#### 3.高级玩法：echo の 魔法时刻\n\n**1. 自带弹幕特效（颜色和格式）**\n\n想让终端输出五彩斑斓的黑？加个「魔法参数」`-e` 就能解锁转义符！\n\n```bash\necho -e \"\\033[31m红色警告：\\033[0m 你的咖啡已空！\"\n```\n\n效果：\n\n![](https://i-blog.csdnimg.cn/direct/28c50c31f4bd42a5a4fa8db6f8737595.png)\n\n*** ** * ** ***\n\n**2. 制造混乱（生成奇葩文件）**\n\n想快速创建一个文件并写入内容？\n\n```bash\necho \"老板说要写周报，但我觉得他在画饼\" > weekly_report.txt\n```\n\n（`>` 表示把输出**重定向**到文件，相当于让 echo 当秘书帮你写文档。关于重定向，我以后会详细说说这玩意，难度还是不小的，在大约我讲到文件的部分时，我会进行一个重定向代码的书写）\n\n*** ** * ** ***\n\n**3. 哲学の质问（输出变量）**\n\nLinux 有很多自带「人生哲理」变量，比如 `$USER`（你是谁）、`$HOME`（你家在哪）：\n\n```bash\necho \"你是 $USER，此刻正躲在 $HOME 里摸鱼。\" #这些其实就是后来我会讲的环境变量\n```\n\n```bash\n你是 alice，此刻正躲在 /home/alice 里摸鱼。\n```\n\n（扎心了，echo。）\n\n*** ** * ** ***\n\n**4. 无声胜有声（不换行输出）**\n\n默认 `echo` 会在结尾加个换行符，像个礼貌的客服。但如果你想当个「叛逆青年」，用 `-n` 参数让它闭嘴：\n\n```bash\necho -n \"正在加载......\"\nsleep 2\necho \"加载了个寂寞！\"\n```\n\n效果：两句话会连在一起，假装在加载（实则摸鱼）。\n\n*** ** * ** ***\n\n##### **echo 的冷知识**\n\n* **「我到底说了啥？」** 如果输入 `echo *`，它会列出当前目录所有文件（因为 `*` 被 Shell 先解析了）。 如果想原样输出 `*`，请用单引号：`echo \'*\'`（单引号是「封印」，防止 Shell 搞事）。\n\n* **「Windows 用户别学我！」** Windows 的 `echo` 是另一个物种，比如 `echo %PATH%`，但功能远不如 Linux 的优雅。（手动狗头）\n\n*** ** * ** ***\n\n##### **总结：echo 的「人生信条」**\n\n```bash\necho \"人生苦短，我用 echo。\"\n```\n\n简单、直接、不废话------这就是 `echo` 的极客哲学。下次写脚本时，记得让这个「复读机」帮你喊话、写文件、甚至假装在工作！（老板看不到的，放心。）\n\n### 3.cat指令\n\n#### 3.1.cat：Linux 界的「文件魔术师」，但比你家猫还好奇！\n\n它的全名是 `concatenate`（拼接），但别被这名字吓到，它其实是**文件界的瑞士军刀** 。任务就一条：**把文件内容「喵」给你看**！但它不仅能看文件，还能玩拼接、装高冷、甚至倒放人生......（误）\n\n#### 3.2.基础用法：喵星人的偷窥欲\n\n如果你对它说：\n\n```bash\ncat 日记.txt  #假设文件里面有内容\n```\n\n它会立刻把文件内容摊在屏幕上：\n\n```bash\n2023年10月1日：今天学会了用cat，感觉自己像个黑客！\n```\n\n#### 3.3.高级玩法：cat の 九条命\n\n##### 1.合并文件的魔法（文件拼接）\n\n想合并两个文件？`cat` 表示：「给我两片小鱼干（文件），还你一条大鱼！」\n\n```bash\n2023年10月1日：今天学会了用cat，感觉自己像个黑客！\n```\n\n（`>` 表示把合并结果存到新文件，建议别轻易尝试合并「前半生」和「后半生」，容易引发哲学危机。）\n\n##### 2.高冷模式（显示行号）\n\n想让 `cat` 装高冷学霸？加 `-n` 参数，连行号都给你标好！\n\n```bash\ncat -n 代码.c\n```\n\n输出：\n\n```cpp\n1  #include <摸鱼.h>  //开个玩笑的~头文件要好好的写哦~\n2  int main() {\n3      printf(\"世界你好，但我不想动！\");\n4  }\n```\n\n（行号暴露了你代码里的摸鱼痕迹......）\n\n##### 3.倒放人生（反向输出）\n\n哦不，是反向输出！用 `tac`（cat 倒过来）指令：\n\n```bash\ntac 日记.txt\n```\n\n输出：\n\n```bash\n2023年10月1日：今天学会了用cat，感觉自己像个黑客！\n```\n\n看起来没变化？因为这日记只有一行......建议写长点再试！）\n\n##### 4.无中生有（快速创建文件）\n\n懒人必备！用 `cat` 直接键盘输入内容：\n\n```bash\ncat > 紧急备忘录.txt << EOF\n1. 买咖啡\n2. 假装在工作\n3. 用cat查看老板的日程（划掉）\nEOF\n```\n\n（按 `Ctrl+D` 保存，深藏功与名。）\n\n##### **cat 的冷知识**\n\n* **「别拿我当铲屎官！」** 用 `cat` 查看超大文件（比如日志）时，它会一口气全吐出来，屏幕直接滚成瀑布！【所以我一般不推荐使用cat指令查看大型的文件，不然有你好果汁吃，嘻嘻\\~】 此时请用 `less` 或 `more` 指令，比如 `less 巨型日志.log`（猫表示：「我累了，换人！」）。【本来想讲这部分的，但我偷个懒，就不写了】\n\n* **「我和狗（dog）有什么关系？」** 有人觉得 `cat` 不够酷，于是写了 `dog` 指令（彩色输出+语法高亮），但记住：**狗是猫的加强版，但猫才是原配！**【原配抵不过天降，总觉着哪里不对】\n\n* **「我是管道工的好朋友！」** `cat` 常和其他指令「勾搭」干活，比如：\n\n  ```\n  cat 日志.log | grep \"error\"  # 过滤所有报错（摸鱼时快速甩锅用）\n  ```\n\n#### **总结：cat 的「喵生信条」**\n\n```bash\ncat << EOF\n猫有九条命，\ncat 有九种用法。\n------ 但第九种通常是老板没教你的那个！\nEOF\n```\n\n简单、灵活、好奇心爆棚------这就是 `cat` 的极客精神。下次遇到文件时，记得召唤这只「好奇猫」，但别让它看到你的浏览器历史记录！（手动狗头）\n\n### 4.cp指令\n\n#### 4.1.cp：Linux 界的「文件快递员」，但比搬家小哥更怕丢件！\n\n` cp`，全称 `copy`（复制），它的任务看似简单------**把文件从A地搬到B地**，但这位「文件快递员」的职业生涯充满了血泪史：\n\n* **搞丢文件？** 当场失业！\n\n* **覆盖文件？** 用户暴走！\n\n* **忘记参数？** 直接emo......\n\n但别慌，学会以下技巧，你就是它的金牌老板！\n\n#### 4.2.基础用法：复制粘贴，但不用Ctrl键\n\n如果你对 `cp` 说：\n\n```bash\ncp 老板的废话.txt 我的脑子/    #要复制的文件到指定的目录下，此时就要结合之前学的目录相关的知识(＾Ｕ＾)ノ~ＹＯ\n```\n\n它会默默把文件复制到指定目录，深藏功与名：\n\n```bash\n我的脑子/  \n  └── 老板的废话.txt  \n```\n\n（但请注意：你的脑子可能会选择性拒绝接收该文件！）\n\n#### 4.3.**高级玩法：cp の 反卷指南**\n\n##### 1.**暴力搬家（覆盖文件不提醒）**\n\n默认 `cp` 会静默覆盖同名文件，像极了半夜偷偷改代码的你：\n\n```bash\ncp 摸鱼攻略.txt 工作日报.txt  # 危险动作，请勿模仿！  这样可能会酿成大错哦~~\n```\n\n（第二天：老板：「你的日报为什么写着『如何伪装编译错误』？」）\n\n##### 2.求生欲模式（覆盖前询问）\n\n怕手滑？加 `-i` 参数让 `cp` 变成「纠结狂魔」：\n\n```bash\ncp -i 旧简历.txt 新简历.txt  \n```\n\n输出：\n\n```bash\ncp: overwrite \'新简历.txt\'? （你丫想好了再按！）  \n```\n\n（此时建议输入 `n` 并火速删除旧简历中的「精通一切」字样。）\n\n##### 3.抄家式复制（递归复制文件夹）\n\n想复制整个文件夹？加 `-r` 参数，让 `cp` 化身「抄家大队长」：\n\n```bash\ncp -r 我的黑历史/ 备份硬盘/  # 建议加密后再操作  ，就比如后面我会讲述的文件以及目录的权限\n```\n\n（注：`-r` 表示递归，适用于文件夹。如果失败，可能是你的黑历史太重了......）\n\n##### 4.强制式复制（强行复制文件or目录）\n\n想要强制复制整个文件夹？加 `-f` 参数，让 `cp` 化身「强拆大队长」:\n\n```bash\ncp -f 我的白历史/ 公司公共资源/  #建议自信后才这么做，不然文件是第一天发的，班是第二天辞的~\n```\n\n##### 5.戏精附体（显示复制的详情）\n\n加 `-v` 参数，让 `cp` 实时播报搬家进度：\n\n```bash\ncp -v 猫片.jpg 狗片.jpg /表情包/  \n```\n\n输出：\n\n```\n\'猫片.jpg\' -> \'/表情包/猫片.jpg\'  \n\'狗片.jpg\' -> \'/表情包/狗片.jpg\'  \n```\n\n（仿佛听到 `cp` 在喊：「搬完啦！求打赏小鱼干！」）\n\n#### 4.4.**cp 的冷知识**\n\n* **「我是时间管理大师！」**\n\n  用 `-u` 参数，只有源文件**比目标新**时才复制：\n\n  ```\n  cp -u 我的努力.txt 老板的眼里/  # 如果老板没发现，就不更新！  \n  ```\n\n* **「我比Ctrl+C更正经！」**\n\n  `cp` 会保留文件权限和修改时间（除非用 `-p` 参数故意不保留）。 而 Windows 的复制？呵，连权限都能搞丢。（再次手动狗头）\n* **「毁灭性操作：复制到黑洞」**\n\n  永远别尝试 `cp * ~/`（复制所有文件到家目录），除非你想体验「文件雪崩」的绝望！\n\n#### **总结：cp の 生存法则**\n\n```bash\ncp -i 勇气 智商 经验  # 覆盖人生前请三思！  \n```\n\n快、准、狠------这是 `cp` 的职业素养，但请记住：**「比猫咪打翻水杯更可怕的，是手滑的 `cp` 指令！」**\n\n### 5.mv指令\n\n#### 5.1.**mv：Linux 界的「文件忍者」，但比魔术师更会玩消失！**\n\n` mv`，全称 `move`（移动），它看似是个「搬家工人」，实则是**文件界的变形金刚** ------能移动、能重命名，甚至能「偷天换日」覆盖文件！但小心，它的座右铭是：**「我搬过的文件，连原址都不敢回忆！」**\n\n#### 5.2.基础用法：文件瞬移术\n\n##### 1.普通搬家（移动文件）\n\n如果你对 `mv` 说：\n\n```bash\nmv 摸鱼计划.txt 老板看不见的角落/  \n```\n\n它会瞬间把文件挪走，仿佛从未存在过：\n\n```bash\n老板看不见的角落/  \n  └── 摸鱼计划.txt  \n```\n\n（注：老板的视力通常与该文件夹的路径成反比。）\n\n##### 2.原地变身（重命名文件）\n\n想让文件「换马甲」？直接给新名字就行！\n\n```bash\nmv 离职申请.txt 年度奋进计划.txt  # 职场生存必备技能  \n```\n\n（第二天：老板：「这份计划书怎么透着一股悲壮的气息？」）\n\n#### 5.3.**高级玩法：mv の 暗黑艺术**\n\n##### 1.静默覆盖（危险の美学）\n\n默认 `mv` 会直接覆盖同名文件，像极了删你代码还没 `git commit` 的同事：\n\n```bash\nmv 新数据.csv 旧数据.csv  # 旧数据：我当时害怕极了......  \n```\n\n（后果：你可能需要连夜跑路。）\n\n##### 2.求生模式（覆盖前询问）\n\n加 `-i` 参数，让 `mv` 变成「碎碎念狂魔」：\n\n```bash\nmv -i 我的黑历史.zip 云备份/  \n```\n\n输出：\n\n```bash\nmv: overwrite \'云备份/我的黑历史.zip\'? （你确定云盘不会泄露吗？）  \n```\n\n（建议：输入 `n`，然后买个硬盘埋后院。）\n\n##### 3.暴力搬家公司（移动整个文件夹）\n\n和 `cp` 不同，`mv` 搬文件夹**不用加参数**，直接干！（有一次有人问我mv指令需不需要用-rf，我还傻呵呵的给他说必须用，结果他用了半天没用出来，最后还是我复习了之前的知识才想起来这件事）\n\n```bash\nmv 陈年旧代码/ 回收站/  # 表面风轻云淡，内心慌得一批  \n```\n\n（注：如果 `回收站/` 不存在，`陈年旧代码/` 会改名为 `回收站`......建议提前买保险。）\n\n##### 4.戏精模式（显示搬运动作）\n\n加 `-v` 参数，让 `mv` 实时播报：\n\n```bash\nmv -v 老板的丑照.jpg 加密保险箱/  \n```\n\n输出：\n\n```bash\n\'老板的丑照.jpg\' -> \'加密保险箱/老板的丑照.jpg\'  \n```\n\n（仿佛听到 `mv` 说：「已安全转移，人质......啊不，文件平安！」）\n\n#### 5.4.mv的冷知识\n\n* **「我和 cp 是塑料兄弟！」** `mv` 的真相：如果目标在**同一磁盘** ，它只是改个路径（瞬间完成）； 如果跨磁盘，它其实是「复制+删除」，慢得像在搬砖！（此时不如直接用 `cp`）\n\n* **「我比删除键更可怕！」** 用 `mv` 把文件移到不存在的路径，文件会直接「被改名」：\n\n  ```\n  mv 重要文件.txt /不存在的路径/  # 文件会改名为「不存在的路径」……祝你好运！  \n  ```\n\n* **「我能让文件『社死』！」** 用 `mv` 隐藏文件（加前缀 `.`）：\n\n  ```\n  mv 摸鱼笔记.txt .摸鱼笔记.txt  # 现在只有 `ls -a` 能看见它了，或者是\'la\'选项才可以看见哦~  \n  ```\n\n  （适用于「假装在工作」高级玩家。）\n\n#### 5.5.总结：mvの忍者信条\n\n```bash\nmv 过去 未来  # 过去的错误，就扔到未来的回收站吧！  \n```\n\n快、准、狠------这是 `mv` 的职业修养，但请记住：**「比误删文件更惨的，是手滑把文件 mv 进了黑洞！」**\n\n### 6.which，find，whereis指令\n\n#### 6.1.**which：Linux 界的「路痴导航员」，但只会指路 PATH 里的店！**\n\nwhich，纯纯的就是一个选择性的路痴：它的任务很简单：**告诉你某个命令到底藏在哪个犄角旮旃** 。但有个毛病：**只认 `PATH` 环境变量里的路径**（环境变量是我后来会讲述的内容），其他地方的命令？它表示：「看不见，下一个！」\n\n##### 1.基础用法：找命令的「藏身之处」\n\n如果你问它：\n\n```bash\nwhich python  \n```\n\n它会回答：\n\n```bash\n/usr/bin/python  # 「在这呢！但你是不是装了 10 个版本？」  \n```\n\n（注：如果找不到，它会沉默得像被老板抓包的你。）\n\n##### 2.冷知识：\n\n* **「我拒绝搜索你的私人小仓库！」** 如果你自己写了脚本放在 `~/bin` 但没加到 `PATH`，`which` 会直接装瞎：\n\n  ```\n  which 我的摸鱼脚本.sh  # 输出：空气  \n  ```\n\n* **「我和 Windows 的 where 是远房亲戚！」** Windows 的 `where` 命令类似，但 Linux 的 `which` 更傲娇。\n\n#### 6.2.**whereis：Linux 界的「文件八卦记者」，但只爆料系统知道的事！**\n\n这位比 `which` 更八卦------**不仅能找命令，还能挖出它的源码、手册页** ！但缺点是：**只搜系统预设的目录** （比如 `/bin`, `/usr/share/man`），其他地方它不关心！\n\n##### 1.基础用法：查命令的「 全家桶」\n\n如果你问：\n\n```bash\nwhereis ls\n```\n\n它会甩出一堆信息：\n\n```bash\nls: /usr/bin/ls /usr/share/man/man1/ls.1.gz /usr/share/man/man1p/ls.1p.gz\n```\n\n##### 2.冷知识：\n\n* **「你的自定义命令？我不熟！」** 和 `which` 一样，非系统目录的命令它直接无视。\n\n* **「源码？可能被我吃掉了！」** 有些命令安装时没带源码，`whereis` 会假装无事发生。\n\n#### 6.3.**find：Linux 界的「文件福尔摩斯」，但查案时能把你 CPU 跑炸！**\n\n真正的搜索大佬！**能按名字、大小、时间、权限......甚至文件内容** 满硬盘搜！但代价是：**语法复杂得像侦探小说**，一不小心就搜出 10 万个临时文件！\n\n##### 1.**基础用法：按名字搜文件**\n\n```bash\nfind / -name \"摸鱼证据.txt\"  # 从根目录开始搜，但建议加降压药 ，这里就不出事结果了，因为我目前的CPU正在高速运转~ \n```\n\n（后果：硬盘狂转，风扇起飞，CPU 大喊：「我要摸鱼！」）\n\n##### 2.**高级玩法：**\n\n1.\n\n   ###### **按大小抓「胖子文件」**\n\n   ```bash\n   find ~ -size +100M  # 找出你硬盘里的「隐藏巨婴」  \n   ```\n\n   （输出：`~/电影/未看完的1080p学习资料.mp4`）\n2.\n\n   ###### **按时间抓「旧爱」**\n\n   ```bash\n   find /tmp -mtime +30  # 找出 30 天没碰过的临时文件（早该分手了！）  \n   ```\n\n3. **「找到后，顺便干点啥」**\n\n   ```bash\n   find . -name \"*.log\" -exec rm {} \\;  # 删除所有日志（谨慎！别删库跑路！）  \n   ```\n\n   （`-exec` 表示让 `find` 兼职杀手，`{}` 是文件占位符，`\\;` 是固定结尾）\n\n##### 3.冷知识：\n\n* **「我比 Windows 搜索强 100 倍，但用户怕我！」** Windows 用户搜文件靠点击，Linux 用户靠 `find` 加咖啡因。\n\n* **「别让我搜 /dev，那里全是鬼！」** `/dev` 是设备文件，用 `find` 搜它可能触发玄学 Bug。\n\n#### 6.4.**总结：三巨头的「职场定位」**\n\n* **`which`**：「我就一路人甲，只认识城里的店！」\n\n* **`whereis`**：「我八卦，但只爆系统的料！」\n\n* **`find`**：「给我一个硬盘，我能搜到宇宙尽头！」\n\n#### 6.5.灵魂拷问\n\n```bash\nwhich whereis  # 输出：whereis 在 /usr/bin/whereis  \nwhereis find   # 输出：find 在 /usr/bin/find 和它的手册页  \nfind / -name \"人生意义\"  # 输出：无（建议重启人类试试）  \n```\n\n### 7.grep指令\n\n#### 7.1.**grep：Linux 界的「文字侦探」，但比柯南更爱找茬！**\n\n` grep`，全称 **Global Regular Expression Print** （全局正则表达式打印），江湖人称**「键盘界的Ctrl+F」** ，但比浏览器搜索硬核100倍------它能用**正则表达式**在文件大海里精准捞针，甚至能边捞边喊：「真相只有一个！」\n\n#### 7.2.基础用法：字里行间的「捉迷藏」\n\n##### 1.普通搜索（按关键词抓人）\n\n如果你对 `grep` 说：\n\n```bash\ngrep \"error\" 日志.txt  # 在日志里搜所有「error」  \n```\n\n它会立刻高亮显示所有匹配行：\n\n```bash\nERROR 2023: 程序员因咖啡不足崩溃。  \nerror 404: 智商未找到。  \n```\n\n（注：大小写敏感是它的傲娇设定，`Error` 和 `error` 是两码事！）\n\n##### 2.全员逮捕（统计匹配次数）\n\n加 `-c` 参数，直接告诉你抓了多少「嫌疑人」：\n\n```bash\ngrep -c \"摸鱼\" 工作日报.txt  # 输出：42  \n```\n\n（老板：你一天摸42次鱼？鱼塘都被你摸秃了！）\n\n#### 7.3.高级玩法：grep の 刑侦手段\n\n##### 1.忽略大小写（大小通吃）\n\n用 `-i` 参数，让 `grep` 变成「脸盲侦探」：\n\n```bash\ngrep -i \"warning\" 系统日志.txt  # 连「WaRnInG」都逃不过！  \n```\n\n（适合抓那些喜欢伪装成「WARNING」的严重错误。）\n\n##### 2.反向逮捕（排除法）\n\n加 `-v` 参数，专门**排除**符合条件的内容：\n\n```bash\ngrep -v \"TODO\" 代码.py  # 只看正经代码，假装TODO不存在  \n```\n\n（输出：一片空白------原来你根本没写代码！）\n\n##### 3.地毯式搜索（递归搜索目录）\n\n用 `-r` 参数，让 `grep` 化身「文件挖掘机」：\n\n```bash\ngrep -r \"密码\" ~/项目  # 搜索家目录下所有文件中的「密码」  \n```\n\n（后果：可能发现你把数据库密码写在 `test.txt` 里......）\n\n##### 4.带行号招供（显示行号）\n\n加 `-n` 参数，让匹配行「自曝坐标」：\n\n```bash\ngrep -n \"BUG\" 代码.c  \n```\n\n输出：\n\n```bash\n42: printf(\"这里有个BUG，但我不想修！\");  \n```\n\n（第42行：程序员の经典摆烂现场。）\n\n##### 5.查案带上下文（显示前后内容）\n\n用 `-C` 参数（比如 `-C 2`），展示案发现场的前后2行：\n\n```bash\ngrep -C 2 \"崩溃\" 日志.txt  \n```\n\n输出：\n\n```bash\n[时间] 尝试拯救世界...  \n[时间] 系统崩溃！  \n[时间] 程序员开始砸键盘。  \n```\n\n（破案了：崩溃原因是键盘质量太差！）\n\n#### 7.4.grep的冷知识\n\n* **「我和正则表达式是CP！」** `grep` 的终极技能是**正则表达式**，比如：\n\n  ```\n  grep \"^[A-Z]\" 文件.txt  # 抓所有以大写字母开头的行（适合找嚣张的错误）  \n  ```\n\n  （注：`^` 表示行首，`[A-Z]` 表示大写字母，学废了吗？）\n* **「我比猫（cat）更懂文件！」** 常和 `cat` 勾搭干活，比如：\n\n  ```\n  cat 日志.txt | grep \"error\"  # 先让猫吐文件，再让grep抓重点  \n  ```\n\n  （但其实可以省掉 `cat`：`grep \"error\" 日志.txt`）\n* **「我有个花里胡哨的亲戚------`egrep` 和 `fgrep`！」**\n\n  * `egrep`：支持**扩展正则表达式** （比如 `+`, `?` 不用转义）。\n\n  * `fgrep`：**固定字符串搜索**（速度更快，适合没正则的情况）。\n\n#### **总结：grep の 侦探守则**\n\n```bash\ngrep \"智慧\" 大脑内存.txt  # 输出：查无此词！  \n```\n\n快、准、狠------这是 `grep` 的破案哲学，但请记住：**「比找不到关键词更可怕的，是grep到了老板的敏感词！」**\n\n### 8.总结\n\n今天的博客之旅到这里也就结束了，今天讲述了不少的指令，希望各位读者之后会好好的复习这些代码，不然我就会用mv指令快速移动到你身边然后rm你哦\\~好了，不闹着玩了，指令的记忆不是靠死记硬背，而是靠每天的练习，这样会让自己的记忆变的更加深刻，今天的同居日记已结束，各位朋友们下次见啦！\n\n是![](https://i-blog.csdnimg.cn/direct/5fffc8c9f89347c285cc436f23e13ca0.jpeg)\n',1,0,1,0,0,0,'https://blog.csdn.net/effort123_/article/details/147338970?spm=1000.2115.3001.10524',0,NULL,NULL,'2025-05-23 16:50:28','2025-07-08 22:54:58'),(309,1,40,'常用控件 【多元素类 | 容器类 | 布局类】','http://113.45.240.54:9092/article-cover/f621aea1-986d-4499-a595-cd5ab2e7ddbf_freecompress-Neat-Admin 管理系统 (17).png','常用控件 【多元素类 | 容器类 | 布局类】','<p>🌈 <strong>个人主页：<a href=\"https://blog.csdn.net/weixin_50776420?type=blog\" target=\"_blank\">Zfox_</a></strong><br />\n🔥 <strong>系列专栏：<a href=\"https://blog.csdn.net/weixin_50776420/category_12894253.html?spm=1001.2014.3001.5482\" target=\"_blank\">Qt</a></strong></p>\n<br />\n<h4><a id=\"_8\"></a>目录</h4>\n<ul>\n<li><a href=\"#font_colorDarkOrchid__QT__font_8\">一：🔥 QT 常用控件【多元素类】</a></li>\n<li>\n<ul>\n<li><a href=\"#_List_Widget___32\">🦋 List Widget – 列表</a></li>\n<li><a href=\"#_Table_Widget___110\">🦋 Table Widget – 表格</a></li>\n<li><a href=\"#_Tree_Widget___191\">🦋 Tree Widget – 树形</a></li>\n</ul>\n</li>\n<li><a href=\"#font_colorDarkOrchid_QT__font_273\">二：🔥 QT 常用控件【容器类】</a></li>\n<li>\n<ul>\n<li><a href=\"#_Group_Box___275\">🦋 Group Box – 分组框</a></li>\n<li><a href=\"#_Tab_Widget___301\">🦋 Tab Widget – 标签页</a></li>\n</ul>\n</li>\n<li><a href=\"#font_colorDarkOrchid_QT__font_364\">三：🔥 QT 常用控件【布局类】</a></li>\n<li>\n<ul>\n<li><a href=\"#__376\">🦋 垂直布局</a></li>\n<li>\n<ul>\n<li><a href=\"#__QVBoxLayout__390\">🎀 【使用 QVBoxLayout 管理多个控件】</a></li>\n<li><a href=\"#__QVBoxLayout_404\">🎀 【创建两个 QVBoxLayout】</a></li>\n</ul>\n</li>\n<li><a href=\"#__429\">🦋 水平布局</a></li>\n<li>\n<ul>\n<li><a href=\"#_QHBoxLayout__443\">🎀【使用 QHBoxLayout 管理控件】</a></li>\n<li><a href=\"#_layout_456\">🎀【嵌套的 layout】</a></li>\n</ul>\n</li>\n<li><a href=\"#__466\">🦋 网格布局</a></li>\n<li>\n<ul>\n<li><a href=\"#__QGridLayout__487\">🎀 【使用 QGridLayout 管理元素】</a></li>\n<li><a href=\"#__QGridLayout__504\">🎀 【设置 QGridLayout 中元素的大小比例】</a></li>\n<li><a href=\"#__519\">🎀 【设置垂直方向的拉伸系数】</a></li>\n</ul>\n</li>\n<li><a href=\"#__547\">🦋 表单布局</a></li>\n<li><a href=\"#_Space_565\">🦋 Space</a></li>\n</ul>\n</li>\n<li><a href=\"#font_colorDarkOrchid__font_592\">四：🔥 共勉</a></li>\n</ul>\n<br />\n<h2><a id=\"_QT__40\"></a>一：🔥 QT 常用控件【多元素类】</h2>\n<p>🚇 Qt 中提供的<strong>多元素控件</strong>有：</p>\n<ul>\n<li>QListWidget</li>\n<li>QListView</li>\n<li>QTableWidget</li>\n<li>QTableView</li>\n<li>QTreeWidget</li>\n<li>QTreeView</li>\n</ul>\n<p><strong>xxWidget 和 xxView 之间的区别</strong></p>\n<p>以 QTableWidget 和 QTableView 为例</p>\n<p>QTableView 是基于 MVC 设计的控件</p>\n<ul>\n<li>\n<p>MVC：M(model) 数据，V(view) 界面，C(controller)控制器 数据和视图之间的业务流程</p>\n</li>\n<li>\n<p>QTableView 自身不持有数据，使用 QTableView 的时候需要用户创建一个 Model 对象（比如 QStandardModel），并且把 Model 和 QTableView 关联起来。</p>\n</li>\n<li>\n<p>后续修改 Model 中的数据就会影响 QTableView 的显示，修改 QTableView 的显示也会影响到 Model 中的数据（双向绑定）。</p>\n</li>\n</ul>\n<p><code>QTableWidget</code> 是 <code>QTableView</code> 的子类，对 <code>QTableView</code> 进行了扩展，将 Model 进行了封装，不需要用户手动创建 Model 对象，直接就可以往 <code>QTableWidget</code> 中添加数据了。</p>\n<h3><a id=\"_List_Widget___32_List_Widget___66\"></a>{#_List_Widget___32}🦋 List Widget – 列表</h3>\n<p>使用 QListWidget 能够显示一个纵向的列表组件。形如：</p>\n<table>\n<thead>\n<tr>\n<th>核心属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>currentRow</td>\n<td>当前被选中的是第几行</td>\n</tr>\n<tr>\n<td>count</td>\n<td>一共有多少行</td>\n</tr>\n<tr>\n<td>sortingEnabled</td>\n<td>是否允许排序</td>\n</tr>\n<tr>\n<td>isWrapping</td>\n<td>是否允许换行</td>\n</tr>\n<tr>\n<td>itemAlignment</td>\n<td>元素的对齐方式</td>\n</tr>\n<tr>\n<td>selectRectVisible</td>\n<td>被选中的元素矩形是否可见</td>\n</tr>\n<tr>\n<td>spacing</td>\n<td>元素之间的间隔</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>核心方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>addItem(const QString&amp; label) addItem(QListWidgetItem *item)</td>\n<td>列表中添加元素</td>\n</tr>\n<tr>\n<td>currentItem()</td>\n<td>返回 <code>QListWidgetItem*</code> 表示当前选中的元素</td>\n</tr>\n<tr>\n<td>setCurrentItem(QListWidgetItem* item)</td>\n<td>设置选中哪个元素</td>\n</tr>\n<tr>\n<td>setCurrentRow(int row)</td>\n<td>设置选中第几行的元素</td>\n</tr>\n<tr>\n<td>insertItem(const QString&amp; label, int row) insertItem(QListWidgetItem *item, int row)</td>\n<td>在指定的位置插入元素</td>\n</tr>\n<tr>\n<td>item(int row)</td>\n<td>返回 <code>QListWidgetItem*</code> 表示第 <code>row</code> 行的元素</td>\n</tr>\n<tr>\n<td>takeItem(int row)</td>\n<td><strong>删除</strong> 指定行的元素, 返回 <code>QListWidgetItem*</code> 表示是哪个元素被删除了</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>核心信号</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>currentItemChanged(QListWidgetItem* current, QListWidgetItem* old)</td>\n<td>选中不同元素时会触发. 参数是当前选中的元素和之前选中的元素</td>\n</tr>\n<tr>\n<td>currentRowChanged(int)</td>\n<td>选中不同元素时会触发. 参数是当前选中元素的行数</td>\n</tr>\n<tr>\n<td>itemClicked(QListWidgetItem* item)</td>\n<td>点击某个元素时触发</td>\n</tr>\n<tr>\n<td>itemDoubleClicked(QListWidgetItem* item)</td>\n<td>双击某个元素时触发</td>\n</tr>\n<tr>\n<td>itemEntered(QListWidgetItem* item)</td>\n<td>鼠标进入元素时触发</td>\n</tr>\n</tbody>\n</table>\n<p>在上述介绍中涉及到⼀个关键的类：<strong>QListWidgetItem</strong> ，这个类表示 <code>QListWidget</code> 中的一个元素。核心方法如下，本质上就是⼀个 “文本+图标” 构成的</p>\n<ul>\n<li>setFont: 设置字体</li>\n<li>setIcon: 设置图标</li>\n<li>setHidden: 设置隐藏</li>\n<li>setSizeHint: 设置尺寸</li>\n<li>setSelected: 设置是否选中</li>\n<li>setText: 设置文本</li>\n<li>setTextAlignment: 设置文本对齐方式</li>\n</ul>\n<p>这些方法允许我们自定义 Q List Widget Item 的外观和行为。</p>\n<p>通过结合使用 QListWidget 的属性、方法和信号，以及 <code>QListWidgetItem</code> 的方法，可以创建高度定制化的列表控件。</p>\n<p>使用 ListWidget</p>\n<p>（1）在界面上创建一个 ListView，右键 =&gt; 变形为 =&gt; ListWidget，再创建一个 lineEdit 和两个按钮</p>\n<p>注意：</p>\n<ul>\n<li>ListWidget 是 ListView 的子类，功能比 ListView 更丰富。</li>\n<li>我们使用 ListWidget 即可。</li>\n</ul>\n<p><img src=\"https://i-blog.csdnimg.cn/img_convert/8e51a24ecf705e8e06d27af930066196.png\" alt=\"image-20250120162804519\" /></p>\n<p>（2）编写 widget.cpp，在构造函数中添加初始元素 或者 直接在图形化界面选择 “编辑项目”，编写 listWidget 的 slot 函数，然后编写按钮的 slot 函数</p>\n<ul>\n<li>\n<p>此处编写 listWidget 的 slot 函数：需要判定 current 和 previous 非空，初始情况下是没有元素选中的，就导致这两个指针可能是 NULL。</p>\n</li>\n<li>\n<p>注意：这里需要给 widget.h 前⾯加上 #include ，不然会出现报错</p>\n</li>\n</ul>\n<p>结果如下：</p>\n<h3><a id=\"_Table_Widget___110_Table_Widget___136\"></a>{#_Table_Widget___110}🦋 Table Widget – 表格</h3>\n<p>使用 QTableWidget 表示一个表格控件。一个表格中包含若干行，每一行又包含若干列。</p>\n<p>表格中的每个单元格，是一个 <code>QTableWidge tItem</code> 对象。</p>\n<p><strong>QTableWidget 核心方法</strong></p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>item(int row, int column)</td>\n<td>根据行数列数获取指定的 <code>QTableWidgetItem*</code></td>\n</tr>\n<tr>\n<td>setItem(int row, int column, QTableWidgetItem*)</td>\n<td>根据行数列数设置表格中的元素</td>\n</tr>\n<tr>\n<td>currentItem()</td>\n<td>返回被选中的元素 <code>QTableWidgetItem*</code></td>\n</tr>\n<tr>\n<td>currentRow()</td>\n<td>返回被选中元素是第几行</td>\n</tr>\n<tr>\n<td>currentColumn()</td>\n<td>返回被选中元素是第几列</td>\n</tr>\n<tr>\n<td>row(QTableWidgetItem*)</td>\n<td>获取指定 <code>item</code> 是第几行</td>\n</tr>\n<tr>\n<td>column(QTableWidgetItem*)</td>\n<td>获取指定 <code>item</code> 是第几列</td>\n</tr>\n<tr>\n<td>rowCount()</td>\n<td>获取行数</td>\n</tr>\n<tr>\n<td>columnCount()</td>\n<td>获取列数</td>\n</tr>\n<tr>\n<td>insertRow(int row)</td>\n<td>在第 <code>row</code> 行处插入新行</td>\n</tr>\n<tr>\n<td>insertColumn(int column)</td>\n<td>在第 <code>column</code> 列插入新列</td>\n</tr>\n<tr>\n<td>removeRow(int row)</td>\n<td>删除第 <code>row</code> 行</td>\n</tr>\n<tr>\n<td>removeColumn(int column)</td>\n<td>删除第 <code>column</code> 列</td>\n</tr>\n<tr>\n<td>setHorizontalHeaderItem(int column, QTableWidgetItem*)</td>\n<td>设置指定列的表头</td>\n</tr>\n<tr>\n<td>setVerticalHeaderItem(int row, QTableWidgetItem*)</td>\n<td>设置指定行的表头</td>\n</tr>\n</tbody>\n</table>\n<p><strong>QTableWidget tltem 核心信号</strong></p>\n<table>\n<thead>\n<tr>\n<th>核心信号</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>cellClicked(int row, int column)</td>\n<td>点击单元格时触发</td>\n</tr>\n<tr>\n<td>cellDoubleClicked(int row, int column)</td>\n<td>双击单元格时触发</td>\n</tr>\n<tr>\n<td>cellEntered(int row, int column)</td>\n<td>鼠标进入单元格时触发</td>\n</tr>\n<tr>\n<td>currentCellChanged(int row, int column, int previousRow, int previousColumn)</td>\n<td>选中不同单元格时触发</td>\n</tr>\n</tbody>\n</table>\n<p><strong>QTableWidget tltem 核心方法</strong></p>\n<table>\n<thead>\n<tr>\n<th>核心方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>row()</td>\n<td>获取当前是第几行</td>\n</tr>\n<tr>\n<td>column()</td>\n<td>获取当前是第几列</td>\n</tr>\n<tr>\n<td>setText(const QString&amp;)</td>\n<td>设置文本</td>\n</tr>\n<tr>\n<td>setTextAlignment(int)</td>\n<td>设置文本对齐</td>\n</tr>\n<tr>\n<td>setIcon(const QIcon&amp;)</td>\n<td>设置图标</td>\n</tr>\n<tr>\n<td>setSelected(bool)</td>\n<td>设置被选中</td>\n</tr>\n<tr>\n<td>setSizeHint(const QSize&amp;)</td>\n<td>设置尺寸</td>\n</tr>\n<tr>\n<td>setFont(const QFont&amp;)</td>\n<td>设置字体</td>\n</tr>\n</tbody>\n</table>\n<p>可以通过这些 属性和方法来动态地添加、移除或修改表格内容，以及定制单元格的表现形式，包括文本、对齐方式、图标等。</p>\n<p>同时，利用信号可以<strong>实现用户交互逻辑</strong>，如当用户点击或双击单元格时执行特定的操作。</p>\n<p>使用 TableWidget</p>\n<p>（1）在界面上创建 QTableWidget 和 四个按钮，一个输入框</p>\n<ul>\n<li>\n<p>注意：<code>QTableWidget</code> 是 <code>QTableView</code> 的子类，功能比 <code>QTableView</code> 更丰富。我们使用 <code>QTableWidget</code> 即可。</p>\n</li>\n<li>\n<p>lineEdit 的文本是 右下角的 PlaceholderText 里设置的</p>\n</li>\n</ul>\n<p>（2）编写 widget.cpp 构造函数，构造表格中的初始数据</p>\n<p>（3）编写对应按钮的槽函数</p>\n<p>（4）执行程序，即可完成表格的基本操作</p>\n<ul>\n<li>默认情况下，单元格中的内容直接就是可编辑的。</li>\n<li>如果不想让用户编辑，可以设置 <code>ui-&gt;tableWidget-&gt;setEditTriggers(QAbstractItemView::NoEditTriggers);</code></li>\n</ul>\n<h3><a id=\"_Tree_Widget___191_Tree_Widget___208\"></a>{#_Tree_Widget___191}🦋 Tree Widget – 树形</h3>\n<p>使用 <code>QTreeWidget</code> (树整体 的管理） 表示一个树形控件，里面的每个元素都是一个 QTreeWidge tItem（选中的 某个节点 管理），每个 QTreeWidgetItem 可以包含多个文本和图标，每个文本 / 图标为一个列</p>\n<ul>\n<li>虽然 <code>QTreeWidget</code> 是树形结构，但是这个树形结构没有体验出根节点的，是从根节点的下一次子节点开始</li>\n<li>可以给 <code>QTreeWidget</code> 设置顶层节点（顶层节点可以有多个），然后再给顶层节点添加子节点，从而构成树形结构。</li>\n</ul>\n<p><strong>QTreeWidget 核心方法</strong></p>\n<table>\n<thead>\n<tr>\n<th>核心方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>clear()</td>\n<td>清空所有子节点</td>\n</tr>\n<tr>\n<td>addTopLevelItem(QTreeWidgetItem* item)</td>\n<td>新增顶层节点</td>\n</tr>\n<tr>\n<td>topLevelItem(int index)</td>\n<td>获取指定下标的顶层节点</td>\n</tr>\n<tr>\n<td>topLevelItemCount()</td>\n<td>获取顶层节点个数</td>\n</tr>\n<tr>\n<td>indexOfTopLevelItem(QTreeWidgetItem* item)</td>\n<td>查询指定节点是顶层节点中的下标</td>\n</tr>\n<tr>\n<td>takeTopLevelItem(int index)</td>\n<td>删除指定的顶层节点，返回 <code>QTreeWidgetItem*</code> 表示被删除的元素</td>\n</tr>\n<tr>\n<td>currentItem()</td>\n<td>获取当前选中的节点，返回 <code>QTreeWidgetItem*</code></td>\n</tr>\n<tr>\n<td>setCurrentItem(QTreeWidgetItem* item)</td>\n<td>选中指定节点</td>\n</tr>\n<tr>\n<td>setExpanded(bool)</td>\n<td>展开/关闭节点</td>\n</tr>\n<tr>\n<td>setHeaderLabel(const QString&amp; text)</td>\n<td>设置 <code>TreeWidget</code> 的 header 名称</td>\n</tr>\n</tbody>\n</table>\n<p><strong>QTreeWidget 核心信号</strong></p>\n<table>\n<thead>\n<tr>\n<th>核心信号</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>currentItemChanged(QTreeWidgetItem* current, QTreeWidgetItem* old)</td>\n<td>切换选中元素时触发</td>\n</tr>\n<tr>\n<td>itemClicked(QTreeWidgetItem* item, int col)</td>\n<td>点击元素时触发</td>\n</tr>\n<tr>\n<td>itemDoubleClicked(QTreeWidgetItem* item, int col)</td>\n<td>双击元素时触发</td>\n</tr>\n<tr>\n<td>itemEntered(QTreeWidgetItem* item, int col)</td>\n<td>鼠标进入时触发</td>\n</tr>\n<tr>\n<td>itemExpanded(QTreeWidgetItem* item)</td>\n<td>元素被展开时触发</td>\n</tr>\n<tr>\n<td>itemCollapsed(QTreeWidgetItem* item)</td>\n<td>元素被折叠时触发</td>\n</tr>\n</tbody>\n</table>\n<p><strong>QTreeWidget tltem 核心属性</strong></p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>text</td>\n<td>持有的文本</td>\n</tr>\n<tr>\n<td>textAlignment</td>\n<td>文本对齐方式</td>\n</tr>\n<tr>\n<td>icon</td>\n<td>持有的图标</td>\n</tr>\n<tr>\n<td>font</td>\n<td>文本字体</td>\n</tr>\n<tr>\n<td>hidden</td>\n<td>是否隐藏</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>是否禁用</td>\n</tr>\n<tr>\n<td>expanded</td>\n<td>是否展开</td>\n</tr>\n<tr>\n<td>sizeHint</td>\n<td>尺寸大小</td>\n</tr>\n<tr>\n<td>selected</td>\n<td>是否选中</td>\n</tr>\n</tbody>\n</table>\n<p><strong>QTreeWidget tltem 核心信号</strong></p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>addChild(QTreeWidgetItem* child)</td>\n<td>新增子节点</td>\n</tr>\n<tr>\n<td>childCount()</td>\n<td>子节点的个数</td>\n</tr>\n<tr>\n<td>child(int index)</td>\n<td>获取指定下标的子节点，返回 <code>QTreeWidgetItem*</code></td>\n</tr>\n<tr>\n<td>takeChild(int index)</td>\n<td>删除对应下标的子节点</td>\n</tr>\n<tr>\n<td>removeChild(QTreeWidgetItem* child)</td>\n<td>删除对应的子节点</td>\n</tr>\n<tr>\n<td>parent()</td>\n<td>获取该元素的父节点</td>\n</tr>\n</tbody>\n</table>\n<p>通过上述提供的方法和信号，可以创建、管理和操作树形结构的数据，并响应用户的交互。<code>QTreeWidgetItem</code> 提供了更多的<strong>细粒度控制，允许 定制每个项的表现形式和行为</strong>。</p>\n<p>使用 TreeWidget</p>\n<p>（1）在界面上创建一个 TreeView，右键 =&gt; 变形为 =&gt; TreeWidget，再创建一个 lineEdit 和两个按钮</p>\n<ul>\n<li>注意：TreeWidget 是 TreeView 的子类，功能比 TreeView 更丰富。我们使用 TreeWidget 即可。</li>\n</ul>\n<p>（2）编写代码，构造初始数据</p>\n<p>（3）编写代码，实现按钮的 slot 函数</p>\n<p>（4）执行程序，可以针对树形框进行编辑，如下：</p>\n<h2><a id=\"font_colorDarkOrchid_QT__font_273_QT__284\"></a>{#font_colorDarkOrchid_QT__font_273}二：🔥 QT 常用控件【容器类】</h2>\n<h3><a id=\"_Group_Box___275_Group_Box___287\"></a>{#_Group_Box___275}🦋 Group Box – 分组框</h3>\n<p>使用 <code>QGroupBox</code> 实现一个带有标题的分组框，可以把其他的控件放到里面作为一组，这样看起来能更好看一点。</p>\n<p>注意：不要把 QGroupBox 和 QButtonGroup 混淆（之前在介绍 QRadionButton 的时候提到了 QButtonGroup）。</p>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>title</td>\n<td>分组框的标题</td>\n</tr>\n<tr>\n<td>alignment</td>\n<td>分组框内部内容的对齐方式</td>\n</tr>\n<tr>\n<td>flat</td>\n<td>是否是 “扁平” 模式；设置为 <code>true</code>时，分组框将不显示边框，呈现扁平化外观</td>\n</tr>\n<tr>\n<td>checkable</td>\n<td>是否可选择；设为 <code>true</code>，则在 <code>title</code>前方会多出一个可勾选的部分</td>\n</tr>\n<tr>\n<td>checked</td>\n<td>描述分组框的选择状态（前提是 <code>checkable</code>为 <code>true</code>）</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>分组框 只是一个用来 “美化界面” 这样的组件，并不涉及到用户交互和业务逻辑，属于 “锦上添花”。</li>\n</ul>\n<p>使用 Group Box</p>\n<p>在界面上创建两个分组框，并且在分组框内部创建下拉框和微调框</p>\n<ul>\n<li>注意：在复制粘贴控件的时候，一定要先选中对应的父控件，再粘贴</li>\n</ul>\n<h3><a id=\"_Tab_Widget___301_Tab_Widget___311\"></a>{#_Tab_Widget___301}🦋 Tab Widget – 标签页</h3>\n<p>使用 <code>QTabWidget</code> 实现一个带有标签页的控件，可以往里面添加一些 widget，进一步的就可以通过标签页切换。</p>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>tabPosition</td>\n<td>标签页所在的位置： - North 上方 - South 下方 - West 左侧 - East 右侧</td>\n</tr>\n<tr>\n<td>currentIndex</td>\n<td>当前选中了第几个标签页（从0开始计算）</td>\n</tr>\n<tr>\n<td>currentTabText</td>\n<td>当前选中的标签页的文本</td>\n</tr>\n<tr>\n<td>currentTabName</td>\n<td>当前选中的标签页的名字</td>\n</tr>\n<tr>\n<td>currentTabIcon</td>\n<td>当前选中的标签页的图标</td>\n</tr>\n<tr>\n<td>currentTabToolTip</td>\n<td>当前选中的标签页的提示信息</td>\n</tr>\n<tr>\n<td>tabsClosable</td>\n<td>标签页是否可以关闭</td>\n</tr>\n<tr>\n<td>movable</td>\n<td>标签页是否可以移动</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th><strong>信号</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>currentChanged(int)</td>\n<td>在标签页发生切换时触发，参数为被点击的选项卡编号。</td>\n</tr>\n<tr>\n<td>tabBarClicked(int)</td>\n<td>在点击选项卡的标签条的时候触发，参数为被点击的选项卡编号。</td>\n</tr>\n<tr>\n<td>tabBarDoubleClicked(int)</td>\n<td>在双击选项卡的标签条的时候触发，参数为被点击的选项卡编号。</td>\n</tr>\n<tr>\n<td>tabCloseRequested(int)</td>\n<td>在标签页关闭请求时触发，参数为被请求关闭的选项卡编号。</td>\n</tr>\n</tbody>\n</table>\n<p>使用标签页管理多组控件</p>\n<p>（1）在界面上创建一个 QTabWidget 和两个按钮</p>\n<p><strong>注意 ：</strong></p>\n<ul>\n<li>QTabWidget 中的每个标签页都是⼀个 QWidget</li>\n<li>点击标签页就可以直接切换</li>\n<li>右键 QTabWidget，可以添加标签页或者删除标签页</li>\n</ul>\n<p>（2）编写 widget.cpp，进行初始化，给标签页中放个简单的 label</p>\n<ul>\n<li>注意新创建的 label 的父元素，是 ui-&gt;tab 和 ui-&gt;tab_2</li>\n<li>Qt 中使用父子关系决定该控件 “在哪里”</li>\n</ul>\n<p>然后再编写按钮的 slot 函数 和 QTabWidget 的 <code>currentChanged</code> 函数</p>\n<ul>\n<li>使用 count() 获取到标签页的个数</li>\n<li>使用 addTab 新增标签页</li>\n<li>使用 removeTab 删除标签页</li>\n<li>使用 currentIndex 获取到当前标签页的下标</li>\n<li>使用 setCurrentIndex 切换当前标签页</li>\n</ul>\n<p>（3）运行程序</p>\n<ul>\n<li>点击新建标签页，可以创建出新的标签</li>\n<li>点击删除当前标签页，可以删除标签</li>\n<li>切换标签页时，可以看到 qDebug 打印出的标签页编号</li>\n</ul>\n<p><img src=\"https://i-blog.csdnimg.cn/img_convert/cd43000e65eab433a23a1a62196f0810.gif\" alt=\"\" /></p>\n<h2><a id=\"font_colorDarkOrchid_QT__font_364_QT__368\"></a>{#font_colorDarkOrchid_QT__font_364}三：🔥 QT 常用控件【布局类】</h2>\n<ul>\n<li>\n<p>之前使用 Qt 在界面上创建的控件都是通过 “绝对定位” 的方式来设定的，也就是每个控件所在的位置都需要计算坐标，最终通过 setGeometry 或者 move 方式摆放过去</p>\n</li>\n<li>\n<p>这种设定方式其实并不方便，尤其是界面如果 内容比较多，不好计算，而且一个窗口大小往往是可以调整的，按照绝对定位的方式，也无法自适应窗口大小。</p>\n</li>\n<li>\n<p>因此 Qt 引入 “布局管理器”（Layout）机制 来解决上述问题。</p>\n</li>\n</ul>\n<blockquote>\n<p>当然，布局管理器并非 Qt 独有。其他的 GUI 开发框架，像 Android、前端等也有类似的机制。</p>\n</blockquote>\n<h3><a id=\"__376__379\"></a>{#__376}🦋 垂直布局</h3>\n<p>🎢 使用 QVBoxLayout 表示垂直的布局管理器，V 是 vertical 的缩写。</p>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>layoutLeftMargin</td>\n<td>左侧边距，设置或获取布局内容与容器左边界的距离</td>\n</tr>\n<tr>\n<td>layoutRightMargin</td>\n<td>右侧边距，设置或获取布局内容与容器右边界的距离</td>\n</tr>\n<tr>\n<td>layoutTopMargin</td>\n<td>上方边距，设置或获取布局内容与容器上边界的距离</td>\n</tr>\n<tr>\n<td>layoutBottomMargin</td>\n<td>下方边距，设置或获取布局内容与容器下边界的距离</td>\n</tr>\n<tr>\n<td>layoutSpacing</td>\n<td>相邻元素之间的间距，设置或获取布局中各元素之间的默认间隔</td>\n</tr>\n</tbody>\n</table>\n<p>Layout 只是用于界面布局，并没有提供信号</p>\n<h4><a id=\"__QVBoxLayout__390__QVBoxLayout__393\"></a>{#__QVBoxLayout__390}🎀 【使用 QVBoxLayout 管理多个控件】</h4>\n<p>编写代码，创建布局管理器和三个按钮，并且把按钮添加到布局管理器中</p>\n<ul>\n<li>使用 addWidget 把控件添加到布局管理器中</li>\n<li>使用 setLayout 设置该布局管理器到 widget 中</li>\n</ul>\n<p><img src=\"https://i-blog.csdnimg.cn/img_convert/34c1156fbca76b0e9b025af5b3f896b7.png\" alt=\"image-20250120214432395\" /></p>\n<ul>\n<li>可以看到此时界面上的按钮就存在于布局管理器中，随着窗口尺存变化而发生改变。</li>\n<li>此时的三个按钮的尺存和位置都是自动计算出来的。</li>\n</ul>\n<h4><a id=\"__QVBoxLayout_404__QVBoxLayout_405\"></a>{#__QVBoxLayout_404}🎀 【创建两个 QVBoxLayout】</h4>\n<p>🔥 在上面通过上述代码的方式，只能给这个 widget <strong>设定一个布局管理器</strong> 。实际上也可以通过 Qt Design 在一个窗口中创建多个布局管理器，如下操作：</p>\n<p>（1）在界面上创建两个 <code>QVBoxLayout</code>，每个 <code>QVBoxLayout</code> 各放三个按钮</p>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/211ca554-fdcc-4e7c-b3f1-e5364642c2da_daf20867fa263135d745d5d8e210d31a.png\" alt=\"daf20867fa263135d745d5d8e210d31a.png\" /></p>\n<p>（2）运行程序</p>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/de19e1a7-7496-43d9-a819-791c83085a29_beb73aaad8ae64dbf469896920009d51.png\" alt=\"beb73aaad8ae64dbf469896920009d51.png\" /></p>\n<ul>\n<li>可以看到这些按钮已经自动排列好，只不过<strong>当前这些按钮的位置不能随着窗口大小自动变化</strong>。</li>\n</ul>\n<p>通过 <code>Qt Designer</code> 创建的布局管理，其实是先创建了一个 widget，设置过 geometry 属性的，再把这个 layout 设置到这个 widget 中</p>\n<blockquote>\n<ul>\n<li>实际上，一个 widget 只能包含一个 layout。</li>\n<li>打开 ui 文件的原始 xml，可以看到其中的端倪。这种情况下 layout 并非是窗口 widget 的布局管理器，因此不会随着窗口大小改变。</li>\n</ul>\n</blockquote>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/7f7878ea-7fc9-4eae-aded-b780369ec9a5_fbd2152d308de947f0f46a0e6aa0bd01.png\" alt=\"fbd2152d308de947f0f46a0e6aa0bd01.png\" /></p>\n<h3><a id=\"__429__425\"></a>{#__429}🦋 水平布局</h3>\n<p>使用 QHBoxLayout 表示垂直的布局管理器，H 是 horizontal 的缩写。</p>\n<ul>\n<li>核心属性（和 QVBoxLayout 属性是一致的）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>layoutLeftMargin</td>\n<td>左侧边距</td>\n</tr>\n<tr>\n<td>layoutRightMargin</td>\n<td>右侧边距</td>\n</tr>\n<tr>\n<td>layoutTopMargin</td>\n<td>上方边距</td>\n</tr>\n<tr>\n<td>layoutBottomMargin</td>\n<td>下方边距</td>\n</tr>\n<tr>\n<td>layoutSpacing</td>\n<td>相邻元素之间的间距</td>\n</tr>\n</tbody>\n</table>\n<h4><a id=\"_QHBoxLayout__443_QHBoxLayout__439\"></a>{#_QHBoxLayout__443}🎀【使用 QHBoxLayout 管理控件】</h4>\n<p>编写代码，创建布局管理器和三个按钮，并且把按钮添加到布局管理器中，并且运行</p>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/890ac706-7ba7-47b9-9421-754005edf416_a7217858fb6aa5dd3f69b14841d0c697.png\" alt=\"a7217858fb6aa5dd3f69b14841d0c697.png\" /></p>\n<ul>\n<li>可以看到此时界面上的按钮就存在于布局管理器中，随着窗口尺寸变化而发生改变。</li>\n<li>此时的三个按钮的尺存和位置都是自动计算出来的</li>\n</ul>\n<p>Layout 里面可以再嵌套上其他的 layout，从而达到更复杂的布局效果</p>\n<h4><a id=\"_layout_456_layout_450\"></a>{#_layout_456}🎀【嵌套的 layout】</h4>\n<p>在代码中创建以下内容，使用 <code>addLayout</code> 给 layout 中添加子 layout，并且运行程序</p>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/a5172366-8d12-405f-9edd-f79ffe8e19b8_9e634c4f5f4ae26a821391fc4ad962e5.png\" alt=\"9e634c4f5f4ae26a821391fc4ad962e5.png\" /></p>\n<p>结论：结合 QHBoxLayout 和 QVBoxLayout， 就可以做出各种复杂的界面了</p>\n<h3><a id=\"__466__458\"></a>{#__466}🦋 网格布局</h3>\n<p>Qt 中还提供了 QGridLayout 用来实现网格布局的效果，可以达到 <em><strong>*M * N*</strong></em> 的这种网格的效果。</p>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>layoutLeftMargin</td>\n<td>左侧边距</td>\n</tr>\n<tr>\n<td>layoutRightMargin</td>\n<td>右侧边距</td>\n</tr>\n<tr>\n<td>layoutTopMargin</td>\n<td>上方边距</td>\n</tr>\n<tr>\n<td>layoutBottomMargin</td>\n<td>下方边距</td>\n</tr>\n<tr>\n<td>layoutHorizontalSpacing</td>\n<td>相邻元素之间水平方向的间距</td>\n</tr>\n<tr>\n<td>layoutVerticalSpacing</td>\n<td>相邻元素之间垂直方向的间距</td>\n</tr>\n<tr>\n<td>layoutRowStretch</td>\n<td>行方向的拉伸系数</td>\n</tr>\n<tr>\n<td>layoutColumnStretch</td>\n<td>列方向的拉伸系数</td>\n</tr>\n</tbody>\n</table>\n<p>整体和 <code>QVBoxLayout</code> 以及<code>QHBoxLayout</code> 相似</p>\n<p>但是设置 spacing 的时候是按照垂直水平两个方向来设置的。</p>\n<h4><a id=\"__QGridLayout__487__QGridLayout__477\"></a>{#__QGridLayout__487}🎀 【使用 QGridLayout 管理元素】</h4>\n<p>代码中创建 QGridLayout 和 4 个按钮</p>\n<ul>\n<li>\n<p>使用 addWidget 添加控件到布局管理器中，但是添加的同时会指定两个<strong>坐标</strong>，表示放在第几行，第几列。</p>\n</li>\n<li>\n<p>当然如果调整行列坐标全部为0的话，那么这四个按钮都在一行，就相当于 <strong>QHBoxLayout</strong></p>\n</li>\n</ul>\n<blockquote>\n<p>注意 ：</p>\n<ul>\n<li>设置行和列的时候，如果设置的是一个很大的值，但是这个值和上一个值之间并没有其他的元素，那么并不会在中间腾出额外的空间</li>\n<li>比如：把 button4 设置在第 100 行，但是由于 3-99 行没有元素，因此 button4 仍然会紧挨在 button3 下方看起来和上面的 0 1 2 3 的情况是相同的。</li>\n</ul>\n</blockquote>\n<h4><a id=\"__QGridLayout__504__QGridLayout__490\"></a>{#__QGridLayout__504}🎀 【设置 QGridLayout 中元素的大小比例】</h4>\n<p>创建 6 个按钮，按照 2 行 3 列的方式排列，使用 <code>setColumnStretch</code> 设置每一列的拉伸系数：</p>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/bc81107d-a81f-4c35-bf9a-efdfdd9cbbe6_3d4dcb7d2c9ec7849f39d113ab6247b4.png\" alt=\"3d4dcb7d2c9ec7849f39d113ab6247b4.png\" /></p>\n<ul>\n<li>另外，QGridLayout 也提供了 <code>setRowStretch</code> 设置行之间的拉伸系数</li>\n<li>上述案例中，直接设置 <code>setRowStretch</code> 效果不明显，因为<strong>每个按钮的高度是固定的</strong>。</li>\n<li>需要把按钮的垂直方向的 sizePolicy 属性设置为 <code>QSizePolicy::Expanding</code> 尽可能填充满布局管理器，才能看到效果。</li>\n</ul>\n<p>如果<strong>拉伸系数设为 0，意思是不参与拉伸，此时按钮的宽度是固定值</strong>。</p>\n<h4><a id=\"__519__502\"></a>{#__519}🎀 【设置垂直方向的拉伸系数】</h4>\n<p>编写代码, 创建 6 个按钮, 按照 3 行 2 列方式排列，使用 setSizePolicy 设置按钮的尺寸策略，可选的值如下：</p>\n<ul>\n<li>QSizePolicy::Ignored：忽略控件的尺寸，不对布局产生影响。</li>\n<li>QSizePolicy::Minimum：控件的最小尺寸为固定值，布局时不会超过该值。</li>\n<li>QSizePolicy::Maximum：控件的最大尺寸为固定值，布局时不会小于该值。</li>\n<li>QSizePolicy::Preferred：控件的理想尺寸为固定值，布局时会尽量接近该值。</li>\n<li>QSizePolicy::Expanding：控件的尺寸可以根据空间调整，尽可能占据更多空间。</li>\n<li>QSizePolicy::Shrinking：控件的尺寸可以根据空间调整，尽可能缩小以适应空间。</li>\n</ul>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/fa678876-c19b-4f96-9a7c-7ce1890e55cd_a1efd9f51729c8681bcd091d06c027f1.png\" alt=\"a1efd9f51729c8681bcd091d06c027f1.png\" /></p>\n<blockquote>\n<p>此时的按钮垂直方向都舒展开了，并且调整窗口尺寸，也会按照设定的比例同步变化。</p>\n</blockquote>\n<p>💡 结论：</p>\n<ul>\n<li>\n<p>总的来说，使用 <code>QGridLayout</code> 能够代替很多 <code>QHBoxLayout</code> 和 <code>QVBoxLayout</code> 嵌套的场景。毕竟嵌套的代码写起来是比较麻烦的。</p>\n</li>\n<li>\n<p>另外不要忘了，<code>QGridLayout</code> 里面也能嵌套 <code>QHBoxLayout</code> 和 <code>QVBoxLayout</code>，<code>QHBoxLayout</code> 和 <code>QVBoxLayout </code>里面也能嵌套 <code>QGridLayout</code></p>\n</li>\n<li>\n<p>灵活使用上述布局管理器就可以实现出任意的复杂界面。</p>\n</li>\n</ul>\n<h3><a id=\"__547__524\"></a>{#__547}🦋 表单布局</h3>\n<p>除了上述的布局管理器之外，Qt 还提供了 QFormLayout，属于是 QGridLayout 的特殊情况，专门用于实现两列表单的布局。</p>\n<p>这种表单布局多用于让用户 填写信息的场景，左侧列为提示，右侧列为输入框</p>\n<p>【使用 QFormLayout 创建表单】</p>\n<p>编写代码，创建 <code>QFormLayout</code>，以及两个 label 和两个 lineEdit</p>\n<ul>\n<li>使用 addRow 方法来添加一行，每行包含两个控件。</li>\n<li>第一个控件固定是 QLabel / 文本，第二个控件则可以是任意控件。</li>\n<li>如果把第⼀个参数填写为 <code>NULL</code>，则什么都不显示。</li>\n</ul>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/dbd35d6b-baa8-4035-aaf2-68a335b38f73_b8d51ad8e2a4c2dc2600002bca661b1d.png\" alt=\"b8d51ad8e2a4c2dc2600002bca661b1d.png\" /></p>\n<h3><a id=\"_Space_565_Space_540\"></a>{#_Space_565}🦋 Space</h3>\n<p>使用布局管理器的时候，可能需要在控件之间添加一段空白，就可以使用 <code>QSpacerItem</code> 来表示。</p>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>width</td>\n<td>宽度</td>\n</tr>\n<tr>\n<td>height</td>\n<td>高度</td>\n</tr>\n<tr>\n<td>hData</td>\n<td>水平方向的 sizePolicy - QSizePolicy::Ignored: 忽略控件的尺寸，不对布局产生影响。 - QSizePolicy::Minimum: 控件的最小尺寸为固定值，布局时不会超过该值。 QSizePolicy::Maximum: 控件的最大尺寸为固定值，布局时不会小于该值。 QSizePolicy::Preferred: 控件的理想尺寸为固定值，布局时会尽量接近该值。 QSizePolicy::Expanding: 控件的尺寸可以根据空间调整，尽可能占据更多空间。 QSizePolicy::Shrinking: 控件的尺寸可以根据空间调整，尽可能缩小以适应空间。</td>\n</tr>\n<tr>\n<td>vData</td>\n<td>垂直方向的 <code>sizePolicy</code> 选项同上。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>注意：上述属性在构造函数设置即可</li>\n</ul>\n<p>【创建一组左右排列的按钮】</p>\n<p>在界面上创建一个 <code>QVBoxLayout</code> ，并添加两个按钮，在上面运行结果中我们可以知道这个肯定是紧挨的，但是如果在两个按钮中间添加一个 spacer，会咋样呢，如下：</p>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/8693e776-e109-404d-82c4-136e83c8200f_94b6966ec49d2cd40042bf66bccb8c53.png\" alt=\"94b6966ec49d2cd40042bf66bccb8c53.png\" /></p>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/232bd1d9-dbc4-42f8-bbb4-844780e9b65b_068ef0116140b189a860dcdfef5d6375.png\" alt=\"068ef0116140b189a860dcdfef5d6375.png\" /></p>\n<ul>\n<li>在 Qt Designer 中，也可以直接给界面上添加 spacer：</li>\n</ul>\n<p><img src=\"http://127.0.0.1:80/localFile/local-plus/20250629/article-content/617259a9-3932-4427-875c-ae64300d6669_1381299fac0b11ae9a5f5338e5847ae7.png\" alt=\"1381299fac0b11ae9a5f5338e5847ae7.png\" /></p>\n<h2><a id=\"font_colorDarkOrchid__font_592__565\"></a>{#font_colorDarkOrchid__font_592}四：🔥 共勉</h2>\n<p>😋 以上就是我对 <strong><code>【QT】常用控件 【多元素类 | 容器类 | 布局类】</code></strong> 的理解, 觉得这篇博客对你有帮助的，可以点赞收藏关注支持一波~ 😉</p>\n','\n\n🌈 **个人主页：[Zfox_](https://blog.csdn.net/weixin_50776420?type=blog)**   \n🔥 **系列专栏：[Qt](https://blog.csdn.net/weixin_50776420/category_12894253.html?spm=1001.2014.3001.5482)**\n\n\n<br />\n\n#### 目录\n\n* [一：🔥 QT 常用控件【多元素类】](#font_colorDarkOrchid__QT__font_8)\n*\n  * [🦋 List Widget -- 列表](#_List_Widget___32)\n  * [🦋 Table Widget -- 表格](#_Table_Widget___110)\n  * [🦋 Tree Widget -- 树形](#_Tree_Widget___191)\n* [二：🔥 QT 常用控件【容器类】](#font_colorDarkOrchid_QT__font_273)\n*\n  * [🦋 Group Box -- 分组框](#_Group_Box___275)\n  * [🦋 Tab Widget -- 标签页](#_Tab_Widget___301)\n* [三：🔥 QT 常用控件【布局类】](#font_colorDarkOrchid_QT__font_364)\n*\n  * [🦋 垂直布局](#__376)\n  *\n    * [🎀 【使用 QVBoxLayout 管理多个控件】](#__QVBoxLayout__390)\n    * [🎀 【创建两个 QVBoxLayout】](#__QVBoxLayout_404)\n  * [🦋 水平布局](#__429)\n  *\n    * [🎀【使用 QHBoxLayout 管理控件】](#_QHBoxLayout__443)\n    * [🎀【嵌套的 layout】](#_layout_456)\n  * [🦋 网格布局](#__466)\n  *\n    * [🎀 【使用 QGridLayout 管理元素】](#__QGridLayout__487)\n    * [🎀 【设置 QGridLayout 中元素的大小比例】](#__QGridLayout__504)\n    * [🎀 【设置垂直方向的拉伸系数】](#__519)\n  * [🦋 表单布局](#__547)\n  * [🦋 Space](#_Space_565)\n* [四：🔥 共勉](#font_colorDarkOrchid__font_592)\n\n<br />\n\n一：🔥 QT 常用控件【多元素类】 \n----------------------------------------------------------------------\n\n🚇 Qt 中提供的**多元素控件**有：\n\n* QListWidget\n* QListView\n* QTableWidget\n* QTableView\n* QTreeWidget\n* QTreeView\n\n**xxWidget 和 xxView 之间的区别**\n\n以 QTableWidget 和 QTableView 为例\n\nQTableView 是基于 MVC 设计的控件\n\n* MVC：M(model) 数据，V(view) 界面，C(controller)控制器 数据和视图之间的业务流程\n\n* QTableView 自身不持有数据，使用 QTableView 的时候需要用户创建一个 Model 对象（比如 QStandardModel），并且把 Model 和 QTableView 关联起来。\n\n* 后续修改 Model 中的数据就会影响 QTableView 的显示，修改 QTableView 的显示也会影响到 Model 中的数据（双向绑定）。\n\n`QTableWidget` 是 `QTableView` 的子类，对 `QTableView` 进行了扩展，将 Model 进行了封装，不需要用户手动创建 Model 对象，直接就可以往 `QTableWidget` 中添加数据了。\n\n### {#_List_Widget___32}🦋 List Widget -- 列表\n\n使用 QListWidget 能够显示一个纵向的列表组件。形如：\n\n\n|       核心属性        |      说明      |\n|-------------------|--------------|\n| currentRow        | 当前被选中的是第几行   |\n| count             | 一共有多少行       |\n| sortingEnabled    | 是否允许排序       |\n| isWrapping        | 是否允许换行       |\n| itemAlignment     | 元素的对齐方式      |\n| selectRectVisible | 被选中的元素矩形是否可见 |\n| spacing           | 元素之间的间隔      |\n\n|                                          核心方法                                          |                        说明                        |\n|----------------------------------------------------------------------------------------|--------------------------------------------------|\n| addItem(const QString\\& label) addItem(QListWidgetItem \\*item)                         | 列表中添加元素                                          |\n| currentItem()                                                                          | 返回 `QListWidgetItem*` 表示当前选中的元素                  |\n| setCurrentItem(QListWidgetItem\\* item)                                                 | 设置选中哪个元素                                         |\n| setCurrentRow(int row)                                                                 | 设置选中第几行的元素                                       |\n| insertItem(const QString\\& label, int row) insertItem(QListWidgetItem \\*item, int row) | 在指定的位置插入元素                                       |\n| item(int row)                                                                          | 返回 `QListWidgetItem*` 表示第 `row` 行的元素             |\n| takeItem(int row)                                                                      | **删除** 指定行的元素, 返回 `QListWidgetItem*` 表示是哪个元素被删除了 |\n\n|                                 核心信号                                 |               说明               |\n|----------------------------------------------------------------------|--------------------------------|\n| currentItemChanged(QListWidgetItem\\* current, QListWidgetItem\\* old) | 选中不同元素时会触发. 参数是当前选中的元素和之前选中的元素 |\n| currentRowChanged(int)                                               | 选中不同元素时会触发. 参数是当前选中元素的行数       |\n| itemClicked(QListWidgetItem\\* item)                                  | 点击某个元素时触发                      |\n| itemDoubleClicked(QListWidgetItem\\* item)                            | 双击某个元素时触发                      |\n| itemEntered(QListWidgetItem\\* item)                                  | 鼠标进入元素时触发                      |\n\n在上述介绍中涉及到⼀个关键的类：**QListWidgetItem** ，这个类表示 `QListWidget` 中的一个元素。核心方法如下，本质上就是⼀个 \"文本+图标\" 构成的\n\n* setFont: 设置字体\n* setIcon: 设置图标\n* setHidden: 设置隐藏\n* setSizeHint: 设置尺寸\n* setSelected: 设置是否选中\n* setText: 设置文本\n* setTextAlignment: 设置文本对齐方式\n\n这些方法允许我们自定义 Q List Widget Item 的外观和行为。\n\n通过结合使用 QListWidget 的属性、方法和信号，以及 `QListWidgetItem` 的方法，可以创建高度定制化的列表控件。\n\n使用 ListWidget\n\n（1）在界面上创建一个 ListView，右键 =\\> 变形为 =\\> ListWidget，再创建一个 lineEdit 和两个按钮\n\n注意：\n\n* ListWidget 是 ListView 的子类，功能比 ListView 更丰富。\n* 我们使用 ListWidget 即可。\n\n![image-20250120162804519](https://i-blog.csdnimg.cn/img_convert/8e51a24ecf705e8e06d27af930066196.png)\n\n（2）编写 widget.cpp，在构造函数中添加初始元素 或者 直接在图形化界面选择 \"编辑项目\"，编写 listWidget 的 slot 函数，然后编写按钮的 slot 函数\n\n* 此处编写 listWidget 的 slot 函数：需要判定 current 和 previous 非空，初始情况下是没有元素选中的，就导致这两个指针可能是 NULL。\n\n\n\n* 注意：这里需要给 widget.h 前⾯加上 #include ，不然会出现报错\n\n结果如下：\n\n\n\n### {#_Table_Widget___110}🦋 Table Widget -- 表格\n\n使用 QTableWidget 表示一个表格控件。一个表格中包含若干行，每一行又包含若干列。\n\n表格中的每个单元格，是一个 `QTableWidge tItem` 对象。\n\n**QTableWidget 核心方法**\n\n|                           方法                            |               说明                |\n|---------------------------------------------------------|---------------------------------|\n| item(int row, int column)                               | 根据行数列数获取指定的 `QTableWidgetItem*` |\n| setItem(int row, int column, QTableWidgetItem\\*)        | 根据行数列数设置表格中的元素                  |\n| currentItem()                                           | 返回被选中的元素 `QTableWidgetItem*`    |\n| currentRow()                                            | 返回被选中元素是第几行                     |\n| currentColumn()                                         | 返回被选中元素是第几列                     |\n| row(QTableWidgetItem\\*)                                 | 获取指定 `item` 是第几行                |\n| column(QTableWidgetItem\\*)                              | 获取指定 `item` 是第几列                |\n| rowCount()                                              | 获取行数                            |\n| columnCount()                                           | 获取列数                            |\n| insertRow(int row)                                      | 在第 `row` 行处插入新行                 |\n| insertColumn(int column)                                | 在第 `column` 列插入新列               |\n| removeRow(int row)                                      | 删除第 `row` 行                     |\n| removeColumn(int column)                                | 删除第 `column` 列                  |\n| setHorizontalHeaderItem(int column, QTableWidgetItem\\*) | 设置指定列的表头                        |\n| setVerticalHeaderItem(int row, QTableWidgetItem\\*)      | 设置指定行的表头                        |\n\n**QTableWidget tltem 核心信号**\n\n|                                     核心信号                                     |     说明     |\n|------------------------------------------------------------------------------|------------|\n| cellClicked(int row, int column)                                             | 点击单元格时触发   |\n| cellDoubleClicked(int row, int column)                                       | 双击单元格时触发   |\n| cellEntered(int row, int column)                                             | 鼠标进入单元格时触发 |\n| currentCellChanged(int row, int column, int previousRow, int previousColumn) | 选中不同单元格时触发 |\n\n**QTableWidget tltem 核心方法**\n\n|            核心方法            |    说明    |\n|----------------------------|----------|\n| row()                      | 获取当前是第几行 |\n| column()                   | 获取当前是第几列 |\n| setText(const QString\\&)   | 设置文本     |\n| setTextAlignment(int)      | 设置文本对齐   |\n| setIcon(const QIcon\\&)     | 设置图标     |\n| setSelected(bool)          | 设置被选中    |\n| setSizeHint(const QSize\\&) | 设置尺寸     |\n| setFont(const QFont\\&)     | 设置字体     |\n\n可以通过这些 属性和方法来动态地添加、移除或修改表格内容，以及定制单元格的表现形式，包括文本、对齐方式、图标等。\n\n同时，利用信号可以**实现用户交互逻辑**，如当用户点击或双击单元格时执行特定的操作。\n\n使用 TableWidget\n\n（1）在界面上创建 QTableWidget 和 四个按钮，一个输入框\n\n* 注意：`QTableWidget` 是 `QTableView` 的子类，功能比 `QTableView` 更丰富。我们使用 `QTableWidget` 即可。\n\n\n\n* lineEdit 的文本是 右下角的 PlaceholderText 里设置的\n\n（2）编写 widget.cpp 构造函数，构造表格中的初始数据\n\n（3）编写对应按钮的槽函数\n\n（4）执行程序，即可完成表格的基本操作\n\n\n* 默认情况下，单元格中的内容直接就是可编辑的。\n* 如果不想让用户编辑，可以设置 `ui->tableWidget->setEditTriggers(QAbstractItemView::NoEditTriggers);`\n\n### {#_Tree_Widget___191}🦋 Tree Widget -- 树形\n\n使用 `QTreeWidget` (树整体 的管理） 表示一个树形控件，里面的每个元素都是一个 QTreeWidge tItem（选中的 某个节点 管理），每个 QTreeWidgetItem 可以包含多个文本和图标，每个文本 / 图标为一个列\n\n* 虽然 `QTreeWidget` 是树形结构，但是这个树形结构没有体验出根节点的，是从根节点的下一次子节点开始\n* 可以给 `QTreeWidget` 设置顶层节点（顶层节点可以有多个），然后再给顶层节点添加子节点，从而构成树形结构。\n\n**QTreeWidget 核心方法**\n\n|                    核心方法                     |                    说明                    |\n|---------------------------------------------|------------------------------------------|\n| clear()                                     | 清空所有子节点                                  |\n| addTopLevelItem(QTreeWidgetItem\\* item)     | 新增顶层节点                                   |\n| topLevelItem(int index)                     | 获取指定下标的顶层节点                              |\n| topLevelItemCount()                         | 获取顶层节点个数                                 |\n| indexOfTopLevelItem(QTreeWidgetItem\\* item) | 查询指定节点是顶层节点中的下标                          |\n| takeTopLevelItem(int index)                 | 删除指定的顶层节点，返回 `QTreeWidgetItem*` 表示被删除的元素 |\n| currentItem()                               | 获取当前选中的节点，返回 `QTreeWidgetItem*`          |\n| setCurrentItem(QTreeWidgetItem\\* item)      | 选中指定节点                                   |\n| setExpanded(bool)                           | 展开/关闭节点                                  |\n| setHeaderLabel(const QString\\& text)        | 设置 `TreeWidget` 的 header 名称              |\n\n**QTreeWidget 核心信号**\n\n|                                 核心信号                                 |    说明     |\n|----------------------------------------------------------------------|-----------|\n| currentItemChanged(QTreeWidgetItem\\* current, QTreeWidgetItem\\* old) | 切换选中元素时触发 |\n| itemClicked(QTreeWidgetItem\\* item, int col)                         | 点击元素时触发   |\n| itemDoubleClicked(QTreeWidgetItem\\* item, int col)                   | 双击元素时触发   |\n| itemEntered(QTreeWidgetItem\\* item, int col)                         | 鼠标进入时触发   |\n| itemExpanded(QTreeWidgetItem\\* item)                                 | 元素被展开时触发  |\n| itemCollapsed(QTreeWidgetItem\\* item)                                | 元素被折叠时触发  |\n\n**QTreeWidget tltem 核心属性**\n\n|      属性       |   说明   |\n|---------------|--------|\n| text          | 持有的文本  |\n| textAlignment | 文本对齐方式 |\n| icon          | 持有的图标  |\n| font          | 文本字体   |\n| hidden        | 是否隐藏   |\n| disabled      | 是否禁用   |\n| expanded      | 是否展开   |\n| sizeHint      | 尺寸大小   |\n| selected      | 是否选中   |\n\n**QTreeWidget tltem 核心信号**\n\n|                  方法                  |                说明                |\n|--------------------------------------|----------------------------------|\n| addChild(QTreeWidgetItem\\* child)    | 新增子节点                            |\n| childCount()                         | 子节点的个数                           |\n| child(int index)                     | 获取指定下标的子节点，返回 `QTreeWidgetItem*` |\n| takeChild(int index)                 | 删除对应下标的子节点                       |\n| removeChild(QTreeWidgetItem\\* child) | 删除对应的子节点                         |\n| parent()                             | 获取该元素的父节点                        |\n\n通过上述提供的方法和信号，可以创建、管理和操作树形结构的数据，并响应用户的交互。`QTreeWidgetItem` 提供了更多的**细粒度控制，允许 定制每个项的表现形式和行为**。\n\n使用 TreeWidget\n\n（1）在界面上创建一个 TreeView，右键 =\\> 变形为 =\\> TreeWidget，再创建一个 lineEdit 和两个按钮\n\n\n* 注意：TreeWidget 是 TreeView 的子类，功能比 TreeView 更丰富。我们使用 TreeWidget 即可。\n\n（2）编写代码，构造初始数据\n\n\n（3）编写代码，实现按钮的 slot 函数\n\n\n（4）执行程序，可以针对树形框进行编辑，如下：\n\n\n{#font_colorDarkOrchid_QT__font_273}二：🔥 QT 常用控件【容器类】\n-----------------------------------------------------\n\n### {#_Group_Box___275}🦋 Group Box -- 分组框\n\n使用 `QGroupBox` 实现一个带有标题的分组框，可以把其他的控件放到里面作为一组，这样看起来能更好看一点。\n\n\n注意：不要把 QGroupBox 和 QButtonGroup 混淆（之前在介绍 QRadionButton 的时候提到了 QButtonGroup）。\n\n|  **属性**   |                  **说明**                   |\n|-----------|-------------------------------------------|\n| title     | 分组框的标题                                    |\n| alignment | 分组框内部内容的对齐方式                              |\n| flat      | 是否是 \"扁平\" 模式；设置为 `true`时，分组框将不显示边框，呈现扁平化外观 |\n| checkable | 是否可选择；设为 `true`，则在 `title`前方会多出一个可勾选的部分   |\n| checked   | 描述分组框的选择状态（前提是 `checkable`为 `true`）       |\n\n* 分组框 只是一个用来 \"美化界面\" 这样的组件，并不涉及到用户交互和业务逻辑，属于 \"锦上添花\"。\n\n使用 Group Box\n\n在界面上创建两个分组框，并且在分组框内部创建下拉框和微调框\n\n\n* 注意：在复制粘贴控件的时候，一定要先选中对应的父控件，再粘贴\n\n### {#_Tab_Widget___301}🦋 Tab Widget -- 标签页\n\n使用 `QTabWidget` 实现一个带有标签页的控件，可以往里面添加一些 widget，进一步的就可以通过标签页切换。\n\n\n|      **属性**       |                       **说明**                        |\n|-------------------|-----------------------------------------------------|\n| tabPosition       | 标签页所在的位置： - North 上方 - South 下方 - West 左侧 - East 右侧 |\n| currentIndex      | 当前选中了第几个标签页（从0开始计算）                                 |\n| currentTabText    | 当前选中的标签页的文本                                         |\n| currentTabName    | 当前选中的标签页的名字                                         |\n| currentTabIcon    | 当前选中的标签页的图标                                         |\n| currentTabToolTip | 当前选中的标签页的提示信息                                       |\n| tabsClosable      | 标签页是否可以关闭                                           |\n| movable           | 标签页是否可以移动                                           |\n\n|          **信号**          |            **说明**             |\n|--------------------------|-------------------------------|\n| currentChanged(int)      | 在标签页发生切换时触发，参数为被点击的选项卡编号。     |\n| tabBarClicked(int)       | 在点击选项卡的标签条的时候触发，参数为被点击的选项卡编号。 |\n| tabBarDoubleClicked(int) | 在双击选项卡的标签条的时候触发，参数为被点击的选项卡编号。 |\n| tabCloseRequested(int)   | 在标签页关闭请求时触发，参数为被请求关闭的选项卡编号。   |\n\n使用标签页管理多组控件\n\n（1）在界面上创建一个 QTabWidget 和两个按钮\n\n\n**注意 ：**\n\n* QTabWidget 中的每个标签页都是⼀个 QWidget\n* 点击标签页就可以直接切换\n* 右键 QTabWidget，可以添加标签页或者删除标签页\n\n（2）编写 widget.cpp，进行初始化，给标签页中放个简单的 label\n\n* 注意新创建的 label 的父元素，是 ui-\\>tab 和 ui-\\>tab_2\n* Qt 中使用父子关系决定该控件 \"在哪里\"\n\n然后再编写按钮的 slot 函数 和 QTabWidget 的 `currentChanged` 函数\n\n* 使用 count() 获取到标签页的个数\n* 使用 addTab 新增标签页\n* 使用 removeTab 删除标签页\n* 使用 currentIndex 获取到当前标签页的下标\n* 使用 setCurrentIndex 切换当前标签页\n\n\n\n（3）运行程序\n\n* 点击新建标签页，可以创建出新的标签\n* 点击删除当前标签页，可以删除标签\n* 切换标签页时，可以看到 qDebug 打印出的标签页编号\n\n![](https://i-blog.csdnimg.cn/img_convert/cd43000e65eab433a23a1a62196f0810.gif)\n\n{#font_colorDarkOrchid_QT__font_364}三：🔥 QT 常用控件【布局类】\n-----------------------------------------------------\n\n* 之前使用 Qt 在界面上创建的控件都是通过 \"绝对定位\" 的方式来设定的，也就是每个控件所在的位置都需要计算坐标，最终通过 setGeometry 或者 move 方式摆放过去\n\n* 这种设定方式其实并不方便，尤其是界面如果 内容比较多，不好计算，而且一个窗口大小往往是可以调整的，按照绝对定位的方式，也无法自适应窗口大小。\n\n* 因此 Qt 引入 \"布局管理器\"（Layout）机制 来解决上述问题。\n\n> 当然，布局管理器并非 Qt 独有。其他的 GUI 开发框架，像 Android、前端等也有类似的机制。\n\n### {#__376}🦋 垂直布局\n\n🎢 使用 QVBoxLayout 表示垂直的布局管理器，V 是 vertical 的缩写。\n\n|       **属性**       |            **说明**            |\n|--------------------|------------------------------|\n| layoutLeftMargin   | 左侧边距，设置或获取布局内容与容器左边界的距离      |\n| layoutRightMargin  | 右侧边距，设置或获取布局内容与容器右边界的距离      |\n| layoutTopMargin    | 上方边距，设置或获取布局内容与容器上边界的距离      |\n| layoutBottomMargin | 下方边距，设置或获取布局内容与容器下边界的距离      |\n| layoutSpacing      | 相邻元素之间的间距，设置或获取布局中各元素之间的默认间隔 |\n\nLayout 只是用于界面布局，并没有提供信号\n\n#### {#__QVBoxLayout__390}🎀 【使用 QVBoxLayout 管理多个控件】\n\n编写代码，创建布局管理器和三个按钮，并且把按钮添加到布局管理器中\n\n* 使用 addWidget 把控件添加到布局管理器中\n* 使用 setLayout 设置该布局管理器到 widget 中\n\n![image-20250120214432395](https://i-blog.csdnimg.cn/img_convert/34c1156fbca76b0e9b025af5b3f896b7.png)\n\n* 可以看到此时界面上的按钮就存在于布局管理器中，随着窗口尺存变化而发生改变。\n* 此时的三个按钮的尺存和位置都是自动计算出来的。\n\n#### {#__QVBoxLayout_404}🎀 【创建两个 QVBoxLayout】\n\n🔥 在上面通过上述代码的方式，只能给这个 widget **设定一个布局管理器** 。实际上也可以通过 Qt Design 在一个窗口中创建多个布局管理器，如下操作：\n\n（1）在界面上创建两个 `QVBoxLayout`，每个 `QVBoxLayout` 各放三个按钮\n\n![daf20867fa263135d745d5d8e210d31a.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/211ca554-fdcc-4e7c-b3f1-e5364642c2da_daf20867fa263135d745d5d8e210d31a.png)\n\n（2）运行程序\n\n![beb73aaad8ae64dbf469896920009d51.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/de19e1a7-7496-43d9-a819-791c83085a29_beb73aaad8ae64dbf469896920009d51.png)\n\n* 可以看到这些按钮已经自动排列好，只不过**当前这些按钮的位置不能随着窗口大小自动变化**。\n\n通过 `Qt Designer` 创建的布局管理，其实是先创建了一个 widget，设置过 geometry 属性的，再把这个 layout 设置到这个 widget 中\n> * 实际上，一个 widget 只能包含一个 layout。\n> * 打开 ui 文件的原始 xml，可以看到其中的端倪。这种情况下 layout 并非是窗口 widget 的布局管理器，因此不会随着窗口大小改变。\n\n![fbd2152d308de947f0f46a0e6aa0bd01.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/7f7878ea-7fc9-4eae-aded-b780369ec9a5_fbd2152d308de947f0f46a0e6aa0bd01.png)\n\n### {#__429}🦋 水平布局\n\n使用 QHBoxLayout 表示垂直的布局管理器，H 是 horizontal 的缩写。\n\n* 核心属性（和 QVBoxLayout 属性是一致的）\n\n|       **属性**       |  **说明**   |\n|--------------------|-----------|\n| layoutLeftMargin   | 左侧边距      |\n| layoutRightMargin  | 右侧边距      |\n| layoutTopMargin    | 上方边距      |\n| layoutBottomMargin | 下方边距      |\n| layoutSpacing      | 相邻元素之间的间距 |\n\n#### {#_QHBoxLayout__443}🎀【使用 QHBoxLayout 管理控件】\n\n编写代码，创建布局管理器和三个按钮，并且把按钮添加到布局管理器中，并且运行\n\n![a7217858fb6aa5dd3f69b14841d0c697.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/890ac706-7ba7-47b9-9421-754005edf416_a7217858fb6aa5dd3f69b14841d0c697.png)\n\n* 可以看到此时界面上的按钮就存在于布局管理器中，随着窗口尺寸变化而发生改变。\n* 此时的三个按钮的尺存和位置都是自动计算出来的\n\nLayout 里面可以再嵌套上其他的 layout，从而达到更复杂的布局效果\n\n#### {#_layout_456}🎀【嵌套的 layout】\n\n在代码中创建以下内容，使用 `addLayout` 给 layout 中添加子 layout，并且运行程序\n\n![9e634c4f5f4ae26a821391fc4ad962e5.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/a5172366-8d12-405f-9edd-f79ffe8e19b8_9e634c4f5f4ae26a821391fc4ad962e5.png)\n\n结论：结合 QHBoxLayout 和 QVBoxLayout， 就可以做出各种复杂的界面了\n\n### {#__466}🦋 网格布局\n\nQt 中还提供了 QGridLayout 用来实现网格布局的效果，可以达到 ***\\*M \\* N\\**** 的这种网格的效果。\n\n|         **属性**          |    **说明**     |\n|-------------------------|---------------|\n| layoutLeftMargin        | 左侧边距          |\n| layoutRightMargin       | 右侧边距          |\n| layoutTopMargin         | 上方边距          |\n| layoutBottomMargin      | 下方边距          |\n| layoutHorizontalSpacing | 相邻元素之间水平方向的间距 |\n| layoutVerticalSpacing   | 相邻元素之间垂直方向的间距 |\n| layoutRowStretch        | 行方向的拉伸系数      |\n| layoutColumnStretch     | 列方向的拉伸系数      |\n\n整体和 `QVBoxLayout` 以及`QHBoxLayout` 相似\n\n但是设置 spacing 的时候是按照垂直水平两个方向来设置的。\n\n#### {#__QGridLayout__487}🎀 【使用 QGridLayout 管理元素】\n\n代码中创建 QGridLayout 和 4 个按钮\n\n* 使用 addWidget 添加控件到布局管理器中，但是添加的同时会指定两个**坐标**，表示放在第几行，第几列。\n\n\n* 当然如果调整行列坐标全部为0的话，那么这四个按钮都在一行，就相当于 **QHBoxLayout**\n\n> 注意 ：\n> * 设置行和列的时候，如果设置的是一个很大的值，但是这个值和上一个值之间并没有其他的元素，那么并不会在中间腾出额外的空间\n> * 比如：把 button4 设置在第 100 行，但是由于 3-99 行没有元素，因此 button4 仍然会紧挨在 button3 下方看起来和上面的 0 1 2 3 的情况是相同的。\n\n#### {#__QGridLayout__504}🎀 【设置 QGridLayout 中元素的大小比例】\n\n创建 6 个按钮，按照 2 行 3 列的方式排列，使用 `setColumnStretch` 设置每一列的拉伸系数：\n\n![3d4dcb7d2c9ec7849f39d113ab6247b4.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/bc81107d-a81f-4c35-bf9a-efdfdd9cbbe6_3d4dcb7d2c9ec7849f39d113ab6247b4.png)\n\n* 另外，QGridLayout 也提供了 `setRowStretch` 设置行之间的拉伸系数\n* 上述案例中，直接设置 `setRowStretch` 效果不明显，因为**每个按钮的高度是固定的**。\n* 需要把按钮的垂直方向的 sizePolicy 属性设置为 `QSizePolicy::Expanding` 尽可能填充满布局管理器，才能看到效果。\n\n如果**拉伸系数设为 0，意思是不参与拉伸，此时按钮的宽度是固定值**。\n\n#### {#__519}🎀 【设置垂直方向的拉伸系数】\n\n编写代码, 创建 6 个按钮, 按照 3 行 2 列方式排列，使用 setSizePolicy 设置按钮的尺寸策略，可选的值如下：\n\n* QSizePolicy::Ignored：忽略控件的尺寸，不对布局产生影响。\n* QSizePolicy::Minimum：控件的最小尺寸为固定值，布局时不会超过该值。\n* QSizePolicy::Maximum：控件的最大尺寸为固定值，布局时不会小于该值。\n* QSizePolicy::Preferred：控件的理想尺寸为固定值，布局时会尽量接近该值。\n* QSizePolicy::Expanding：控件的尺寸可以根据空间调整，尽可能占据更多空间。\n* QSizePolicy::Shrinking：控件的尺寸可以根据空间调整，尽可能缩小以适应空间。\n\n![a1efd9f51729c8681bcd091d06c027f1.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/fa678876-c19b-4f96-9a7c-7ce1890e55cd_a1efd9f51729c8681bcd091d06c027f1.png)\n> 此时的按钮垂直方向都舒展开了，并且调整窗口尺寸，也会按照设定的比例同步变化。\n\n💡 结论：\n\n* 总的来说，使用 `QGridLayout` 能够代替很多 `QHBoxLayout` 和 `QVBoxLayout` 嵌套的场景。毕竟嵌套的代码写起来是比较麻烦的。\n\n* 另外不要忘了，`QGridLayout` 里面也能嵌套 `QHBoxLayout` 和 `QVBoxLayout`，`QHBoxLayout` 和 `QVBoxLayout `里面也能嵌套 `QGridLayout`\n\n* 灵活使用上述布局管理器就可以实现出任意的复杂界面。\n\n### {#__547}🦋 表单布局\n\n除了上述的布局管理器之外，Qt 还提供了 QFormLayout，属于是 QGridLayout 的特殊情况，专门用于实现两列表单的布局。\n\n这种表单布局多用于让用户 填写信息的场景，左侧列为提示，右侧列为输入框\n\n【使用 QFormLayout 创建表单】\n\n编写代码，创建 `QFormLayout`，以及两个 label 和两个 lineEdit\n\n* 使用 addRow 方法来添加一行，每行包含两个控件。\n* 第一个控件固定是 QLabel / 文本，第二个控件则可以是任意控件。\n* 如果把第⼀个参数填写为 `NULL`，则什么都不显示。\n\n![b8d51ad8e2a4c2dc2600002bca661b1d.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/dbd35d6b-baa8-4035-aaf2-68a335b38f73_b8d51ad8e2a4c2dc2600002bca661b1d.png)\n\n### {#_Space_565}🦋 Space\n\n使用布局管理器的时候，可能需要在控件之间添加一段空白，就可以使用 `QSpacerItem` 来表示。\n\n| **属性** |                                                                                                                                                  **说明**                                                                                                                                                   |\n|--------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| width  | 宽度                                                                                                                                                                                                                                                                                                        |\n| height | 高度                                                                                                                                                                                                                                                                                                        |\n| hData  | 水平方向的 sizePolicy - QSizePolicy::Ignored: 忽略控件的尺寸，不对布局产生影响。 - QSizePolicy::Minimum: 控件的最小尺寸为固定值，布局时不会超过该值。 QSizePolicy::Maximum: 控件的最大尺寸为固定值，布局时不会小于该值。 QSizePolicy::Preferred: 控件的理想尺寸为固定值，布局时会尽量接近该值。 QSizePolicy::Expanding: 控件的尺寸可以根据空间调整，尽可能占据更多空间。 QSizePolicy::Shrinking: 控件的尺寸可以根据空间调整，尽可能缩小以适应空间。 |\n| vData  | 垂直方向的 `sizePolicy` 选项同上。                                                                                                                                                                                                                                                                                  |\n\n* 注意：上述属性在构造函数设置即可\n\n【创建一组左右排列的按钮】\n\n在界面上创建一个 `QVBoxLayout` ，并添加两个按钮，在上面运行结果中我们可以知道这个肯定是紧挨的，但是如果在两个按钮中间添加一个 spacer，会咋样呢，如下：\n\n![94b6966ec49d2cd40042bf66bccb8c53.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/8693e776-e109-404d-82c4-136e83c8200f_94b6966ec49d2cd40042bf66bccb8c53.png)\n\n![068ef0116140b189a860dcdfef5d6375.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/232bd1d9-dbc4-42f8-bbb4-844780e9b65b_068ef0116140b189a860dcdfef5d6375.png)\n\n* 在 Qt Designer 中，也可以直接给界面上添加 spacer：\n\n![1381299fac0b11ae9a5f5338e5847ae7.png](http://127.0.0.1:80/localFile/local-plus/20250629/article-content/617259a9-3932-4427-875c-ae64300d6669_1381299fac0b11ae9a5f5338e5847ae7.png)\n\n{#font_colorDarkOrchid__font_592}四：🔥 共勉\n----------------------------------------\n\n😋 以上就是我对 **`【QT】常用控件 【多元素类 | 容器类 | 布局类】`** 的理解, 觉得这篇博客对你有帮助的，可以点赞收藏关注支持一波\\~ 😉  \n\n',1,0,1,0,0,0,'https://blog.csdn.net/weixin_50776420/article/details/147226912?spm=1000.2115.3001.10524',0,NULL,NULL,'2025-05-23 16:50:51','2025-07-08 22:54:45'),(317,1,20,'Lucene.Net 分词器选择指南：盘古分词 vs 结巴分词','http://113.45.240.54:9092/article-cover/139cd528-bf3e-4565-9987-5a29780b4b52_freecompress-Neat-Admin 管理系统 (11).png','Lucene.Net 分词器选择指南','<br />\n<h4><a id=\"_2\"></a>文章目录</h4>\n<ul>\n<li><a href=\"#_6\">前言</a></li>\n<li><a href=\"#_13\">一、核心特性对比</a></li>\n<li><a href=\"#_26\">二、典型场景推荐</a></li>\n<li>\n<ul>\n<li><a href=\"#1__27\">1. 选择盘古分词的场景</a></li>\n<li><a href=\"#2__41\">2. 选择结巴分词的场景</a></li>\n</ul>\n</li>\n<li><a href=\"#_55\">三、关键指标实测对比</a></li>\n<li>\n<ul>\n<li><a href=\"#1_F1_56\">1. 分词质量测试（F1值）</a></li>\n<li><a href=\"#2__63\">2. 性能测试（单线程）</a></li>\n</ul>\n</li>\n<li><a href=\"#_68\">四、如何选择？决策树</a></li>\n<li><a href=\"#_79\">五、进阶优化建议</a></li>\n<li>\n<ul>\n<li><a href=\"#1__80\">1. 盘古分词优化方案</a></li>\n<li><a href=\"#2__99\">2. 结巴分词优化方案</a></li>\n</ul>\n</li>\n<li><a href=\"#_111\">六、总结</a></li>\n</ul>\n<br />\n<hr />\n<h2><a id=\"_6_content_views_25\"></a>{#_6}前言 {#content_views}</h2>\n<p>在构建基于 <code>Lucene.Net</code> 的中文搜索引擎时，分词器的选择直接影响搜索效果和性能。盘古分词（<code>PanGu</code>）和结巴分词（<code>jieba</code>）是两个主流选择，以下是它们的深度对比与选择建议。</p>\n<hr />\n<h2><a id=\"_13_32\"></a>{#_13}一、核心特性对比</h2>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th style=\"text-align:left\">盘古分词 (PanGu)</th>\n<th style=\"text-align:left\">结巴分词 (Jieba.NET)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>开发背景</td>\n<td style=\"text-align:left\">专为Lucene.Net设计的中文分词组件</td>\n<td style=\"text-align:left\">基于前缀词典的HMM模型 + Viterbi算法</td>\n</tr>\n<tr>\n<td>分词算法</td>\n<td style=\"text-align:left\">基于词典的正向最大匹配（MMSeg优化）</td>\n<td style=\"text-align:left\">基于前缀词典的HMM模型 + Viterbi算法</td>\n</tr>\n<tr>\n<td>主要优势</td>\n<td style=\"text-align:left\">与Lucene.Net深度集成，搜索场景优化</td>\n<td style=\"text-align:left\">高准确率，支持词性标注、关键词提取</td>\n</tr>\n<tr>\n<td>性能表现</td>\n<td style=\"text-align:left\">每秒处理 3-5MB 文本（单线程）</td>\n<td style=\"text-align:left\">每秒处理 1-2MB 文本（单线程）</td>\n</tr>\n<tr>\n<td>内存占用</td>\n<td style=\"text-align:left\">约 50MB（默认词典）</td>\n<td style=\"text-align:left\">约 100MB（含HMM模型）</td>\n</tr>\n<tr>\n<td>自定义词典支持</td>\n<td style=\"text-align:left\">支持XML格式词典扩展</td>\n<td style=\"text-align:left\">支持TXT词典扩展，可动态加载</td>\n</tr>\n<tr>\n<td>词性标注</td>\n<td style=\"text-align:left\">不支持</td>\n<td style=\"text-align:left\">支持</td>\n</tr>\n<tr>\n<td>新词发现</td>\n<td style=\"text-align:left\">有限支持</td>\n<td style=\"text-align:left\">基于HMM模型识别未登录词</td>\n</tr>\n<tr>\n<td>社区活跃度</td>\n<td style=\"text-align:left\">GitHub 200+ Star，中文文档完善</td>\n<td style=\"text-align:left\">GitHub 800+ Star（Python版），.NET版维护较少</td>\n</tr>\n</tbody>\n</table>\n<h2><a id=\"_26_47\"></a>{#_26}二、典型场景推荐</h2>\n<h3><a id=\"1__271__50\"></a>{#1__27}1. 选择盘古分词的场景</h3>\n<ul>\n<li>\n<p><strong>场景特点</strong>：</p>\n<ul>\n<li>需要与 <code>Lucene.Net</code> 无缝集成</li>\n<li>搜索为主，不需要词性标注等 <code>NLP</code> 功能</li>\n<li>高吞吐量需求（如日志分析、电商搜索）</li>\n</ul>\n</li>\n<li>\n<p><strong>代码示</strong>例：</p>\n</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\n<span class=\"hljs-comment\">// 使用盘古分词器</span>\n<span class=\"hljs-title class_\">Analyzer</span> analyzer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PanGuAnalyzer</span>();\n<span class=\"hljs-keyword\">var</span> config = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IndexWriterConfig</span>(<span class=\"hljs-title class_\">LuceneVersion</span>.<span class=\"hljs-property\">LUCENE_48</span>, analyzer);\n</code></div></pre>\n<h3><a id=\"2__412__66\"></a>{#2__41}2. 选择结巴分词的场景</h3>\n<ul>\n<li>\n<p><strong>场景特点</strong>：</p>\n<ul>\n<li>需要词性标注、关键词提取等 <code>NLP</code> 功能</li>\n<li>对分词准确率要求极高（如法律文书分析）</li>\n<li>已有 <code>Python jieba</code> 使用经验</li>\n</ul>\n</li>\n<li>\n<p><strong>代码示例</strong>：</p>\n</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\n<span class=\"hljs-comment\">// 使用结巴分词器（需安装Jieba.NET）</span>\n<span class=\"hljs-title class_\">Analyzer</span> analyzer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JiebaAnalyzer</span>();\n<span class=\"hljs-keyword\">var</span> config = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IndexWriterConfig</span>(<span class=\"hljs-title class_\">LuceneVersion</span>.<span class=\"hljs-property\">LUCENE_48</span>, analyzer);\n</code></div></pre>\n<h2><a id=\"_55_82\"></a>{#_55}三、关键指标实测对比</h2>\n<h3><a id=\"1_F1_561_F1_85\"></a>{#1_F1_56}1. 分词质量测试（F1值）</h3>\n<table>\n<thead>\n<tr>\n<th>测试语料</th>\n<th>盘古分词</th>\n<th>结巴分词</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>通用新闻文本</td>\n<td>92.3%</td>\n<td>95.1%</td>\n</tr>\n<tr>\n<td>医疗专业文献</td>\n<td>85.7%</td>\n<td>88.2%</td>\n</tr>\n<tr>\n<td>网络流行语</td>\n<td>78.4%</td>\n<td>83.6%</td>\n</tr>\n</tbody>\n</table>\n<h3><a id=\"2__632__93\"></a>{#2__63}2. 性能测试（单线程）</h3>\n<table>\n<thead>\n<tr>\n<th>指标</th>\n<th>盘古分词</th>\n<th>结巴分词</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>10万条短文本处理</td>\n<td>12秒</td>\n<td>18秒</td>\n</tr>\n<tr>\n<td>内存峰值</td>\n<td>55MB</td>\n<td>110MB</td>\n</tr>\n</tbody>\n</table>\n<h2><a id=\"_68_100\"></a>{#_68}四、如何选择？决策树</h2>\n<p>是 否 是 否 是 否 项目需求 需要词性标注/NLP功能? 选择结巴分词 数据规模大于1亿条? 选择盘古分词 领域是否垂直? 盘古分词+自定义词典 结巴分词</p>\n<h2><a id=\"_79_105\"></a>{#_79}五、进阶优化建议</h2>\n<h3><a id=\"1__801__108\"></a>{#1__80}1. 盘古分词优化方案</h3>\n<ul>\n<li><strong>词典扩展</strong>：</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\n&lt;!-- <span class=\"hljs-title class_\">PanGu</span>.<span class=\"hljs-property\">xml</span> 自定义词典 --&gt;\n<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Dictionary</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CustomWords</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Word</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;量子计算&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Word</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;碳中和&quot;</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">CustomWords</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Dictionary</span>&gt;</span></span>\n</code></div></pre>\n<ul>\n<li><strong>索引加速</strong>：</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\n<span class=\"hljs-comment\">// 设置更大的内存缓冲区</span>\nconfig.<span class=\"hljs-property\">RAMBufferSizeMB</span> = <span class=\"hljs-number\">512</span>;\n</code></div></pre>\n<h3><a id=\"2__992__131\"></a>{#2__99}2. 结巴分词优化方案</h3>\n<ul>\n<li><strong>加载自定义词典</strong>：</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\n<span class=\"hljs-keyword\">var</span> segmenter = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JiebaSegmenter</span>();\nsegmenter.<span class=\"hljs-title class_\">LoadUserDict</span>(<span class=\"hljs-string\">&quot;user_dict.txt&quot;</span>);\n</code></div></pre>\n<ul>\n<li><strong>启用并行分词</strong>：</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\nanalyzer.<span class=\"hljs-property\">EnableParallelSegment</span> = <span class=\"hljs-literal\">true</span>;\n</code></div></pre>\n<h2><a id=\"_111_148\"></a>{#_111}六、总结</h2>\n<ul>\n<li><strong>盘古分词</strong> ：适合搜索场景优先、需要与 <code>Lucene.Net</code> 深度集成的项目</li>\n<li><strong>结巴分词</strong> ：适合需要 <code>NLP</code> 扩展能力、对准确率要求更高的场景</li>\n</ul>\n<p><strong>最终建</strong>议：</p>\n<ul>\n<li>如果项目以搜索为核心且需高性能 → 选择盘古分词</li>\n<li>如果需处理复杂语义且能接受性能损耗 → 选择结巴分词</li>\n</ul>\n','<br />\n\n#### 文章目录\n\n* [前言](#_6)\n* [一、核心特性对比](#_13)\n* [二、典型场景推荐](#_26)\n*\n  * [1. 选择盘古分词的场景](#1__27)\n  * [2. 选择结巴分词的场景](#2__41)\n* [三、关键指标实测对比](#_55)\n*\n  * [1. 分词质量测试（F1值）](#1_F1_56)\n  * [2. 性能测试（单线程）](#2__63)\n* [四、如何选择？决策树](#_68)\n* [五、进阶优化建议](#_79)\n*\n  * [1. 盘古分词优化方案](#1__80)\n  * [2. 结巴分词优化方案](#2__99)\n* [六、总结](#_111)\n\n<br />\n\n*** ** * ** ***\n\n{#_6}前言 {#content_views}\n------------------------\n\n在构建基于 `Lucene.Net` 的中文搜索引擎时，分词器的选择直接影响搜索效果和性能。盘古分词（`PanGu`）和结巴分词（`jieba`）是两个主流选择，以下是它们的深度对比与选择建议。\n\n*** ** * ** ***\n\n{#_13}一、核心特性对比\n--------------\n\n|   特性    | 盘古分词 (PanGu)            | 结巴分词 (Jieba.NET)                    |\n|---------|:------------------------|:------------------------------------|\n| 开发背景    | 专为Lucene.Net设计的中文分词组件   | 基于前缀词典的HMM模型 + Viterbi算法            |\n| 分词算法    | 基于词典的正向最大匹配（MMSeg优化）    | 基于前缀词典的HMM模型 + Viterbi算法            |\n| 主要优势    | 与Lucene.Net深度集成，搜索场景优化  | 高准确率，支持词性标注、关键词提取                   |\n| 性能表现    | 每秒处理 3-5MB 文本（单线程）      | 每秒处理 1-2MB 文本（单线程）                  |\n| 内存占用    | 约 50MB（默认词典）            | 约 100MB（含HMM模型）                     |\n| 自定义词典支持 | 支持XML格式词典扩展             | 支持TXT词典扩展，可动态加载                     |\n| 词性标注    | 不支持                     | 支持                                  |\n| 新词发现    | 有限支持                    | 基于HMM模型识别未登录词                       |\n| 社区活跃度   | GitHub 200+ Star，中文文档完善 | GitHub 800+ Star（Python版），.NET版维护较少 |\n\n{#_26}二、典型场景推荐\n--------------\n\n### {#1__27}1. 选择盘古分词的场景\n\n* **场景特点**：\n\n  * 需要与 `Lucene.Net` 无缝集成\n  * 搜索为主，不需要词性标注等 `NLP` 功能\n  * 高吞吐量需求（如日志分析、电商搜索）\n* **代码示**例：\n\n```js\n\n// 使用盘古分词器\nAnalyzer analyzer = new PanGuAnalyzer();\nvar config = new IndexWriterConfig(LuceneVersion.LUCENE_48, analyzer);\n```\n\n### {#2__41}2. 选择结巴分词的场景\n\n* **场景特点**：\n\n  * 需要词性标注、关键词提取等 `NLP` 功能\n  * 对分词准确率要求极高（如法律文书分析）\n  * 已有 `Python jieba` 使用经验\n* **代码示例**：\n\n```js\n\n// 使用结巴分词器（需安装Jieba.NET）\nAnalyzer analyzer = new JiebaAnalyzer();\nvar config = new IndexWriterConfig(LuceneVersion.LUCENE_48, analyzer);\n```\n\n{#_55}三、关键指标实测对比\n----------------\n\n### {#1_F1_56}1. 分词质量测试（F1值）\n\n|  测试语料  | 盘古分词  | 结巴分词  |\n|--------|-------|-------|\n| 通用新闻文本 | 92.3% | 95.1% |\n| 医疗专业文献 | 85.7% | 88.2% |\n| 网络流行语  | 78.4% | 83.6% |\n\n### {#2__63}2. 性能测试（单线程）\n\n|    指标     | 盘古分词 | 结巴分词  |\n|-----------|------|-------|\n| 10万条短文本处理 | 12秒  | 18秒   |\n| 内存峰值      | 55MB | 110MB |\n\n{#_68}四、如何选择？决策树\n----------------\n\n是 否 是 否 是 否 项目需求 需要词性标注/NLP功能? 选择结巴分词 数据规模大于1亿条? 选择盘古分词 领域是否垂直? 盘古分词+自定义词典 结巴分词\n\n{#_79}五、进阶优化建议\n--------------\n\n### {#1__80}1. 盘古分词优化方案\n\n* **词典扩展**：\n\n```js\n\n<!-- PanGu.xml 自定义词典 -->\n<Dictionary>\n  <CustomWords>\n    <Word value=\"量子计算\" />\n    <Word value=\"碳中和\" />\n  </CustomWords>\n</Dictionary>\n```\n\n* **索引加速**：\n\n```js\n\n// 设置更大的内存缓冲区\nconfig.RAMBufferSizeMB = 512;\n```\n\n### {#2__99}2. 结巴分词优化方案\n\n* **加载自定义词典**：\n\n```js\n\nvar segmenter = new JiebaSegmenter();\nsegmenter.LoadUserDict(\"user_dict.txt\");\n```\n\n* **启用并行分词**：\n\n```js\n\nanalyzer.EnableParallelSegment = true;\n```\n\n{#_111}六、总结\n-----------\n\n* **盘古分词** ：适合搜索场景优先、需要与 `Lucene.Net` 深度集成的项目\n* **结巴分词** ：适合需要 `NLP` 扩展能力、对准确率要求更高的场景\n\n**最终建**议：\n\n* 如果项目以搜索为核心且需高性能 → 选择盘古分词\n* 如果需处理复杂语义且能接受性能损耗 → 选择结巴分词\n',1,0,1,0,0,0,'https://blog.csdn.net/mss359681091/article/details/147029613?spm=1000.2115.3001.10524',0,NULL,NULL,'2025-04-28 17:18:17','2025-07-08 22:58:00'),(318,1,46,'写 Python 到底能不能乱缩进？带你一次搞懂 Python 缩进规范','http://113.45.240.54:9092/article-cover/e6f88e8d-3d51-4418-bec8-e621295728bd_freecompress-Neat-Admin 管理系统 (12).png','Python 缩进规范','<p>让Agent生成测试用例原来如此简单</p>\n<p>在 Python 编程中，缩进不仅仅是代码美观的问题，它直接关系到程序能否运行。Python 语言的设计理念强调简洁和易读性，代码的缩进成为了 Python 语法的一部分。因此，了解 Python 的缩进规范，不仅有助于写出可读性更强的代码，也能避免无意间的语法错误和逻辑问题。</p>\n<p>本文将深入探讨 Python 中的缩进规则，从其语法的重要性讲起，分析为什么不能乱缩进，并介绍如何正确使用缩进规范，帮助开发者避免常见错误。</p>\n<h4><a id=\"Python__content_views_6\"></a>一、Python 的缩进是语法的一部分 {#content_views}</h4>\n<h5><a id=\"11_Python__8\"></a>1.1 Python 与其他编程语言的差异</h5>\n<p>在大多数编程语言中，代码块通常由大括号 <code>{}</code> 或其他标记来表示。例如，在 C、C++ 或 Java 中，开发者使用大括号来界定函数、条件语句和循环的范围：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">if</span> (x &gt; <span class=\"hljs-number\">0</span>) {\n    System.out.println(<span class=\"hljs-string\">&quot;x is positive&quot;</span>);\n}\n</code></div></pre>\n<p>而在 Python 中，程序的结构是由缩进来确定的。这意味着&amp;#x</p>\n','让Agent生成测试用例原来如此简单\n\n在 Python 编程中，缩进不仅仅是代码美观的问题，它直接关系到程序能否运行。Python 语言的设计理念强调简洁和易读性，代码的缩进成为了 Python 语法的一部分。因此，了解 Python 的缩进规范，不仅有助于写出可读性更强的代码，也能避免无意间的语法错误和逻辑问题。\n\n本文将深入探讨 Python 中的缩进规则，从其语法的重要性讲起，分析为什么不能乱缩进，并介绍如何正确使用缩进规范，帮助开发者避免常见错误。\n\n#### 一、Python 的缩进是语法的一部分 {#content_views}\n\n##### 1.1 Python 与其他编程语言的差异\n\n在大多数编程语言中，代码块通常由大括号 `{}` 或其他标记来表示。例如，在 C、C++ 或 Java 中，开发者使用大括号来界定函数、条件语句和循环的范围：\n\n```java\nif (x > 0) {\n    System.out.println(\"x is positive\");\n}\n```\n\n而在 Python 中，程序的结构是由缩进来确定的。这意味着\\&#x\n',1,0,1,0,0,0,'https://blog.csdn.net/tony2yy/article/details/146866459?spm=1000.2115.3001.10524',0,NULL,NULL,'2025-04-28 17:18:54','2025-07-08 22:57:37'),(320,1,17,'Spring Cloud动态配置刷新：@RefreshScope与@Component的深度解析','http://113.45.240.54:9092/article-cover/5249c821-9d69-4da6-bd67-93c81a33e287_freecompress-Neat-Admin 管理系统 (13).png','Spring Cloud动态配置刷新','<blockquote>\n<p>个人名片<br />\n<img src=\"https://img-blog.csdnimg.cn/direct/402a907e12694df5a34f8f266385f3d2.png#pic_center\" alt=\"在这里插入图片描述\" /><br />\n🎓作者简介：java领域优质创作者<br />\n🌐个人主页：<a href=\"https://blog.csdn.net/weixin_44976692?type=blog\" target=\"_blank\">码农阿豪</a><br />\n📞工作室：新空间代码工作室（提供各种软件服务)<br />\n💌个人邮箱：[2435024119@qq.com]<br />\n📱个人微信：15279484656<br />\n🌐个人导航网站：<a href=\"http://www.forff.top\" target=\"_blank\">www.forff.top</a><br />\n💡座右铭：总有人要赢。为什么不能是我呢？</p>\n</blockquote>\n<ul>\n<li>专栏导航：</li>\n</ul>\n<blockquote>\n<p>码农阿豪系列专栏导航<br />\n<a href=\"https://blog.csdn.net/weixin_44976692/category_12053689.html?spm=1001.2014.3001.5482\" target=\"_blank\">面试专栏</a>：收集了java相关高频面试题，面试实战总结🍻🎉🖥️<br />\n<a href=\"https://blog.csdn.net/weixin_44976692/category_12561762.html?spm=1001.2014.3001.5482\" target=\"_blank\">Spring5系列专栏</a>：整理了Spring5重要知识点与实战演练，有案例可直接使用🚀🔧💻<br />\n<a href=\"https://blog.csdn.net/weixin_44976692/category_12580216.html?spm=1001.2014.3001.5482\" target=\"_blank\">Redis专栏</a>：Redis从零到一学习分享，经验总结，案例实战💐📝💡<br />\n<a href=\"https://blog.csdn.net/weixin_44976692/category_12533392.html?spm=1001.2014.3001.5482\" target=\"_blank\">全栈系列专栏</a>：海纳百川有容乃大，可能你想要的东西里面都有🤸🌱🚀</p>\n</blockquote>\n<br />\n<h4><a id=\"_20\"></a>目录</h4>\n<ul>\n<li><a href=\"#Spring_CloudRefreshScopeComponent_21\">Spring Cloud动态配置刷新：@RefreshScope与@Component的深度解析</a></li>\n<li>\n<ul>\n<li><a href=\"#_23\">引言</a></li>\n<li><a href=\"#1_RefreshScope__34\">1. `@RefreshScope` 的作用与原理</a></li>\n<li>\n<ul>\n<li><a href=\"#11__RefreshScope_35\">1.1 什么是 `@RefreshScope`？</a></li>\n<li><a href=\"#12_RefreshScope__38\">1.2 `@RefreshScope` 的工作原理</a></li>\n<li><a href=\"#13__42\">1.3 适用场景</a></li>\n</ul>\n</li>\n<li><a href=\"#2_RefreshScope__Component__49\">2. `@RefreshScope` 与 `@Component` 的搭配使用</a></li>\n<li>\n<ul>\n<li><a href=\"#21__50\">2.1 基本用法</a></li>\n<li>\n<ul>\n<li><a href=\"#_53\">示例代码</a></li>\n<li><a href=\"#_72\">测试刷新</a></li>\n</ul>\n</li>\n<li><a href=\"#22__Spring__86\">2.2 与其他 Spring 注解的搭配</a></li>\n<li>\n<ul>\n<li><a href=\"#_Service_89\">示例：动态刷新的 Service</a></li>\n<li><a href=\"#_104\">示例：动态刷新的配置类</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#3__120\">3. 常见错误及解决方案</a></li>\n<li>\n<ul>\n<li><a href=\"#31_Annotation_type_expected__121\">3.1 “Annotation type expected” 错误</a></li>\n<li>\n<ul>\n<li><a href=\"#_122\">原因</a></li>\n<li><a href=\"#_127\">解决方案</a></li>\n</ul>\n</li>\n<li><a href=\"#32__Bean__149\">3.2 刷新后 Bean 状态不一致</a></li>\n<li>\n<ul>\n<li><a href=\"#_150\">问题描述</a></li>\n<li><a href=\"#_153\">解决方案</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#4__174\">4. 最佳实践与性能优化</a></li>\n<li>\n<ul>\n<li><a href=\"#41__RefreshScope_175\">4.1 避免滥用 `@RefreshScope`</a></li>\n<li><a href=\"#42__ConfigurationProperties__179\">4.2 结合 `@ConfigurationProperties` 使用</a></li>\n<li><a href=\"#43__193\">4.3 监控刷新事件</a></li>\n</ul>\n</li>\n<li><a href=\"#5__208\">5. 总结</a></li>\n</ul>\n</li>\n</ul>\n<br />\n<h2><a id=\"Spring_CloudRefreshScopeComponent_21Spring_CloudRefreshScopeComponent_content_views_59\"></a>{#Spring_CloudRefreshScopeComponent_21}Spring Cloud动态配置刷新：@RefreshScope与@Component的深度解析 {#content_views}</h2>\n<h3><a id=\"_23_62\"></a>{#_23}引言</h3>\n<p>在现代微服务架构中，动态配置管理是一个关键需求。Spring Cloud 提供了 <code>@RefreshScope</code> 注解，允许应用在运行时动态更新配置，而无需重启服务。然而，许多开发者在使用 <code>@RefreshScope</code> 时可能会遇到诸如 “Annotation type expected” 的错误，或者不清楚如何正确搭配 <code>@Component</code> 使用。</p>\n<p>本文将深入探讨：</p>\n<ol>\n<li><code>@RefreshScope</code> 的作用与原理</li>\n<li><code>@RefreshScope</code> 与 <code>@Component</code> 的搭配使用</li>\n<li>常见错误及解决方案</li>\n<li>最佳实践与性能优化</li>\n</ol>\n<hr />\n<h3><a id=\"1_RefreshScope__341_RefreshScope__75\"></a>{#1_RefreshScope__34}1. <code>@RefreshScope</code> 的作用与原理</h3>\n<h4><a id=\"11__RefreshScope_3511__RefreshScope_77\"></a>{#11__RefreshScope_35}1.1 什么是 <code>@RefreshScope</code>？</h4>\n<p><code>@RefreshScope</code> 是 Spring Cloud 提供的一个特殊作用域注解，用于标记那些需要在配置变更时动态刷新的 Bean。它通常与 <code>@Value</code> 或 <code>@ConfigurationProperties</code> 结合使用，以实现配置的热更新。</p>\n<h4><a id=\"12_RefreshScope__3812_RefreshScope__81\"></a>{#12_RefreshScope__38}1.2 <code>@RefreshScope</code> 的工作原理</h4>\n<ul>\n<li>底层机制：<code>@RefreshScope</code> 基于 Spring 的 <code>Scope</code> 机制，创建了一个代理对象。当配置变更时，Spring Cloud 会销毁并重新创建该 Bean，从而加载新的配置值。</li>\n<li>触发方式：通过 <code>/actuator/refresh</code> 端点（或配置中心如 Nacos、Consul 的自动推送）触发刷新。</li>\n</ul>\n<h4><a id=\"13__4213__86\"></a>{#13__42}1.3 适用场景</h4>\n<ul>\n<li>动态调整日志级别</li>\n<li>数据库连接池参数更新</li>\n<li>功能开关（Feature Toggle）</li>\n</ul>\n<hr />\n<h3><a id=\"2_RefreshScope__Component__492_RefreshScope__Component__94\"></a>{#2_RefreshScope__Component__49}2. <code>@RefreshScope</code> 与 <code>@Component</code> 的搭配使用</h3>\n<h4><a id=\"21__5021__96\"></a>{#21__50}2.1 基本用法</h4>\n<p><code>@RefreshScope</code> 可以与 <code>@Component</code>（或其派生注解如 <code>@Service</code>、<code>@Repository</code>）一起使用，使 Bean 具备动态刷新能力。</p>\n<h5><a id=\"_53_100\"></a>{#_53}示例代码</h5>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\n<span class=\"hljs-keyword\">import</span> org.<span class=\"hljs-property\">springframework</span>.<span class=\"hljs-property\">cloud</span>.<span class=\"hljs-property\">context</span>.<span class=\"hljs-property\">config</span>.<span class=\"hljs-property\">annotation</span>.<span class=\"hljs-property\">RefreshScope</span>;\n<span class=\"hljs-keyword\">import</span> org.<span class=\"hljs-property\">springframework</span>\n</code></div></pre>\n','> 个人名片  \n> ![在这里插入图片描述](https://img-blog.csdnimg.cn/direct/402a907e12694df5a34f8f266385f3d2.png#pic_center)  \n> 🎓作者简介：java领域优质创作者  \n> 🌐个人主页：[码农阿豪](https://blog.csdn.net/weixin_44976692?type=blog)  \n> 📞工作室：新空间代码工作室（提供各种软件服务)  \n> 💌个人邮箱：\\[2435024119@qq.com\\]  \n> 📱个人微信：15279484656  \n> 🌐个人导航网站：[www.forff.top](http://www.forff.top)  \n> 💡座右铭：总有人要赢。为什么不能是我呢？\n\n* 专栏导航：\n\n> 码农阿豪系列专栏导航  \n> [面试专栏](https://blog.csdn.net/weixin_44976692/category_12053689.html?spm=1001.2014.3001.5482)：收集了java相关高频面试题，面试实战总结🍻🎉🖥️  \n> [Spring5系列专栏](https://blog.csdn.net/weixin_44976692/category_12561762.html?spm=1001.2014.3001.5482)：整理了Spring5重要知识点与实战演练，有案例可直接使用🚀🔧💻  \n> [Redis专栏](https://blog.csdn.net/weixin_44976692/category_12580216.html?spm=1001.2014.3001.5482)：Redis从零到一学习分享，经验总结，案例实战💐📝💡  \n> [全栈系列专栏](https://blog.csdn.net/weixin_44976692/category_12533392.html?spm=1001.2014.3001.5482)：海纳百川有容乃大，可能你想要的东西里面都有🤸🌱🚀\n\n<br />\n\n#### 目录\n\n* [Spring Cloud动态配置刷新：@RefreshScope与@Component的深度解析](#Spring_CloudRefreshScopeComponent_21)\n*\n  * [引言](#_23)\n  * [1. \\`@RefreshScope\\` 的作用与原理](#1_RefreshScope__34)\n  *\n    * [1.1 什么是 \\`@RefreshScope\\`？](#11__RefreshScope_35)\n    * [1.2 \\`@RefreshScope\\` 的工作原理](#12_RefreshScope__38)\n    * [1.3 适用场景](#13__42)\n  * [2. \\`@RefreshScope\\` 与 \\`@Component\\` 的搭配使用](#2_RefreshScope__Component__49)\n  *\n    * [2.1 基本用法](#21__50)\n    *\n      * [示例代码](#_53)\n      * [测试刷新](#_72)\n    * [2.2 与其他 Spring 注解的搭配](#22__Spring__86)\n    *\n      * [示例：动态刷新的 Service](#_Service_89)\n      * [示例：动态刷新的配置类](#_104)\n  * [3. 常见错误及解决方案](#3__120)\n  *\n    * [3.1 \"Annotation type expected\" 错误](#31_Annotation_type_expected__121)\n    *\n      * [原因](#_122)\n      * [解决方案](#_127)\n    * [3.2 刷新后 Bean 状态不一致](#32__Bean__149)\n    *\n      * [问题描述](#_150)\n      * [解决方案](#_153)\n  * [4. 最佳实践与性能优化](#4__174)\n  *\n    * [4.1 避免滥用 \\`@RefreshScope\\`](#41__RefreshScope_175)\n    * [4.2 结合 \\`@ConfigurationProperties\\` 使用](#42__ConfigurationProperties__179)\n    * [4.3 监控刷新事件](#43__193)\n  * [5. 总结](#5__208)\n\n<br />\n\n{#Spring_CloudRefreshScopeComponent_21}Spring Cloud动态配置刷新：@RefreshScope与@Component的深度解析 {#content_views}\n--------------------------------------------------------------------------------------------------------\n\n### {#_23}引言\n\n在现代微服务架构中，动态配置管理是一个关键需求。Spring Cloud 提供了 `@RefreshScope` 注解，允许应用在运行时动态更新配置，而无需重启服务。然而，许多开发者在使用 `@RefreshScope` 时可能会遇到诸如 \"Annotation type expected\" 的错误，或者不清楚如何正确搭配 `@Component` 使用。\n\n本文将深入探讨：\n\n1. `@RefreshScope` 的作用与原理\n2. `@RefreshScope` 与 `@Component` 的搭配使用\n3. 常见错误及解决方案\n4. 最佳实践与性能优化\n\n*** ** * ** ***\n\n### {#1_RefreshScope__34}1. `@RefreshScope` 的作用与原理\n\n#### {#11__RefreshScope_35}1.1 什么是 `@RefreshScope`？\n\n`@RefreshScope` 是 Spring Cloud 提供的一个特殊作用域注解，用于标记那些需要在配置变更时动态刷新的 Bean。它通常与 `@Value` 或 `@ConfigurationProperties` 结合使用，以实现配置的热更新。\n\n#### {#12_RefreshScope__38}1.2 `@RefreshScope` 的工作原理\n\n* 底层机制：`@RefreshScope` 基于 Spring 的 `Scope` 机制，创建了一个代理对象。当配置变更时，Spring Cloud 会销毁并重新创建该 Bean，从而加载新的配置值。\n* 触发方式：通过 `/actuator/refresh` 端点（或配置中心如 Nacos、Consul 的自动推送）触发刷新。\n\n#### {#13__42}1.3 适用场景\n\n* 动态调整日志级别\n* 数据库连接池参数更新\n* 功能开关（Feature Toggle）\n\n*** ** * ** ***\n\n### {#2_RefreshScope__Component__49}2. `@RefreshScope` 与 `@Component` 的搭配使用\n\n#### {#21__50}2.1 基本用法\n\n`@RefreshScope` 可以与 `@Component`（或其派生注解如 `@Service`、`@Repository`）一起使用，使 Bean 具备动态刷新能力。\n\n##### {#_53}示例代码\n\n```js\n\nimport org.springframework.cloud.context.config.annotation.RefreshScope;\nimport org.springframework\n```\n\n',1,0,1,0,1,0,'https://blog.csdn.net/weixin_44976692/article/details/146940355?spm=1000.2115.3001.10524',0,NULL,NULL,'2025-04-28 17:19:38','2025-07-08 22:57:26'),(321,1,38,'C 语言输入输出库函数讲解','http://113.45.240.54:9092/article-cover/7af0f54f-d34f-4fd7-9142-2e6334163440_freecompress-Neat-Admin 管理系统 (14).png','C 语言输入输出库函数讲解','<h2><a id=\"_content_views_0\"></a>输入输出函数：能够让程序和用户或者文件进行交互。 {#content_views}</h2>\n<h3><a id=\"includeltstdiohgt_3\"></a>头文件：#include&lt;stdio.h&gt;</h3>\n<h3><a id=\"1_printf___5\"></a>1. <code>printf</code> 函数：输出格式化信息到控制台 💬</h3>\n<h4><a id=\"__7\"></a>🔧 使用格式</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\">printf(<span class=\"hljs-string\">&quot;格式字符串&quot;</span>, 参数列表);\n</code></div></pre>\n<h4><a id=\"__13\"></a>🎯 作用</h4>\n<p>把格式化后的字符串输出到控制台。格式字符串里可以包含普通字符和格式说明符，格式说明符会被后面参数列表里的值替换。</p>\n<h4><a id=\"__17\"></a>📖 用法</h4>\n<p>格式说明符一般以 <code>%</code> 开头，常见的有 <code>%d</code>（用于输出整数）、<code>%f</code>（用于输出浮点数）、<code>%c</code>（用于输出字符）、<code>%s</code>（用于输出字符串）等。</p>\n<h4><a id=\"__21\"></a>⚠️ 注意事项</h4>\n<ul>\n<li>格式说明符要和参数的类型相匹配。</li>\n<li>格式字符串中的普通字符会原样输出。</li>\n</ul>\n<h4><a id=\"__26\"></a>📌 适用类型</h4>\n<p>适用于各种基本数据类型以及字符串。</p>\n<h4><a id=\"__30\"></a>💡 示例</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\">#include &lt;stdio.h&gt;\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">age</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">20</span>;\n    <span class=\"hljs-type\">float</span> <span class=\"hljs-variable\">height</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1.75</span>;\n    <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">grade</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;A&#x27;</span>;\n    <span class=\"hljs-type\">char</span> name[] = <span class=\"hljs-string\">&quot;Alice&quot;</span>;\n\n    <span class=\"hljs-comment\">// 输出整数</span>\n    printf(<span class=\"hljs-string\">&quot;年龄是 %d 岁。\\n&quot;</span>, age); \n    <span class=\"hljs-comment\">// 输出浮点数</span>\n    printf(<span class=\"hljs-string\">&quot;身高是 %.2f 米。\\n&quot;</span>, height); \n    <span class=\"hljs-comment\">// 输出字符</span>\n    printf(<span class=\"hljs-string\">&quot;成绩等级是 %c。\\n&quot;</span>, grade); \n    <span class=\"hljs-comment\">// 输出字符串</span>\n    printf(<span class=\"hljs-string\">&quot;姓名是 %s。\\n&quot;</span>, name); \n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></div></pre>\n<h4><a id=\"__54\"></a>🌟 解释</h4>\n<p>在这个例子中，<code>printf</code> 函数依据格式说明符把变量的值输出到控制台。<code>%.2f</code> 表示输出浮点数时保留两位小数。</p>\n<h3><a id=\"2_scanf___58\"></a>2. <code>scanf</code> 函数：从控制台读取格式化输入 📥</h3>\n<h4><a id=\"__60\"></a>🔧 使用格式</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\">scanf(<span class=\"hljs-string\">&quot;格式字符串&quot;</span>, &amp;变量<span class=\"hljs-number\">1</span>, &amp;变量<span class=\"hljs-number\">2</span>, ...);\n</code></div></pre>\n<h4><a id=\"__66\"></a>🎯 作用</h4>\n<p>从控制台读取用户输入的数据，并且按照格式字符串的要求把数据存储到对应的变量中。</p>\n<h4><a id=\"__70\"></a>📖 用法</h4>\n<p>格式说明符和 <code>printf</code> 函数里的类似，不过要在变量名前加上取地址符 <code>&amp;</code>，以此表明是要把数据存储到该变量的地址处。</p>\n<h4><a id=\"__74\"></a>⚠️ 注意事项</h4>\n<ul>\n<li>输入的数据要和格式字符串匹配。</li>\n<li>输入多个数据时，一般用空格、制表符或者换行符分隔。</li>\n</ul>\n<h4><a id=\"__79\"></a>📌 适用类型</h4>\n<p>适用于各种基本数据类型。</p>\n<h4><a id=\"__83\"></a>💡 示例</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\">#include &lt;stdio.h&gt;\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-type\">int</span> num;\n    <span class=\"hljs-type\">float</span> score;\n    <span class=\"hljs-type\">char</span> ch;\n\n    <span class=\"hljs-comment\">// 提示用户输入整数</span>\n    printf(<span class=\"hljs-string\">&quot;请输入一个整数：&quot;</span>); \n    scanf(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;num);\n\n    <span class=\"hljs-comment\">// 提示用户输入浮点数</span>\n    printf(<span class=\"hljs-string\">&quot;请输入一个浮点数：&quot;</span>); \n    scanf(<span class=\"hljs-string\">&quot;%f&quot;</span>, &amp;score);\n\n    <span class=\"hljs-comment\">// 提示用户输入字符</span>\n    printf(<span class=\"hljs-string\">&quot;请输入一个字符：&quot;</span>); \n    scanf(<span class=\"hljs-string\">&quot; %c&quot;</span>, &amp;ch); <span class=\"hljs-comment\">// 注意前面的空格，用于跳过之前输入的换行符</span>\n\n    <span class=\"hljs-comment\">// 输出用户输入的内容</span>\n    printf(<span class=\"hljs-string\">&quot;你输入的整数是 %d，浮点数是 %.2f，字符是 %c。\\n&quot;</span>, num, score, ch); \n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></div></pre>\n<h4><a id=\"__112\"></a>🌟 解释</h4>\n<p>这个例子中，<code>scanf</code> 函数按照格式说明符读取用户输入的数据，并把它们存储到对应的变量中。在读取字符前加空格是为了跳过之前输入的换行符。</p>\n<h3><a id=\"3_getchar___116\"></a>3. <code>getchar</code> 函数：读取单个字符 ⌨️</h3>\n<h4><a id=\"__118\"></a>🔧 使用格式</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getchar</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span>;\n</code></div></pre>\n<h4><a id=\"__124\"></a>🎯 作用</h4>\n<p>从标准输入（通常是键盘）读取一个字符，并返回该字符的 ASCII 码值。</p>\n<h4><a id=\"__128\"></a>📖 用法</h4>\n<p>调用 <code>getchar</code> 函数时，程序会暂停，等待用户输入一个字符，按下回车键后，函数会返回该字符的 ASCII 码值。</p>\n<h4><a id=\"__132\"></a>⚠️ 注意事项</h4>\n<ul>\n<li><code>getchar</code> 会读取换行符，所以在连续使用时要注意处理换行符。</li>\n<li>函数返回值是 <code>int</code> 类型，不是 <code>char</code> 类型。</li>\n</ul>\n<h4><a id=\"__137\"></a>📌 适用类型</h4>\n<p>适用于字符类型。</p>\n<h4><a id=\"__141\"></a>💡 示例</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\">#include &lt;stdio.h&gt;\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-type\">char</span> ch;\n    <span class=\"hljs-comment\">// 提示用户输入一个字符</span>\n    printf(<span class=\"hljs-string\">&quot;请输入一个字符：&quot;</span>); \n    ch = getchar();\n    <span class=\"hljs-comment\">// 输出用户输入的字符</span>\n    printf(<span class=\"hljs-string\">&quot;你输入的字符是 %c。\\n&quot;</span>, ch); \n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></div></pre>\n<h4><a id=\"__158\"></a>🌟 解释</h4>\n<p>此例中，<code>getchar</code> 函数读取用户输入的一个字符，并将其赋值给变量 <code>ch</code>，然后输出该字符。</p>\n<h3><a id=\"4_putchar___162\"></a>4. <code>putchar</code> 函数：输出单个字符 🖨️</h3>\n<h4><a id=\"__164\"></a>🔧 使用格式</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">putchar</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> c)</span>;\n</code></div></pre>\n<h4><a id=\"__170\"></a>🎯 作用</h4>\n<p>把一个字符输出到标准输出（通常是控制台）。</p>\n<h4><a id=\"__174\"></a>📖 用法</h4>\n<p>传入一个字符的 ASCII 码值或者字符常量，函数会将对应的字符输出到控制台。</p>\n<h4><a id=\"__178\"></a>⚠️ 注意事项</h4>\n<ul>\n<li>传入的参数可以是字符常量，也可以是字符变量的 ASCII 码值。</li>\n<li>函数返回值是输出的字符的 ASCII 码值。</li>\n</ul>\n<h4><a id=\"__183\"></a>📌 适用类型</h4>\n<p>适用于字符类型。</p>\n<h4><a id=\"__187\"></a>💡 示例</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\">#include &lt;stdio.h&gt;\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">ch</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;B&#x27;</span>;\n    <span class=\"hljs-comment\">// 输出字符</span>\n    putchar(ch); \n    putchar(<span class=\"hljs-string\">&#x27;\\n&#x27;</span>); <span class=\"hljs-comment\">// 输出换行符</span>\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></div></pre>\n<h4><a id=\"__202\"></a>🌟 解释</h4>\n<p>在这个例子中，<code>putchar</code> 函数把字符 <code>B</code> 输出到控制台，然后输出一个换行符。</p>\n<h3><a id=\"5_fopen___206\"></a>5. <code>fopen</code> 函数：打开文件 📂</h3>\n<h4><a id=\"__208\"></a>🔧 使用格式</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\">FILE *fopen(const <span class=\"hljs-type\">char</span> *filename, const <span class=\"hljs-type\">char</span> *mode);\n</code></div></pre>\n<h4><a id=\"__214\"></a>🎯 作用</h4>\n<p>打开指定文件名的文件，并返回一个指向该文件的 <code>FILE</code> 指针。</p>\n<h4><a id=\"__218\"></a>📖 用法</h4>\n<p><code>filename</code> 是要打开的文件的名称，<code>mode</code> 是打开文件的模式，常见的模式有：</p>\n<br />\n<ul>\n<li><code>&quot;r&quot;</code>：以只读模式打开文件。</li>\n<li><code>&quot;w&quot;</code>：以写入模式打开文件，如果文件不存在则创建，如果存在则清空内容。</li>\n<li><code>&quot;a&quot;</code>：以追加模式打开文件，如果文件不存在则创建。</li>\n</ul>\n<h4><a id=\"__228\"></a>⚠️ 注意事项</h4>\n<ul>\n<li>打开文件后，要检查返回的指针是否为 <code>NULL</code>，若为 <code>NULL</code> 则表示打开文件失败。</li>\n<li>操作完文件后，要使用 <code>fclose</code> 函数关闭文件。</li>\n</ul>\n<h4><a id=\"__233\"></a>📌 适用类型</h4>\n<p>适用于文件操作。</p>\n<h4><a id=\"__237\"></a>💡 示例</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\">#include &lt;stdio.h&gt;\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> {\n    FILE *file;\n    <span class=\"hljs-comment\">// 以只读模式打开文件</span>\n    file = fopen(<span class=\"hljs-string\">&quot;test.txt&quot;</span>, <span class=\"hljs-string\">&quot;r&quot;</span>); \n\n    <span class=\"hljs-keyword\">if</span> (file == NULL) {\n        <span class=\"hljs-comment\">// 输出错误信息</span>\n        printf(<span class=\"hljs-string\">&quot;无法打开文件！\\n&quot;</span>); \n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    }\n\n    <span class=\"hljs-comment\">// 这里可以进行文件读取操作</span>\n\n    <span class=\"hljs-comment\">// 关闭文件</span>\n    fclose(file); \n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></div></pre>\n<h4><a id=\"__262\"></a>🌟 解释</h4>\n<p>此例中，<code>fopen</code> 函数尝试以只读模式打开 <code>test.txt</code> 文件，若打开失败则输出错误信息，打开成功后可以进行文件读取操作，最后使用 <code>fclose</code> 函数关闭文件。</p>\n<h3><a id=\"6_fclose___266\"></a>6. <code>fclose</code> 函数：关闭文件 ❌</h3>\n<h4><a id=\"__268\"></a>🔧 使用格式</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">fclose</span><span class=\"hljs-params\">(FILE *stream)</span>;\n</code></div></pre>\n<h4><a id=\"__274\"></a>🎯 作用</h4>\n<p>关闭指定的文件流，释放相关资源。</p>\n<h4><a id=\"__278\"></a>📖 用法</h4>\n<p>传入一个指向 <code>FILE</code> 类型的指针，该指针是通过 <code>fopen</code> 函数返回的。</p>\n<h4><a id=\"__282\"></a>⚠️ 注意事项</h4>\n<ul>\n<li>关闭文件后，就不能再对该文件进行读写操作了。</li>\n<li>函数返回值为 0 表示关闭成功，非 0 表示关闭失败。</li>\n</ul>\n<h4><a id=\"__287\"></a>📌 适用类型</h4>\n<p>适用于文件操作。</p>\n<h4><a id=\"__291\"></a>💡 示例</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\">#include &lt;stdio.h&gt;\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> {\n    FILE *file;\n    <span class=\"hljs-comment\">// 以写入模式打开文件</span>\n    file = fopen(<span class=\"hljs-string\">&quot;test.txt&quot;</span>, <span class=\"hljs-string\">&quot;w&quot;</span>); \n\n    <span class=\"hljs-keyword\">if</span> (file == NULL) {\n        <span class=\"hljs-comment\">// 输出错误信息</span>\n        printf(<span class=\"hljs-string\">&quot;无法打开文件！\\n&quot;</span>); \n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    }\n\n    <span class=\"hljs-comment\">// 这里可以进行文件写入操作</span>\n\n    <span class=\"hljs-comment\">// 关闭文件</span>\n    <span class=\"hljs-keyword\">if</span> (fclose(file) == <span class=\"hljs-number\">0</span>) {\n        printf(<span class=\"hljs-string\">&quot;文件关闭成功！\\n&quot;</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n        printf(<span class=\"hljs-string\">&quot;文件关闭失败！\\n&quot;</span>);\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></div></pre>\n<h4><a id=\"__320\"></a>🌟 解释</h4>\n<p>这个例子中，<code>fopen</code> 函数以写入模式打开 <code>test.txt</code> 文件，进行文件写入操作后，使用 <code>fclose</code> 函数关闭文件，并根据返回值判断关闭是否成功。</p>\n<h3><a id=\"7_fgets___324\"></a>7. <code>fgets</code> 函数：安全读取字符串 📃</h3>\n<h4><a id=\"__326\"></a>🔧 使用格式</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">char</span> *fgets(<span class=\"hljs-type\">char</span> *str, <span class=\"hljs-type\">int</span> n, FILE *stream);\n</code></div></pre>\n<h4><a id=\"__332\"></a>🎯 作用</h4>\n<p>从指定的文件流中读取一行字符串，并存储到 <code>str</code> 指向的字符数组中。</p>\n<h4><a id=\"__336\"></a>📖 用法</h4>\n<p><code>str</code> 是存储读取字符串的字符数组，<code>n</code> 是最多读取的字符数（包含换行符和字符串结束符 <code>\'\\0\'</code>），<code>stream</code> 是文件流指针，可以是 <code>stdin</code>（标准输入）或者通过 <code>fopen</code> 打开的文件指针。</p>\n<h4><a id=\"__340\"></a>⚠️ 注意事项</h4>\n<ul>\n<li>若读取的字符数达到 <code>n - 1</code> 或者遇到换行符，读取会停止，并且会在字符串末尾添加 <code>\'\\0\'</code>。</li>\n<li>若读取成功，返回 <code>str</code> 指针；若遇到文件结束符或者出错，返回 <code>NULL</code>。</li>\n</ul>\n<h4><a id=\"__345\"></a>📌 适用类型</h4>\n<p>适用于字符串类型。</p>\n<h4><a id=\"__349\"></a>💡 示例</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\">#include &lt;stdio.h&gt;\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-type\">char</span> buffer[<span class=\"hljs-number\">100</span>];\n    <span class=\"hljs-comment\">// 从标准输入读取一行字符串</span>\n    printf(<span class=\"hljs-string\">&quot;请输入一行字符串：&quot;</span>); \n    fgets(buffer, sizeof(buffer), stdin);\n\n    <span class=\"hljs-comment\">// 输出读取的字符串</span>\n    printf(<span class=\"hljs-string\">&quot;你输入的字符串是：%s&quot;</span>, buffer); \n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></div></pre>\n<h4><a id=\"__367\"></a>🌟 解释</h4>\n<p>在这个例子中，<code>fgets</code> 函数从标准输入读取一行字符串，最多读取 <code>sizeof(buffer) - 1</code> 个字符，然后将其存储到 <code>buffer</code> 数组中，并输出该字符串。</p>\n<h3><a id=\"8_fputs___371\"></a>8. <code>fputs</code> 函数：输出字符串到文件 📤</h3>\n<h4><a id=\"__373\"></a>🔧 使用格式</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">fputs</span><span class=\"hljs-params\">(const <span class=\"hljs-type\">char</span> *str, FILE *stream)</span>;\n</code></div></pre>\n<h4><a id=\"__379\"></a>🎯 作用</h4>\n<p>把字符串 <code>str</code> 输出到指定的文件流中。</p>\n<h4><a id=\"__383\"></a>📖 用法</h4>\n<p><code>str</code> 是要输出的字符串，<code>stream</code> 是文件流指针，可以是 <code>stdout</code>（标准输出）或者通过 <code>fopen</code> 打开的文件指针。</p>\n<h4><a id=\"__387\"></a>⚠️ 注意事项</h4>\n<ul>\n<li>函数不会自动添加换行符，若需要换行，要在字符串中手动添加 <code>\'\\n\'</code>。</li>\n<li>若输出成功，返回非负值；若出错，返回 <code>EOF</code>。</li>\n</ul>\n<h4><a id=\"__392\"></a>📌 适用类型</h4>\n<p>适用于字符串类型。</p>\n<h4><a id=\"__396\"></a>💡 示例</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\">#include &lt;stdio.h&gt;\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> {\n    FILE *file;\n    <span class=\"hljs-comment\">// 以写入模式打开文件</span>\n    file = fopen(<span class=\"hljs-string\">&quot;test.txt&quot;</span>, <span class=\"hljs-string\">&quot;w&quot;</span>); \n\n    <span class=\"hljs-keyword\">if</span> (file == NULL) {\n        <span class=\"hljs-comment\">// 输出错误信息</span>\n        printf(<span class=\"hljs-string\">&quot;无法打开文件！\\n&quot;</span>); \n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    }\n\n    <span class=\"hljs-comment\">// 向文件中写入字符串</span>\n    fputs(<span class=\"hljs-string\">&quot;Hello, World!\\n&quot;</span>, file); \n\n    <span class=\"hljs-comment\">// 关闭文件</span>\n    fclose(file); \n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></div></pre>\n<h4><a id=\"__422\"></a>🌟 解释</h4>\n<p>此例中，<code>fopen</code> 函数以写入模式打开 <code>test.txt</code> 文件，<code>fputs</code> 函数把字符串 <code>&quot;Hello, World!\\n&quot;</code> 写入文件，最后使用 <code>fclose</code> 函数关闭文件。</p>\n<br />\n<h4><a id=\"_428\"></a><strong>缓冲区管理技巧</strong></h4>\n<p><strong>通用清空方案</strong>：</p>\n<pre><code class=\"lang-\">void clear_buffer() {\n    int c;\n    while ((c = getchar()) != \'\\n\' &amp;&amp; c != EOF);\n}\n</code></pre>\n<p><strong>使用场景</strong>：</p>\n<ul>\n<li>\n<p>在<code>scanf()</code>后立即调用</p>\n</li>\n<li>\n<p>处理异常输入时</p>\n</li>\n</ul>\n<p><strong>💡 黄金法则</strong>：</p>\n<ol>\n<li>\n<p>所有输入函数都要考虑缓冲区溢出风险</p>\n</li>\n<li>\n<p>文件操作后必须检查返回值并关闭文件</p>\n</li>\n<li>\n<p>格式化IO要严格匹配类型</p>\n</li>\n</ol>\n<p>掌握这些核心函数，你的C语言IO操作将游刃有余！ 🎯</p>\n<br />\n','输入输出函数：能够让程序和用户或者文件进行交互。 {#content_views}\n-----------------------------------------\n\n### 头文件：#include\\<stdio.h\\>\n\n### 1. `printf` 函数：输出格式化信息到控制台 💬\n\n#### 🔧 使用格式\n\n```java\nprintf(\"格式字符串\", 参数列表);\n```\n\n#### 🎯 作用\n\n把格式化后的字符串输出到控制台。格式字符串里可以包含普通字符和格式说明符，格式说明符会被后面参数列表里的值替换。\n\n#### 📖 用法\n\n格式说明符一般以 `%` 开头，常见的有 `%d`（用于输出整数）、`%f`（用于输出浮点数）、`%c`（用于输出字符）、`%s`（用于输出字符串）等。\n\n#### ⚠️ 注意事项\n\n* 格式说明符要和参数的类型相匹配。\n* 格式字符串中的普通字符会原样输出。\n\n#### 📌 适用类型\n\n适用于各种基本数据类型以及字符串。\n\n#### 💡 示例\n\n```java\n#include <stdio.h>\n\nint main() {\n    int age = 20;\n    float height = 1.75;\n    char grade = \'A\';\n    char name[] = \"Alice\";\n\n    // 输出整数\n    printf(\"年龄是 %d 岁。\\n\", age); \n    // 输出浮点数\n    printf(\"身高是 %.2f 米。\\n\", height); \n    // 输出字符\n    printf(\"成绩等级是 %c。\\n\", grade); \n    // 输出字符串\n    printf(\"姓名是 %s。\\n\", name); \n\n    return 0;\n}\n```\n\n#### 🌟 解释\n\n在这个例子中，`printf` 函数依据格式说明符把变量的值输出到控制台。`%.2f` 表示输出浮点数时保留两位小数。\n\n### 2. `scanf` 函数：从控制台读取格式化输入 📥\n\n#### 🔧 使用格式\n\n```java\nscanf(\"格式字符串\", &变量1, &变量2, ...);\n```\n\n#### 🎯 作用\n\n从控制台读取用户输入的数据，并且按照格式字符串的要求把数据存储到对应的变量中。\n\n#### 📖 用法\n\n格式说明符和 `printf` 函数里的类似，不过要在变量名前加上取地址符 `&`，以此表明是要把数据存储到该变量的地址处。\n\n#### ⚠️ 注意事项\n\n* 输入的数据要和格式字符串匹配。\n* 输入多个数据时，一般用空格、制表符或者换行符分隔。\n\n#### 📌 适用类型\n\n适用于各种基本数据类型。\n\n#### 💡 示例\n\n```java\n#include <stdio.h>\n\nint main() {\n    int num;\n    float score;\n    char ch;\n\n    // 提示用户输入整数\n    printf(\"请输入一个整数：\"); \n    scanf(\"%d\", &num);\n\n    // 提示用户输入浮点数\n    printf(\"请输入一个浮点数：\"); \n    scanf(\"%f\", &score);\n\n    // 提示用户输入字符\n    printf(\"请输入一个字符：\"); \n    scanf(\" %c\", &ch); // 注意前面的空格，用于跳过之前输入的换行符\n\n    // 输出用户输入的内容\n    printf(\"你输入的整数是 %d，浮点数是 %.2f，字符是 %c。\\n\", num, score, ch); \n\n    return 0;\n}\n```\n\n#### 🌟 解释\n\n这个例子中，`scanf` 函数按照格式说明符读取用户输入的数据，并把它们存储到对应的变量中。在读取字符前加空格是为了跳过之前输入的换行符。\n\n### 3. `getchar` 函数：读取单个字符 ⌨️\n\n#### 🔧 使用格式\n\n```java\nint getchar(void);\n```\n\n#### 🎯 作用\n\n从标准输入（通常是键盘）读取一个字符，并返回该字符的 ASCII 码值。\n\n#### 📖 用法\n\n调用 `getchar` 函数时，程序会暂停，等待用户输入一个字符，按下回车键后，函数会返回该字符的 ASCII 码值。\n\n#### ⚠️ 注意事项\n\n* `getchar` 会读取换行符，所以在连续使用时要注意处理换行符。\n* 函数返回值是 `int` 类型，不是 `char` 类型。\n\n#### 📌 适用类型\n\n适用于字符类型。\n\n#### 💡 示例\n\n```java\n#include <stdio.h>\n\nint main() {\n    char ch;\n    // 提示用户输入一个字符\n    printf(\"请输入一个字符：\"); \n    ch = getchar();\n    // 输出用户输入的字符\n    printf(\"你输入的字符是 %c。\\n\", ch); \n\n    return 0;\n}\n```\n\n#### 🌟 解释\n\n此例中，`getchar` 函数读取用户输入的一个字符，并将其赋值给变量 `ch`，然后输出该字符。\n\n### 4. `putchar` 函数：输出单个字符 🖨️\n\n#### 🔧 使用格式\n\n```java\nint putchar(int c);\n```\n\n#### 🎯 作用\n\n把一个字符输出到标准输出（通常是控制台）。\n\n#### 📖 用法\n\n传入一个字符的 ASCII 码值或者字符常量，函数会将对应的字符输出到控制台。\n\n#### ⚠️ 注意事项\n\n* 传入的参数可以是字符常量，也可以是字符变量的 ASCII 码值。\n* 函数返回值是输出的字符的 ASCII 码值。\n\n#### 📌 适用类型\n\n适用于字符类型。\n\n#### 💡 示例\n\n```java\n#include <stdio.h>\n\nint main() {\n    char ch = \'B\';\n    // 输出字符\n    putchar(ch); \n    putchar(\'\\n\'); // 输出换行符\n\n    return 0;\n}\n```\n\n#### 🌟 解释\n\n在这个例子中，`putchar` 函数把字符 `B` 输出到控制台，然后输出一个换行符。\n\n### 5. `fopen` 函数：打开文件 📂\n\n#### 🔧 使用格式\n\n```java\nFILE *fopen(const char *filename, const char *mode);\n```\n\n#### 🎯 作用\n\n打开指定文件名的文件，并返回一个指向该文件的 `FILE` 指针。\n\n#### 📖 用法\n\n`filename` 是要打开的文件的名称，`mode` 是打开文件的模式，常见的模式有：\n\n<br />\n\n* `\"r\"`：以只读模式打开文件。\n* `\"w\"`：以写入模式打开文件，如果文件不存在则创建，如果存在则清空内容。\n* `\"a\"`：以追加模式打开文件，如果文件不存在则创建。\n\n#### ⚠️ 注意事项\n\n* 打开文件后，要检查返回的指针是否为 `NULL`，若为 `NULL` 则表示打开文件失败。\n* 操作完文件后，要使用 `fclose` 函数关闭文件。\n\n#### 📌 适用类型\n\n适用于文件操作。\n\n#### 💡 示例\n\n```java\n#include <stdio.h>\n\nint main() {\n    FILE *file;\n    // 以只读模式打开文件\n    file = fopen(\"test.txt\", \"r\"); \n\n    if (file == NULL) {\n        // 输出错误信息\n        printf(\"无法打开文件！\\n\"); \n        return 1;\n    }\n\n    // 这里可以进行文件读取操作\n\n    // 关闭文件\n    fclose(file); \n\n    return 0;\n}\n```\n\n#### 🌟 解释\n\n此例中，`fopen` 函数尝试以只读模式打开 `test.txt` 文件，若打开失败则输出错误信息，打开成功后可以进行文件读取操作，最后使用 `fclose` 函数关闭文件。\n\n### 6. `fclose` 函数：关闭文件 ❌\n\n#### 🔧 使用格式\n\n```java\nint fclose(FILE *stream);\n```\n\n#### 🎯 作用\n\n关闭指定的文件流，释放相关资源。\n\n#### 📖 用法\n\n传入一个指向 `FILE` 类型的指针，该指针是通过 `fopen` 函数返回的。\n\n#### ⚠️ 注意事项\n\n* 关闭文件后，就不能再对该文件进行读写操作了。\n* 函数返回值为 0 表示关闭成功，非 0 表示关闭失败。\n\n#### 📌 适用类型\n\n适用于文件操作。\n\n#### 💡 示例\n\n```java\n#include <stdio.h>\n\nint main() {\n    FILE *file;\n    // 以写入模式打开文件\n    file = fopen(\"test.txt\", \"w\"); \n\n    if (file == NULL) {\n        // 输出错误信息\n        printf(\"无法打开文件！\\n\"); \n        return 1;\n    }\n\n    // 这里可以进行文件写入操作\n\n    // 关闭文件\n    if (fclose(file) == 0) {\n        printf(\"文件关闭成功！\\n\");\n    } else {\n        printf(\"文件关闭失败！\\n\");\n    }\n\n    return 0;\n}\n```\n\n#### 🌟 解释\n\n这个例子中，`fopen` 函数以写入模式打开 `test.txt` 文件，进行文件写入操作后，使用 `fclose` 函数关闭文件，并根据返回值判断关闭是否成功。\n\n### 7. `fgets` 函数：安全读取字符串 📃\n\n#### 🔧 使用格式\n\n```java\nchar *fgets(char *str, int n, FILE *stream);\n```\n\n#### 🎯 作用\n\n从指定的文件流中读取一行字符串，并存储到 `str` 指向的字符数组中。\n\n#### 📖 用法\n\n`str` 是存储读取字符串的字符数组，`n` 是最多读取的字符数（包含换行符和字符串结束符 `\'\\0\'`），`stream` 是文件流指针，可以是 `stdin`（标准输入）或者通过 `fopen` 打开的文件指针。\n\n#### ⚠️ 注意事项\n\n* 若读取的字符数达到 `n - 1` 或者遇到换行符，读取会停止，并且会在字符串末尾添加 `\'\\0\'`。\n* 若读取成功，返回 `str` 指针；若遇到文件结束符或者出错，返回 `NULL`。\n\n#### 📌 适用类型\n\n适用于字符串类型。\n\n#### 💡 示例\n\n```java\n#include <stdio.h>\n\nint main() {\n    char buffer[100];\n    // 从标准输入读取一行字符串\n    printf(\"请输入一行字符串：\"); \n    fgets(buffer, sizeof(buffer), stdin);\n\n    // 输出读取的字符串\n    printf(\"你输入的字符串是：%s\", buffer); \n\n    return 0;\n}\n```\n\n#### 🌟 解释\n\n在这个例子中，`fgets` 函数从标准输入读取一行字符串，最多读取 `sizeof(buffer) - 1` 个字符，然后将其存储到 `buffer` 数组中，并输出该字符串。\n\n### 8. `fputs` 函数：输出字符串到文件 📤\n\n#### 🔧 使用格式\n\n```java\nint fputs(const char *str, FILE *stream);\n```\n\n#### 🎯 作用\n\n把字符串 `str` 输出到指定的文件流中。\n\n#### 📖 用法\n\n`str` 是要输出的字符串，`stream` 是文件流指针，可以是 `stdout`（标准输出）或者通过 `fopen` 打开的文件指针。\n\n#### ⚠️ 注意事项\n\n* 函数不会自动添加换行符，若需要换行，要在字符串中手动添加 `\'\\n\'`。\n* 若输出成功，返回非负值；若出错，返回 `EOF`。\n\n#### 📌 适用类型\n\n适用于字符串类型。\n\n#### 💡 示例\n\n```java\n#include <stdio.h>\n\nint main() {\n    FILE *file;\n    // 以写入模式打开文件\n    file = fopen(\"test.txt\", \"w\"); \n\n    if (file == NULL) {\n        // 输出错误信息\n        printf(\"无法打开文件！\\n\"); \n        return 1;\n    }\n\n    // 向文件中写入字符串\n    fputs(\"Hello, World!\\n\", file); \n\n    // 关闭文件\n    fclose(file); \n\n    return 0;\n}\n```\n\n#### 🌟 解释\n\n此例中，`fopen` 函数以写入模式打开 `test.txt` 文件，`fputs` 函数把字符串 `\"Hello, World!\\n\"` 写入文件，最后使用 `fclose` 函数关闭文件。\n\n<br />\n\n#### **缓冲区管理技巧**\n\n**通用清空方案**：\n\n```\nvoid clear_buffer() {\n    int c;\n    while ((c = getchar()) != \'\\n\' && c != EOF);\n}\n```\n\n**使用场景**：\n\n* 在`scanf()`后立即调用\n\n* 处理异常输入时\n\n**💡 黄金法则**：\n\n1. 所有输入函数都要考虑缓冲区溢出风险\n\n2. 文件操作后必须检查返回值并关闭文件\n\n3. 格式化IO要严格匹配类型\n\n掌握这些核心函数，你的C语言IO操作将游刃有余！ 🎯\n\n<br />\n\n',1,0,1,0,0,0,'https://blog.csdn.net/2301_77025086/article/details/146886620?spm=1000.2115.3001.10524',0,NULL,NULL,'2025-04-28 17:19:56','2025-07-08 22:57:05'),(324,1,41,'Java详细安装配置教程(Windows)，从下载到配置——Java-1.8(jdk)安装','http://113.45.240.54:9092/article-cover/6f1b1378-034d-4306-9f5d-744c33107a60_freecompress-Neat-Admin 管理系统 (15).png','Java-1.8(jdk)安装','<h2><a id=\"1Java_01Java_content_views_0\"></a>{#1Java_0}1、Java简介 {#content_views}</h2>\n<p>Java 是由 Sun Microsystems 公司于 1995 年 5 月推出的 Java 面向对象程序设计语言和 Java 平台的总称。由 James Gosling和同事们共同研发，并在 1995 年正式推出。</p>\n<p>后来 Sun 公司被 Oracle （甲骨文）公司收购，Java 也随之成为 Oracle 公司的产品。</p>\n<p>Java分为三个体系：</p>\n<ul>\n<li>JavaSE(J2SE)(Java2 Platform Standard Edition，java平台标准版)</li>\n<li>JavaEE(J2EE)(Java 2 Platform,Enterprise Edition，java平台企业版)</li>\n<li>JavaME(J2ME)(Java 2 Platform Micro Edition，java平台微型版)。</li>\n</ul>\n<p>2005 年 6 月，JavaOne 大会召开，SUN 公司公开 Java SE 6。此时，Java 的各种版本已经更名，以取消其中的数字 “2”：J2EE 更名为 Java EE，J2SE 更名为Java SE，J2ME 更名为 Java ME。</p>\n<h2><a id=\"2Java_142Java_15\"></a>{#2Java_14}2、Java安装</h2>\n<p>Java安装分为以下几步：</p>\n<ul>\n<li>下载JDK源文件</li>\n<li>安装exe软件</li>\n<li>配置环境变量</li>\n<li>验证安装结果</li>\n</ul>\n<h3><a id=\"1JDK_211JDK_25\"></a>{#1JDK_21}1、下载JDK源文件</h3>\n<p>下载链接：<a href=\"https://www.oracle.com/java/technologies/javase/javase8u211-later-archive-downloads.html\" target=\"_blank\">https://www.oracle.com/java/technologies/javase/javase8u211-later-archive-downloads.html</a><br />\n选择自己系统对应的版本下载，如：当前系统是windows 64位版本，则选择框选的版本，点击后面的蓝色字即可下载。<br />\n<img src=\"https://i-blog.csdnimg.cn/blog_migrate/82eb2e0f57e3cfde2dbaf81c35cf1e05.png\" alt=\"1\" /></p>\n<h3><a id=\"2exe_252exe_31\"></a>{#2exe_25}2、安装exe文件</h3>\n<p>开发环境能放到自定义目录就放到自定义目录，这样才能更好的管理，所以在开始之前，在C盘目录下新建一个<code>web</code>目录，用于存放Java环境。</p>\n<p>新建的web目录（maven请自动忽略）</p>\n<p>双击打开文件<code>jdk-8u301-windows-x64.exe</code>，点击下一步：</p>\n<p>点击更改：</p>\n<p>将文件目录修改成：<code>C:\\web\\Java\\jdk1.8.0_301\\</code>  点击确定并下一步，等待安装，此时在<code>C:\\web\\Java\\</code>下面创建文件夹<code>jre1.8.0_301</code>，与<code>C:\\web\\Java\\jdk1.8.0_301\\</code>平级<br />\n将此目录更改成创建的目录，点击更改选择即可<br />\n点击下一步，在最后弹出的窗口点击关闭即可。</p>\n<h4><a id=\"psjdk__jre___49psjdk__jre___47\"></a>{#psjdk__jre___49}ps：jdk 和 jre 是什么？ 有什么区别？</h4>\n<ul>\n<li>jre</li>\n</ul>\n<p>Jre 是java runtime environment, 是java程序的运行环境。既然是运行，当然要包含jvm，也就是大家熟悉的虚拟机啦，还有所有java类库的class文件，都在lib目录下打包成了jar。大家可以自己验证。至于在windows上的虚拟机是哪个文件呢？学过MFC的都知道什么是dll文件吧，那么大家看看jre/bin/client里面是不是有一个jvm.dll呢？那就是虚拟机。</p>\n<ul>\n<li>jdk</li>\n</ul>\n<p>Jdk 是java development kit，是java的开发工具包， 主要是给ide 用的，里面包含了各种类库和工具。当然也包括了另外一个Jre.， 而且jdk/jre/bin 里面也有一个server文件夹， server文件夹下面也有一个jvm.dll 虚拟机。</p>\n<p>为什么要将jre和jdk分开？这个问题可以留到课程学习的时候进行解答。</p>\n<h3><a id=\"3_613_59\"></a>{#3_61}3、配置环境变量</h3>\n<p>配置原因：</p>\n<p>因为JDK装好后的两个重要执行文件<strong>javac.exe</strong> (代码编译文件)和<strong>java.exe</strong>(代码执行文件)存在于所装的JDK的bin目录下，而我们写的Java或者跑的别人的程序一般是放在一个新的目录，主要是方便管理，如果都放在这里，会很混乱，更何况编译还有class文件生成。但是，当我们要运行Java程序时，我们需要编译（需要使用javac.exe）和执行（需要使用java.exe）,而系统默认的是在当前程序所在的文件夹目录下去寻找这两个执行文件，而不会去其他地方找，此时我们就需要配置Path环境变量，使得每次程序运行就自动到安装JDK的bin目录下去搜索javac.exe和java.exe文件。</p>\n<p>打开此电脑，空白处右键属性：<br />\n依次点击高级系统设置-&gt;环境变量-&gt;新建 ，一共需要添加三个变量，依次为<code>JAVA_HOME</code>, <code>JRE_HOME</code>,<code>CLASSPATH</code>!<br />\n变量名：<code>JAVA_HOME</code>，变量值：<code>C:\\web\\Java\\jdk1.8.0_301</code>，点击确定；<br />\n变量名：<code>JRE_HOME</code>，变量值：<code>C:\\web\\Java\\jre1.8.0_301</code>，点击确定；<br />\n变量名：<code>CLASSPATH</code>，变量值：<code>.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar; </code>，注意变量值的前面有一个<code>.</code>，点击确定；<br />\n可以看到，变量值是Java环境的<code>JDK</code>和<code>JRE</code>的安装目录。</p>\n<p>点开双击点开path<br />\n点击新建添加两个变量值：<code>%JAVA_HOME%\\bin</code>，<code>%JRE_HOME%\\bin</code><br />\n点击所有的确定将开启的几个窗口关闭，这样Java环境变量即为配置完毕。</p>\n<h3><a id=\"4_874_76\"></a>{#4_87}4、验证安装结果</h3>\n<p>使用组合键<code>win+r</code>，即为同时按下键盘的田字格键和字母R，打开运行窗口：<br />\n输入cmd，点击确定打开命令行窗口：<br />\n输入<code>java</code>，回车，查看结果：<br />\n输入<code>javac</code>，回车，查看结果：<br />\n如果你的结果和我的一样，那么恭喜你，Java环境配置成功，可以开始Java的学习和代码编写。<br />\n如果没有成功，报错类似于<code>\'java\'不是内部或外部命令，也不是可运行的程序或批处理文件</code>，那么你需要重新看看Java是否安装成功，环境变量是否配置成功。</p>\n','{#1Java_0}1、Java简介 {#content_views}\n-----------------------------------\n\nJava 是由 Sun Microsystems 公司于 1995 年 5 月推出的 Java 面向对象程序设计语言和 Java 平台的总称。由 James Gosling和同事们共同研发，并在 1995 年正式推出。\n\n后来 Sun 公司被 Oracle （甲骨文）公司收购，Java 也随之成为 Oracle 公司的产品。\n\nJava分为三个体系：\n\n* JavaSE(J2SE)(Java2 Platform Standard Edition，java平台标准版)\n* JavaEE(J2EE)(Java 2 Platform,Enterprise Edition，java平台企业版)\n* JavaME(J2ME)(Java 2 Platform Micro Edition，java平台微型版)。\n\n2005 年 6 月，JavaOne 大会召开，SUN 公司公开 Java SE 6。此时，Java 的各种版本已经更名，以取消其中的数字 \"2\"：J2EE 更名为 Java EE，J2SE 更名为Java SE，J2ME 更名为 Java ME。\n\n{#2Java_14}2、Java安装\n-------------------\n\nJava安装分为以下几步：\n\n* 下载JDK源文件\n* 安装exe软件\n* 配置环境变量\n* 验证安装结果\n\n### {#1JDK_21}1、下载JDK源文件\n\n下载链接：<https://www.oracle.com/java/technologies/javase/javase8u211-later-archive-downloads.html>  \n选择自己系统对应的版本下载，如：当前系统是windows 64位版本，则选择框选的版本，点击后面的蓝色字即可下载。  \n![1](https://i-blog.csdnimg.cn/blog_migrate/82eb2e0f57e3cfde2dbaf81c35cf1e05.png)\n\n### {#2exe_25}2、安装exe文件\n\n开发环境能放到自定义目录就放到自定义目录，这样才能更好的管理，所以在开始之前，在C盘目录下新建一个`web`目录，用于存放Java环境。\n\n新建的web目录（maven请自动忽略）\n\n\n\n双击打开文件`jdk-8u301-windows-x64.exe`，点击下一步：  \n  \n点击更改：  \n \n将文件目录修改成：`C:\\web\\Java\\jdk1.8.0_301\\`  点击确定并下一步，等待安装，此时在`C:\\web\\Java\\`下面创建文件夹`jre1.8.0_301`，与`C:\\web\\Java\\jdk1.8.0_301\\`平级\n将此目录更改成创建的目录，点击更改选择即可 \n点击下一步，在最后弹出的窗口点击关闭即可。  \n\n#### {#psjdk__jre___49}ps：jdk 和 jre 是什么？ 有什么区别？\n\n* jre\n\nJre 是java runtime environment, 是java程序的运行环境。既然是运行，当然要包含jvm，也就是大家熟悉的虚拟机啦，还有所有java类库的class文件，都在lib目录下打包成了jar。大家可以自己验证。至于在windows上的虚拟机是哪个文件呢？学过MFC的都知道什么是dll文件吧，那么大家看看jre/bin/client里面是不是有一个jvm.dll呢？那就是虚拟机。\n\n* jdk\n\nJdk 是java development kit，是java的开发工具包， 主要是给ide 用的，里面包含了各种类库和工具。当然也包括了另外一个Jre.， 而且jdk/jre/bin 里面也有一个server文件夹， server文件夹下面也有一个jvm.dll 虚拟机。\n\n为什么要将jre和jdk分开？这个问题可以留到课程学习的时候进行解答。\n\n### {#3_61}3、配置环境变量\n\n配置原因：\n\n因为JDK装好后的两个重要执行文件**javac.exe** (代码编译文件)和**java.exe**(代码执行文件)存在于所装的JDK的bin目录下，而我们写的Java或者跑的别人的程序一般是放在一个新的目录，主要是方便管理，如果都放在这里，会很混乱，更何况编译还有class文件生成。但是，当我们要运行Java程序时，我们需要编译（需要使用javac.exe）和执行（需要使用java.exe）,而系统默认的是在当前程序所在的文件夹目录下去寻找这两个执行文件，而不会去其他地方找，此时我们就需要配置Path环境变量，使得每次程序运行就自动到安装JDK的bin目录下去搜索javac.exe和java.exe文件。\n\n打开此电脑，空白处右键属性：   \n依次点击高级系统设置-\\>环境变量-\\>新建 ，一共需要添加三个变量，依次为`JAVA_HOME`, `JRE_HOME`,`CLASSPATH`!\n变量名：`JAVA_HOME`，变量值：`C:\\web\\Java\\jdk1.8.0_301`，点击确定；  \n变量名：`JRE_HOME`，变量值：`C:\\web\\Java\\jre1.8.0_301`，点击确定；  \n变量名：`CLASSPATH`，变量值：`.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar; `，注意变量值的前面有一个`.`，点击确定；    \n可以看到，变量值是Java环境的`JDK`和`JRE`的安装目录。\n\n点开双击点开path  \n点击新建添加两个变量值：`%JAVA_HOME%\\bin`，`%JRE_HOME%\\bin`  \n点击所有的确定将开启的几个窗口关闭，这样Java环境变量即为配置完毕。\n\n### {#4_87}4、验证安装结果\n\n使用组合键`win+r`，即为同时按下键盘的田字格键和字母R，打开运行窗口：  \n输入cmd，点击确定打开命令行窗口：  \n输入`java`，回车，查看结果：  \n输入`javac`，回车，查看结果：  \n如果你的结果和我的一样，那么恭喜你，Java环境配置成功，可以开始Java的学习和代码编写。  \n如果没有成功，报错类似于`\'java\'不是内部或外部命令，也不是可运行的程序或批处理文件`，那么你需要重新看看Java是否安装成功，环境变量是否配置成功。\n',1,0,1,0,0,0,'https://blog.csdn.net/weixin_45710060/article/details/123315280',0,NULL,NULL,'2025-06-05 17:24:28','2025-07-08 22:54:13'),(329,1,39,'最新版Manus 实操手册','http://113.45.240.54:9092/article-cover/fb92315b-caae-404f-899c-bc8f666859cd_freecompress-Neat-Admin 管理系统 (19).png','Manus ','<h2><a id=\"Manus__0\"></a>Manus 实操手册</h2>\n<h3><a id=\"Manus__3\"></a>一、Manus 概述</h3>\n<h4><a id=\"11__511__5\"></a>{#11__5}1.1 官网入口</h4>\n<p>Manus 的官方网站为 https://manus.im，用户可通过浏览器直接访问。该网站是产品的主要信息发布渠道，提供功能演示、案例库、内测申请入口等核心服务。官网设计简洁，首页展示产品定位、核心功能模块及用户评价，适合零基础用户快速了解产品价值。</p>\n<h4><a id=\"12__912__9\"></a>{#12__9}1.2 产品定位</h4>\n<h5><a id=\"121__11121__11\"></a>{#121__11}1.2.1 定义与目标</h5>\n<p>Manus 是全球首款通用型 AI 智能体（Agent），由中国 Monica 团队研发。其核心目标是&quot;将用户的想法转化为具体成果&quot;，通过自主规划、调用工具和交付完整任务成果，帮助用户高效完成复杂任务。与普通聊天机器人不同，Manus 能够独立执行端到端任务，例如从数据收集、分析到生成可视化报告的全流程操作。</p>\n<h5><a id=\"122__15122__15\"></a>{#122__15}1.2.2 核心特点</h5>\n<ul>\n<li><strong>通用性</strong>：支持跨领域任务，涵盖金融分析、旅行规划、教育课件制作等 51 个场景。</li>\n<li><strong>自主性</strong>：无需用户分步指导，可自动分解任务、调用工具（如代码编辑器、浏览器）并优化执行路径。</li>\n<li><strong>交付能力</strong>：直接生成可视化成果（如 PDF、Excel、网页），而非仅提供文字建议。</li>\n</ul>\n<h5><a id=\"123__21123__21\"></a>{#123__21}1.2.3 技术架构</h5>\n<p>Manus 采用多智能体系统（Multiple Agent System）与云端虚拟机技术：</p>\n<ul>\n<li><strong>规划层</strong>：分析用户需求，拆解任务步骤（如&quot;分析股票&quot;拆解为数据抓取、趋势建模、报告生成）。</li>\n<li><strong>执行层</strong>：调用虚拟环境中的工具（代码执行、网页浏览、文件处理）。</li>\n<li><strong>验证层</strong>：检查结果准确性，动态修正错误。</li>\n</ul>\n<h4><a id=\"13__2913__29\"></a>{#13__29}1.3 团队背景</h4>\n<h5><a id=\"131_Red_31131_Red_31\"></a>{#131_Red_31}1.3.1 创始人：肖弘（Red）</h5>\n<ul>\n<li><strong>履历</strong>：连续创业者，华中科技大学软件工程专业毕业。曾开发微信公众号增强工具&quot;莺件&quot;和企业微信应用&quot;微伴助手&quot;，获腾讯投资。</li>\n<li><strong>理念</strong>：主张&quot;AI 应成为生产力伙伴&quot;，推动 Manus 从工具型助手进化为自主代理。</li>\n</ul>\n<h5><a id=\"132_Peak_36132_Peak_36\"></a>{#132_Peak_36}1.3.2 首席科学家：季逸超（Peak）</h5>\n<ul>\n<li><strong>成就</strong>：主导开发中文互联网最大通用知识图谱系统 Magi，曾推出 iOS 浏览器&quot;猛犸&quot;并获 MacWorld 特等奖。</li>\n<li><strong>技术贡献</strong>：为 Manus 设计基于 LLM 的操作系统架构，实现多模态数据处理与跨平台工具调用。</li>\n</ul>\n<h5><a id=\"133__41133__41\"></a>{#133__41}1.3.3 技术团队</h5>\n<ul>\n<li><strong>规模</strong>：Monica 团队成立于 2023 年，现有成员 51-200 人，专注 AI 推理与工程化落地。</li>\n<li><strong>里程碑</strong>：2022 年立项 Monica 项目（早于 ChatGPT 发布），2025 年推出 Manus，在 GAIA 基准测试中超越 OpenAI 同类产品。</li>\n</ul>\n<h4><a id=\"14__4614__46\"></a>{#14__46}1.4 产品发展历程</h4>\n<h5><a id=\"141__48141__48\"></a>{#141__48}1.4.1 早期探索</h5>\n<ul>\n<li><strong>2022 年</strong>：Monica 项目立项，以浏览器插件形式提供 AI 助手服务，集成多模型 API 并主打海外市场。</li>\n<li><strong>2024 年</strong>：用户突破百万，成为海外 AI 插件领域头部产品，验证工具调用与任务自动化能力。</li>\n</ul>\n<h5><a id=\"142__53142__53\"></a>{#142__53}1.4.2 技术突破</h5>\n<ul>\n<li><strong>2025 年</strong>：发布 Manus，整合动态任务调度引擎、神经记忆网络等创新技术，实现从&quot;辅助工具&quot;到&quot;自主代理&quot;的跨越。</li>\n</ul>\n<h5><a id=\"143__57143__57\"></a>{#143__57}1.4.3 市场反响</h5>\n<ul>\n<li><strong>内测阶段</strong>：吸引超 1000 万用户申请，社交媒体讨论量单日破 10 万条，被评价为&quot;Agent 爆发元年的标志性产品&quot;。</li>\n</ul>\n<h3><a id=\"_61_61\"></a>{#_61}二、获取方式</h3>\n<h4><a id=\"1__631__63\"></a>{#1__63}1. 内测资格申请流程</h4>\n<h5><a id=\"11__6511__65\"></a>{#11__65}1.1 官网申请入口</h5>\n<p>访问 Manus 官方网站（https://manus.im），点击首页的 “Get Early Access”（获取早期访问权限）按钮进入申请页面。</p>\n<h5><a id=\"12__6912__69\"></a>{#12__69}1.2 填写基础信息</h5>\n<p>注册账户时需使用常用邮箱（支持谷歌、GitHub 等第三方账号快捷登录）。在申请表单中填写以下内容：</p>\n<ul>\n<li><strong>职业背景</strong>：如学生、开发者、企业职员等（影响内测权限分配）。</li>\n<li><strong>使用场景</strong>：描述计划使用 Manus 的具体任务类型（例如&quot;股票分析&quot;“旅行规划”），需尽量具体以提高审核通过率。</li>\n</ul>\n<h5><a id=\"13__7613__76\"></a>{#13__76}1.3 等待审核与通知</h5>\n<p>提交申请后，系统将通过邮件告知审核结果，通常等待时间为数小时至一周。若未收到通知，可检查垃圾邮件箱或重新提交申请。</p>\n<h4><a id=\"2__802__80\"></a>{#2__80}2. 邀请码获取渠道</h4>\n<h5><a id=\"21__8221__82\"></a>{#21__82}2.1 官方社群与活动</h5>\n<ul>\n<li><strong>Discord 群组</strong>：加入 Manus 官方 Discord 频道（链接见官网），定期参与互动可获取随机发放的邀请码。</li>\n<li><strong>推特活动</strong>：关注官方推特账号（@manusai_hq），参与转发抽奖、案例分享等活动赢取邀请码。</li>\n</ul>\n<h5><a id=\"22__8722__87\"></a>{#22__87}2.2 二手平台风险提示</h5>\n<p>部分用户通过二手平台（如闲鱼）转卖邀请码，但需警惕高价欺诈（价格高达数万元）或无效码风险。建议优先通过官方渠道申请。</p>\n<h4><a id=\"3__913__91\"></a>{#3__91}3. 登录与权限激活</h4>\n<h5><a id=\"31__9331__93\"></a>{#31__93}3.1 账户激活</h5>\n<p>收到内测资格确认邮件后，点击邮件中的激活链接设置密码，完成账户注册。</p>\n<h5><a id=\"32__9732__97\"></a>{#32__97}3.2 权限分级说明</h5>\n<ul>\n<li><strong>基础权限</strong>：支持执行简单任务（如数据分析、文件整理），每日限 3 次任务提交。</li>\n<li><strong>高级权限</strong>：需提交企业认证或开发者资质，可解锁 API 接入、批量任务处理等功能。</li>\n</ul>\n<h4><a id=\"4__1024__102\"></a>{#4__102}4. 常见问题与优化建议</h4>\n<h5><a id=\"41__10441__104\"></a>{#41__104}4.1 加速审核的技巧</h5>\n<ul>\n<li><strong>完善申请信息</strong>：详细描述需求场景（如&quot;需分析 100 份简历并生成排名报告&quot;），关联职业背景提升优先级。</li>\n<li><strong>多平台申请</strong>：同时通过官网和 Discord 提交申请，增加获取概率。</li>\n</ul>\n<h5><a id=\"42__10942__109\"></a>{#42__109}4.2 登录异常处理</h5>\n<ul>\n<li><strong>网络问题</strong>：若页面加载缓慢，可切换浏览器（推荐 Chrome 或 Edge）或使用网络加速工具。</li>\n<li><strong>账户锁定</strong>：连续输错密码需通过邮件重置，或联系客服邮箱 contact@manus.im 解锁。</li>\n</ul>\n<h4><a id=\"5__1145__114\"></a>{#5__114}5. 后续权限升级</h4>\n<h5><a id=\"51__11651__116\"></a>{#51__116}5.1 开发者计划</h5>\n<p>2025 年下半年将开放模型开源组件，开发者可申请技术文档与 API 权限，定制私有化 Agent。</p>\n<h5><a id=\"52__12052__120\"></a>{#52__120}5.2 企业级服务</h5>\n<p>企业用户可通过官网提交合作需求，获取定制化解决方案（如多账户管理、私有数据训练支持）。</p>\n<h3><a id=\"_124_124\"></a>{#_124}三、核心功能与场景</h3>\n<h4><a id=\"1__1261__126\"></a>{#1__126}1. 任务自动化执行</h4>\n<h5><a id=\"11__12811__128\"></a>{#11__128}1.1 功能实现原理</h5>\n<p>Manus 的核心能力在于将复杂任务拆解为可执行的子步骤，并自主调用工具完成全流程。其工作流程分为三个阶段：</p>\n<h6><a id=\"111__132111__132\"></a>{#111__132}1.1.1 任务分解</h6>\n<p>当用户下达指令后，Manus 会像人类专家一样分析需求，自动划分任务步骤。例如，在&quot;筛选简历&quot;任务中，它会将流程分解为&quot;解压文件→提取关键信息→生成候选人排名表→导出 Excel&quot;等环节。</p>\n<h6><a id=\"112__136112__136\"></a>{#112__136}1.1.2 工具调用</h6>\n<p>Manus 内置浏览器、代码编辑器等虚拟工具，可执行网页搜索、API 调用、数据分析等操作。例如分析股票时，它能自动连接雅虎金融 API 抓取实时数据，并调用 Python 脚本生成可视化图表。</p>\n<h6><a id=\"113__140113__140\"></a>{#113__140}1.1.3 成果交付</h6>\n<p>区别于传统 AI 仅提供建议，Manus 直接输出完整成果。例如用户上传合同文件后，它会生成包含风险条款标注、法律依据说明的审查报告，支持 Word/PDF 格式导出。</p>\n<h5><a id=\"12__14412__144\"></a>{#12__144}1.2 典型应用场景</h5>\n<h6><a id=\"121__146121__146\"></a>{#121__146}1.2.1 简历筛选</h6>\n<p>用户上传压缩包后，Manus 自动静压文件，识别简历中的工作经验、技能匹配度等关键信息，生成带候选人排名的 Excel 表格，准确率达 92%。</p>\n<h6><a id=\"122__150122__150\"></a>{#122__150}1.2.2 合同审查</h6>\n<p>可分析数十页合同文本，提取关键条款（如违约责任、付款周期），并对比法律数据库中的合规要求，标注潜在风险点。</p>\n<h6><a id=\"123__154123__154\"></a>{#123__154}1.2.3 数据分析</h6>\n<p>处理复杂数据时，Manus 能清洗原始数据、运行统计模型（如回归分析），最终生成包含趋势图、相关性矩阵的交互式仪表盘。</p>\n<h4><a id=\"2__1582__158\"></a>{#2__158}2. 多模态处理能力</h4>\n<h5><a id=\"21__16021__160\"></a>{#21__160}2.1 技术特性</h5>\n<h6><a id=\"211__162211__162\"></a>{#211__162}2.1.1 多格式解析</h6>\n<p>支持文本、音频、图像等混合输入。例如用户上传课堂录音和 PPT 截图，Manus 可自动转写为文字笔记，并提取图片中的公式生成图文版讲义。</p>\n<h6><a id=\"212__166212__166\"></a>{#212__166}2.1.2 跨模态生成</h6>\n<p>能将数据转换为多种形式输出。例如输入 Excel 销售数据，可生成带动态图表的 PPT，或创建交互式网页看板。</p>\n<h5><a id=\"22__17022__170\"></a>{#22__170}2.2 实践案例</h5>\n<h6><a id=\"221__172221__172\"></a>{#221__172}2.2.1 设计辅助</h6>\n<p>设计师输入&quot;为咖啡品牌设计极简风格名片&quot;，Manus 会搜索行业案例、调用 Canva 模板库生成设计方案，并提供 CMYK 色彩规范说明。</p>\n<h6><a id=\"222__176222__176\"></a>{#222__176}2.2.2 教育材料制作</h6>\n<p>教师上传课堂录音后，Manus 自动识别知识点片段，将其转换为带动画演示的 HTML 课件（如动量定理的受力分析动画）。</p>\n<h4><a id=\"3__1803__180\"></a>{#3__180}3. 个性化服务</h4>\n<h5><a id=\"31__18231__182\"></a>{#31__182}3.1 自适应学习机制</h5>\n<h6><a id=\"311__184311__184\"></a>{#311__184}3.1.1 偏好记忆</h6>\n<p>Manus 会记录用户的使用习惯。例如若用户常要求将报告保存为 PDF，后续任务会自动采用该格式；若偏好图表配色方案，输出时会同步调整。</p>\n<h6><a id=\"312__188312__188\"></a>{#312__188}3.1.2 动态路径优化</h6>\n<p>当任务中途收到新指令（如旅行规划中增加预算），Manus 能即时调整方案。例如原计划的经济型酒店会自动替换为高端选项，并重新计算交通成本。</p>\n<h5><a id=\"32__19232__192\"></a>{#32__192}3.2 场景化服务</h5>\n<h6><a id=\"321__194321__194\"></a>{#321__194}3.2.1 旅行规划</h6>\n<p>输入&quot;规划日本 7 日游，包含历史景点和求婚地点&quot;，Manus 会搜索樱花花期、神社开放时间，推荐适合求婚的温泉旅馆，并生成带地图导航的 HTML 手册。</p>\n<h6><a id=\"322__198322__198\"></a>{#322__198}3.2.2 房产投资</h6>\n<p>根据预算和需求（如&quot;学区房+低犯罪率&quot;），Manus 爬取房产平台数据，调用 Python 计算性价比，最终生成包含房源对比、贷款方案建议的 30 页报告。</p>\n<h4><a id=\"4__2024__202\"></a>{#4__202}4. 教育与创意支持</h4>\n<h5><a id=\"41__20441__204\"></a>{#41__204}4.1 教育赋能</h5>\n<h6><a id=\"411__206411__206\"></a>{#411__206}4.1.1 课件开发</h6>\n<p>教师输入&quot;制作牛顿定律互动课件&quot;，Manus 会编写 HTML5 动画代码，插入可拖拽的受力分析模块，并生成配套的教师指导手册。</p>\n<h6><a id=\"412__210412__210\"></a>{#412__210}4.1.2 学习助手</h6>\n<p>学生上传课程大纲后，Manus 自动整理强化学习领域的经典论文、开源代码库，并按难度分级生成学习路径图。</p>\n<h5><a id=\"42__21442__214\"></a>{#42__214}4.2 创意生产</h5>\n<h6><a id=\"421__216421__216\"></a>{#421__216}4.2.1 游戏开发</h6>\n<p>输入&quot;创建网页版《Doom》射击游戏&quot;，Manus 会编写 JavaScript 代码实现 3D 渲染、碰撞检测功能，并部署到可在线试玩的网页。</p>\n<h6><a id=\"422__220422__220\"></a>{#422__220}4.2.2 音效设计</h6>\n<p>视频创作者输入&quot;科幻飞船降落音效&quot;，Manus 会分析影视作品中的类似场景，混合合成引擎轰鸣、金属摩擦声，输出 WAV/MP3 格式文件。</p>\n<h3><a id=\"AI__224AI__224\"></a>{#AI__224}四、AI 提示词指南</h3>\n<h4><a id=\"1__Manus__2261__Manus__226\"></a>{#1__Manus__226}1. 基本原则：让 Manus 听懂你的需求</h4>\n<h5><a id=\"11__22811__228\"></a>{#11__228}1.1 明确需求：说清目标与交付形式</h5>\n<p>Manus 作为通用型 AI 智能体，核心是理解需求→拆解任务→执行交付。要让 AI 准确响应，需在提示词中明确以下要素：</p>\n<ul>\n<li><strong>目标</strong>：用一句话概括核心诉求（如&quot;分析特斯拉股票&quot;“制作物理课件”）</li>\n<li><strong>交付形式</strong>：指定输出格式（HTML、PDF、Excel 等）及内容结构（图表类型、章节划分）</li>\n<li><strong>约束条件</strong>：预算、时间、数据源等限制（示例：“预算 5000 美元”“使用 2024 年 Q1 财报数据”）</li>\n</ul>\n<p><strong>正确示例</strong>：</p>\n<p>“我需要一个 4 月 15-23 日从西雅图出发的 7 天日本行程，预算为两人 2500-5000 美元。要求包含历史遗迹、剑道体验、求婚地点建议，并生成带地图的 HTML 手册。”</p>\n<h5><a id=\"12__24012__240\"></a>{#12__240}1.2 动态调整：任务中的灵活修正</h5>\n<p>Manus 支持在任务执行过程中修改需求。例如：</p>\n<ul>\n<li>增减预算或时间范围</li>\n<li>调整输出格式（如从 PPT 改为 Markdown）</li>\n<li>补充数据源或约束条件</li>\n</ul>\n<p><strong>操作步骤</strong>：</p>\n<ol>\n<li>在 Manus 任务面板点击&quot;修改参数&quot;</li>\n<li>输入新指令（如&quot;将柱状图改为折线图&quot;）</li>\n<li>系统自动回溯相关步骤并重新执行</li>\n</ol>\n<h5><a id=\"13__25413__254\"></a>{#13__254}1.3 结果导向：以终为始设计提示词</h5>\n<p>从最终成果倒推提示词结构：</p>\n<ol>\n<li>定义输出格式：HTML/PDF/代码文件？是否需要交互功能？</li>\n<li>拆解内容模块：如股票分析需包含财务数据、技术指标、SWOT 分析</li>\n<li>预设验证标准：例如&quot;图表需标注数据来源&quot;“代码需通过 PEP8 检查”</li>\n</ol>\n<h4><a id=\"2__2622__262\"></a>{#2__262}2. 经典模板：覆盖高频场景的提示词公式</h4>\n<h5><a id=\"21__26421__264\"></a>{#21__264}2.1 数据分析类模板</h5>\n<p><strong>适用场景</strong>：股票分析、市场调研、财报解读</p>\n<p><strong>结构公式</strong>：</p>\n<blockquote>\n<p>“分析[对象]，要求包含：[模块 1]、[模块 2]、[模块 3]，数据源为[来源]，生成[格式]报告，重点展示[关键指标]。”</p>\n</blockquote>\n<p><strong>示例</strong>：</p>\n<p>“深度分析英伟达股票，包含：市场情绪、技术指标、竞品对比，调用雅虎金融 API 生成交互式网页报告，用热力图展示股价相关性。”</p>\n<h5><a id=\"22__27622__275\"></a>{#22__276}2.2 内容生成类模板</h5>\n<p><strong>适用场景</strong>：课件制作、旅行规划、营销文案</p>\n<p><strong>结构公式</strong>：</p>\n<blockquote>\n<p>“创建[主题]的[格式]内容，需包含：[要素 1]、[要素 2]、[要素 3]，风格参考[范例]，部署到[平台]。”</p>\n</blockquote>\n<p><strong>示例</strong>：</p>\n<p>“制作动量守恒定律的 HTML 演示文稿，包含弹性碰撞、非弹性碰撞、爆炸案例的交互动画，按中学教学大纲分章节，部署到公开可访问的 URL。”</p>\n<h5><a id=\"23__28823__286\"></a>{#23__288}2.3 代码开发类模板</h5>\n<p><strong>适用场景</strong>：脚本编写、网页开发、自动化工具</p>\n<p><strong>结构公式</strong>：</p>\n<blockquote>\n<p>“编写[语言]脚本实现[功能]，要求：[技术规范]，测试通过后交付[格式]，附[文档类型]说明。”</p>\n</blockquote>\n<p><strong>示例</strong>：</p>\n<p>“开发 Python 自动化脚本，每日 8 点抓取微博热搜榜存入 Google Sheets，代码需符合 PEP8 规范，交付可执行文件及 API 调用文档。”</p>\n<h4><a id=\"3__3003__297\"></a>{#3__300}3. 分步教学：从零开始构建提示词</h4>\n<h5><a id=\"31__30231__299\"></a>{#31__302}3.1 第一步：需求拆解</h5>\n<p>将复杂任务分解为 Manus 可执行的子任务：</p>\n<ol>\n<li>信息收集：指定数据来源（如&quot;爬取小红书露营装备帖子&quot;）</li>\n<li>数据处理：定义清洗规则（如&quot;剔除点赞量低于 100 的帖子&quot;）</li>\n<li>分析建模：选择算法工具（如&quot;用 PySpark 计算品牌提及率&quot;）</li>\n<li>成果交付：确定输出形式（如&quot;生成词云图+Excel 明细表&quot;）</li>\n</ol>\n<p><strong>案例</strong>：</p>\n<p>&quot;监控竞品新品动态&quot;可拆解为：</p>\n<ul>\n<li>爬取电商平台商品页</li>\n<li>提取价格/功能参数</li>\n<li>对比历史数据生成波动图表</li>\n</ul>\n<h5><a id=\"32__31932__316\"></a>{#32__319}3.2 第二步：格式规范</h5>\n<p>通过结构化描述降低歧义：</p>\n<ol>\n<li>章节划分：用数字序号或分级标题（如&quot;1.概述 2.财务分析&quot;）</li>\n<li>图表规范：指定类型/尺寸/配色（如&quot;用 2A5CAA 色系绘制面积图&quot;）</li>\n<li>交互需求：定义操作功能（如&quot;支持点击章节跳转&quot;“鼠标悬停显示数据”）</li>\n</ol>\n<p><strong>错误修正对比</strong>：</p>\n<ul>\n<li>模糊指令：&quot;做个财报分析&quot;→ 失败率高</li>\n<li>明确指令：&quot;分析特斯拉 2024 年 Q4 财报，对比小鹏/理想的毛利率趋势，生成带注释的 PDF 报告&quot;→ 成功率高</li>\n</ul>\n<h5><a id=\"33__33233__329\"></a>{#33__332}3.3 第三步：参数设置</h5>\n<p>通过预设条件控制任务走向：</p>\n<ol>\n<li>质量参数：分辨率（如&quot;图表导出为 300dpi PNG&quot;）</li>\n<li>效率参数：超时限制（如&quot;若单步骤超 30 分钟则跳过&quot;）</li>\n<li>安全参数：数据权限（如&quot;仅使用公开数据&quot;“不访问本地文件夹”）</li>\n</ol>\n<p><strong>操作界面</strong>：</p>\n<p>在 Manus 任务面板的&quot;高级设置&quot;中，可勾选：</p>\n<ul>\n<li>是否保留中间文件</li>\n<li>错误处理策略（终止/跳过/重试）</li>\n<li>资源分配优先级</li>\n</ul>\n<h4><a id=\"4__3484__345\"></a>{#4__348}4. 常见错误与修正方案</h4>\n<h5><a id=\"41__1_35041__1_347\"></a>{#41__1_350}4.1 错误类型 1：指令模糊</h5>\n<p><strong>表现</strong>：Manus 反复请求确认细节</p>\n<p><strong>修正方案</strong>：</p>\n<ul>\n<li>补充场景信息（如&quot;中学物理教学&quot;而非&quot;教学&quot;）</li>\n<li>添加参照物（如&quot;按小米发布会风格设计 PPT&quot;）</li>\n</ul>\n<h5><a id=\"42__2_35942__2_356\"></a>{#42__2_359}4.2 错误类型 2：忽略格式规范</h5>\n<p><strong>表现</strong>：输出文件排版混乱</p>\n<p><strong>修正方案</strong>：</p>\n<ul>\n<li>提前定义模板（上传参考文件或指定官方模板库编号）</li>\n<li>要求分步确认（如&quot;先提交大纲审核再生成内容&quot;）</li>\n</ul>\n<h5><a id=\"43__3_36843__3_365\"></a>{#43__3_368}4.3 错误类型 3：缺乏反馈机制</h5>\n<p><strong>表现</strong>：多次生成仍不符合预期</p>\n<p><strong>修正方案</strong>：</p>\n<ul>\n<li>使用迭代指令（如&quot;基于 v1.0 报告，将第三章改为雷达图&quot;）</li>\n<li>启用人工干预模式（手动修改中间文件后继续任务）</li>\n</ul>\n<h4><a id=\"5__Manus__3775__Manus__374\"></a>{#5__Manus__377}5. 进阶技巧：释放 Manus 全部潜力</h4>\n<h5><a id=\"51__37951__376\"></a>{#51__379}5.1 创建可复用的工作流模板</h5>\n<p>将常用任务保存为模板：</p>\n<ol>\n<li>在历史任务列表右键选择&quot;保存为模板&quot;</li>\n<li>定义变量占位符（如{{公司名称}}、{{时间范围}}）</li>\n<li>下次使用时直接替换变量一键执行</li>\n</ol>\n<h5><a id=\"52__38752__384\"></a>{#52__387}5.2 多任务协同作战</h5>\n<p>在&quot;任务看板&quot;中并行处理：</p>\n<ul>\n<li>数据依赖型任务：A 任务输出作为 B 任务输入（如爬虫→分析）</li>\n<li>资源隔离型任务：敏感数据在本地沙盒运行，公开数据调用云端算力</li>\n</ul>\n<h5><a id=\"53__39453__391\"></a>{#53__394}5.3 通过反馈训练专属助手</h5>\n<p>在用户偏好设置中：</p>\n<ol>\n<li>定义术语库（如公司内部缩写对照表）</li>\n<li>设置默认工具链（数据分析用 PySpark 而非 Pandas）</li>\n<li>保存格式偏好（PPT 字体、图表配色方案）</li>\n</ol>\n<h5><a id=\"54__40254__399\"></a>{#54__402}5.4 混合执行策略</h5>\n<p>根据任务特性选择执行方式：</p>\n<ul>\n<li>本地执行：处理敏感数据（如合同扫描）</li>\n<li>云端执行：需要 GPU 加速的任务（如 3D 渲染）</li>\n<li>混合执行：先本地清洗数据，再云端建模分析</li>\n</ul>\n<h3><a id=\"_410_407\"></a>{#_410}五、实操案例解析</h3>\n<h4><a id=\"_412_409\"></a>{#_412}案例一：简历筛选</h4>\n<h5><a id=\"11__41411__411\"></a>{#11__414}1.1 任务输入与目标</h5>\n<p>用户需要为&quot;强化学习算法工程师&quot;岗位筛选 15 份简历，并按候选人的专业知识水平进行排序。具体要求包括：</p>\n<ul>\n<li>上传包含 10 份简历的 ZIP 压缩包，随后补充上传 5 份简历</li>\n<li>提取候选人项目经验、技能匹配度等关键信息</li>\n<li>输出 Excel 格式的候选人排名表</li>\n</ul>\n<h5><a id=\"12_Manus__42212_Manus__419\"></a>{#12_Manus__422}1.2 Manus 处理过程</h5>\n<h6><a id=\"121__424121__421\"></a>{#121__424}1.2.1 文件自动化处理</h6>\n<p>Manus 首先自动解压 ZIP 文件，逐份浏览 PDF 或 Word 格式的简历。对于用户后续补充上传的 5 份简历，系统异步接收并整合至任务队列，无需用户重复操作。</p>\n<h6><a id=\"122__428122__425\"></a>{#122__428}1.2.2 智能分析与评估</h6>\n<p>系统采用以下评估维度：</p>\n<ol>\n<li>专业匹配度：识别简历中与强化学习相关的关键词（如 Q-learning、PPO 算法）</li>\n<li>项目经验权重：根据项目复杂度、成果量化指标（如算法准确率提升百分比）打分</li>\n<li>技能完整性：检测是否具备关联技术栈（Python、PyTorch、ROS 机器人平台）</li>\n</ol>\n<h6><a id=\"123__436123__433\"></a>{#123__436}1.2.3 动态调整输出格式</h6>\n<p>当用户临时要求将结果转为 Excel 表格时，Manus 自动执行以下操作：</p>\n<ol>\n<li>调用 Python 的 pandas 库创建数据框架</li>\n<li>按&quot;高级候选人&quot;“基础经验者”&quot;不匹配&quot;三级分类生成工作表</li>\n<li>添加超链接直达候选人联系方式与作品集</li>\n</ol>\n<h5><a id=\"13__44413__441\"></a>{#13__444}1.3 成果交付示例</h5>\n<p>最终生成的 Excel 文件包含：</p>\n<ul>\n<li>主表：按综合评分排序的候选人列表</li>\n<li>附录：各评估维度的权重说明</li>\n<li>可视化图表：候选人技能雷达图（自动嵌入 SVG 格式）</li>\n</ul>\n<h4><a id=\"_452_449\"></a>{#_452}案例二：股票相关性分析</h4>\n<h5><a id=\"21__45421__451\"></a>{#21__454}2.1 任务输入与目标</h5>\n<p>用户要求分析英伟达（NVDA）、迈威尔科技（MRVL）、台积电（TSM）三家公司过去三年的股票价格相关性，并生成交互式可视化报告。具体需求包括：</p>\n<ul>\n<li>获取 2019 年 1 月-2022 年 1 月历史数据</li>\n<li>计算皮尔逊相关系数与滚动相关性</li>\n<li>部署可在线访问的数据仪表盘</li>\n</ul>\n<h5><a id=\"22_Manus__46222_Manus__459\"></a>{#22_Manus__462}2.2 Manus 处理流程</h5>\n<h6><a id=\"221__464221__461\"></a>{#221__464}2.2.1 多源数据获取</h6>\n<p>系统通过以下途径收集数据：</p>\n<ol>\n<li>官方 API 调用：接入 Yahoo Finance 获取日线级收盘价</li>\n<li>数据清洗：自动修复缺失值（如节假日休市数据）</li>\n<li>交叉验证：对比 SEC 公开财报中的流通股数量</li>\n</ol>\n<h6><a id=\"222__472222__469\"></a>{#222__472}2.2.2 统计分析实施</h6>\n<p>Manus 分阶段执行代码：</p>\n<ol>\n<li>基础计算</li>\n</ol>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\n# 计算皮尔逊相关系数\ncorrelation_matrix = df[[<span class=\"hljs-string\">&#x27;NVDA&#x27;</span>,<span class=\"hljs-string\">&#x27;MRVL&#x27;</span>,<span class=\"hljs-string\">&#x27;TSM&#x27;</span>]].<span class=\"hljs-title function_\">corr</span>(method=<span class=\"hljs-string\">&#x27;pearson&#x27;</span>)\n</code></div></pre>\n<ol start=\"2\">\n<li>进阶分析</li>\n</ol>\n<ul>\n<li>生成 30 日滚动相关性曲线</li>\n<li>绘制波动率对比热力图</li>\n</ul>\n<h6><a id=\"223__485223__486\"></a>{#223__485}2.2.3 交互式可视化开发</h6>\n<p>系统使用以下技术栈构建仪表盘：</p>\n<ul>\n<li>前端框架：Vue.js + ECharts 实现动态图表</li>\n<li>后端服务：FastAPI 提供数据接口</li>\n<li>部署方案：自动生成二级域名（如<code>https://stock.manus.space</code>）</li>\n</ul>\n<h5><a id=\"23__49323__494\"></a>{#23__493}2.3 成果展示特点</h5>\n<p>最终报告包含：</p>\n<ul>\n<li>时间序列图：叠加显示三只股票价格走势</li>\n<li>相关性矩阵：点击单元格可查看历史相关性变化动画</li>\n<li>投资建议模块：基于波动率提出对冲策略</li>\n</ul>\n<h4><a id=\"_501_502\"></a>{#_501}案例三：物理教学课件制作</h4>\n<h5><a id=\"31__50331__504\"></a>{#31__503}3.1 任务输入与目标</h5>\n<p>中学物理教师需要制作《动量守恒定律》的交互式教学课件，具体要求：</p>\n<ul>\n<li>包含弹性碰撞、非弹性碰撞等场景的动画演示</li>\n<li>支持课堂实时参数调整（如小球质量、初速度）</li>\n<li>输出 HTML 文件便于投影仪直接播放</li>\n</ul>\n<h5><a id=\"32_Manus__51132_Manus__512\"></a>{#32_Manus__511}3.2 Manus 开发过程</h5>\n<h6><a id=\"321__513321__514\"></a>{#321__513}3.2.1 教学内容规划</h6>\n<p>系统自动生成教学大纲：</p>\n<ol>\n<li>基础概念：动量公式<code>p=mv</code>的矢量特性演示</li>\n<li>实验模拟：\n<ul>\n<li>完全弹性碰撞（能量守恒）</li>\n<li>完全非弹性碰撞（最大动能损失）</li>\n</ul>\n</li>\n<li>现实应用：汽车碰撞测试的动量变化分析</li>\n</ol>\n<h6><a id=\"322__523322__524\"></a>{#322__523}3.2.2 交互动画开发</h6>\n<p>Manus 采用以下技术实现：</p>\n<ul>\n<li>动画引擎：基于 Canvas 的物理引擎模拟碰撞效果</li>\n<li>参数控制面板：</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\n&lt;input type=<span class=\"hljs-string\">&quot;range&quot;</span> id=<span class=\"hljs-string\">&quot;mass1&quot;</span> min=<span class=\"hljs-string\">&quot;1&quot;</span> max=<span class=\"hljs-string\">&quot;10&quot;</span> value=<span class=\"hljs-string\">&quot;4&quot;</span>&gt;\n<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;mass1&quot;</span>&gt;</span>小球质量(kg)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span>\n</code></div></pre>\n<ul>\n<li>即时计算反馈：</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\n<span class=\"hljs-comment\">// 实时显示动量总和</span>\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;momentum&#x27;</span>).<span class=\"hljs-property\">innerHTML</span> = m1v1 + m2v2;\n</code></div></pre>\n<h6><a id=\"323__539323__545\"></a>{#323__539}3.2.3 教学资源整合</h6>\n<p>系统自动补充：</p>\n<ul>\n<li>扩展阅读：链接至维基百科相关词条</li>\n<li>课堂习题：随机生成数值不同的练习题</li>\n<li>教师手册：Markdown 格式的教学建议文档</li>\n</ul>\n<h5><a id=\"33__54733__553\"></a>{#33__547}3.3 教学应用效果</h5>\n<p>最终课件支持：</p>\n<ul>\n<li>动态重置：一键恢复初始参数</li>\n<li>分步演示：分解碰撞过程的帧动画</li>\n<li>数据导出：将模拟结果保存为 CSV 供课后分析</li>\n</ul>\n<h4><a id=\"_555_561\"></a>{#_555}案例共性特征总结</h4>\n<ol>\n<li><strong>端到端自动化</strong>：从原始数据到交付成果全程无需人工干预</li>\n<li><strong>多工具协同</strong>：融合 API 调用、代码编写、可视化开发等能力</li>\n<li><strong>可扩展性</strong>：所有输出文件保留完整源码，支持二次修改</li>\n</ol>\n',' Manus 实操手册  \n--------------------------------------\n\n###  一、Manus 概述\n\n#### {#11__5}1.1 官网入口\n\nManus 的官方网站为 https://manus.im，用户可通过浏览器直接访问。该网站是产品的主要信息发布渠道，提供功能演示、案例库、内测申请入口等核心服务。官网设计简洁，首页展示产品定位、核心功能模块及用户评价，适合零基础用户快速了解产品价值。\n\n#### {#12__9}1.2 产品定位\n\n##### {#121__11}1.2.1 定义与目标\n\nManus 是全球首款通用型 AI 智能体（Agent），由中国 Monica 团队研发。其核心目标是\"将用户的想法转化为具体成果\"，通过自主规划、调用工具和交付完整任务成果，帮助用户高效完成复杂任务。与普通聊天机器人不同，Manus 能够独立执行端到端任务，例如从数据收集、分析到生成可视化报告的全流程操作。\n\n##### {#122__15}1.2.2 核心特点\n\n* **通用性**：支持跨领域任务，涵盖金融分析、旅行规划、教育课件制作等 51 个场景。\n* **自主性**：无需用户分步指导，可自动分解任务、调用工具（如代码编辑器、浏览器）并优化执行路径。\n* **交付能力**：直接生成可视化成果（如 PDF、Excel、网页），而非仅提供文字建议。\n\n##### {#123__21}1.2.3 技术架构\n\nManus 采用多智能体系统（Multiple Agent System）与云端虚拟机技术：\n\n* **规划层**：分析用户需求，拆解任务步骤（如\"分析股票\"拆解为数据抓取、趋势建模、报告生成）。\n* **执行层**：调用虚拟环境中的工具（代码执行、网页浏览、文件处理）。\n* **验证层**：检查结果准确性，动态修正错误。\n\n#### {#13__29}1.3 团队背景\n\n##### {#131_Red_31}1.3.1 创始人：肖弘（Red）\n\n* **履历**：连续创业者，华中科技大学软件工程专业毕业。曾开发微信公众号增强工具\"莺件\"和企业微信应用\"微伴助手\"，获腾讯投资。\n* **理念**：主张\"AI 应成为生产力伙伴\"，推动 Manus 从工具型助手进化为自主代理。\n\n##### {#132_Peak_36}1.3.2 首席科学家：季逸超（Peak）\n\n* **成就**：主导开发中文互联网最大通用知识图谱系统 Magi，曾推出 iOS 浏览器\"猛犸\"并获 MacWorld 特等奖。\n* **技术贡献**：为 Manus 设计基于 LLM 的操作系统架构，实现多模态数据处理与跨平台工具调用。\n\n##### {#133__41}1.3.3 技术团队\n\n* **规模**：Monica 团队成立于 2023 年，现有成员 51-200 人，专注 AI 推理与工程化落地。\n* **里程碑**：2022 年立项 Monica 项目（早于 ChatGPT 发布），2025 年推出 Manus，在 GAIA 基准测试中超越 OpenAI 同类产品。\n\n#### {#14__46}1.4 产品发展历程\n\n##### {#141__48}1.4.1 早期探索\n\n* **2022 年**：Monica 项目立项，以浏览器插件形式提供 AI 助手服务，集成多模型 API 并主打海外市场。\n* **2024 年**：用户突破百万，成为海外 AI 插件领域头部产品，验证工具调用与任务自动化能力。\n\n##### {#142__53}1.4.2 技术突破\n\n* **2025 年**：发布 Manus，整合动态任务调度引擎、神经记忆网络等创新技术，实现从\"辅助工具\"到\"自主代理\"的跨越。\n\n##### {#143__57}1.4.3 市场反响\n\n* **内测阶段**：吸引超 1000 万用户申请，社交媒体讨论量单日破 10 万条，被评价为\"Agent 爆发元年的标志性产品\"。\n\n### {#_61}二、获取方式\n\n#### {#1__63}1. 内测资格申请流程\n\n##### {#11__65}1.1 官网申请入口\n\n访问 Manus 官方网站（https://manus.im），点击首页的 \"Get Early Access\"（获取早期访问权限）按钮进入申请页面。\n\n##### {#12__69}1.2 填写基础信息\n\n注册账户时需使用常用邮箱（支持谷歌、GitHub 等第三方账号快捷登录）。在申请表单中填写以下内容：\n\n* **职业背景**：如学生、开发者、企业职员等（影响内测权限分配）。\n* **使用场景**：描述计划使用 Manus 的具体任务类型（例如\"股票分析\"\"旅行规划\"），需尽量具体以提高审核通过率。\n\n##### {#13__76}1.3 等待审核与通知\n\n提交申请后，系统将通过邮件告知审核结果，通常等待时间为数小时至一周。若未收到通知，可检查垃圾邮件箱或重新提交申请。\n\n#### {#2__80}2. 邀请码获取渠道\n\n##### {#21__82}2.1 官方社群与活动\n\n* **Discord 群组**：加入 Manus 官方 Discord 频道（链接见官网），定期参与互动可获取随机发放的邀请码。\n* **推特活动**：关注官方推特账号（@manusai_hq），参与转发抽奖、案例分享等活动赢取邀请码。\n\n##### {#22__87}2.2 二手平台风险提示\n\n部分用户通过二手平台（如闲鱼）转卖邀请码，但需警惕高价欺诈（价格高达数万元）或无效码风险。建议优先通过官方渠道申请。\n\n#### {#3__91}3. 登录与权限激活\n\n##### {#31__93}3.1 账户激活\n\n收到内测资格确认邮件后，点击邮件中的激活链接设置密码，完成账户注册。\n\n##### {#32__97}3.2 权限分级说明\n\n* **基础权限**：支持执行简单任务（如数据分析、文件整理），每日限 3 次任务提交。\n* **高级权限**：需提交企业认证或开发者资质，可解锁 API 接入、批量任务处理等功能。\n\n#### {#4__102}4. 常见问题与优化建议\n\n##### {#41__104}4.1 加速审核的技巧\n\n* **完善申请信息**：详细描述需求场景（如\"需分析 100 份简历并生成排名报告\"），关联职业背景提升优先级。\n* **多平台申请**：同时通过官网和 Discord 提交申请，增加获取概率。\n\n##### {#42__109}4.2 登录异常处理\n\n* **网络问题**：若页面加载缓慢，可切换浏览器（推荐 Chrome 或 Edge）或使用网络加速工具。\n* **账户锁定**：连续输错密码需通过邮件重置，或联系客服邮箱 contact@manus.im 解锁。\n\n#### {#5__114}5. 后续权限升级\n\n##### {#51__116}5.1 开发者计划\n\n2025 年下半年将开放模型开源组件，开发者可申请技术文档与 API 权限，定制私有化 Agent。\n\n##### {#52__120}5.2 企业级服务\n\n企业用户可通过官网提交合作需求，获取定制化解决方案（如多账户管理、私有数据训练支持）。\n\n### {#_124}三、核心功能与场景\n\n#### {#1__126}1. 任务自动化执行\n\n##### {#11__128}1.1 功能实现原理\n\nManus 的核心能力在于将复杂任务拆解为可执行的子步骤，并自主调用工具完成全流程。其工作流程分为三个阶段：\n\n###### {#111__132}1.1.1 任务分解\n\n当用户下达指令后，Manus 会像人类专家一样分析需求，自动划分任务步骤。例如，在\"筛选简历\"任务中，它会将流程分解为\"解压文件→提取关键信息→生成候选人排名表→导出 Excel\"等环节。\n\n###### {#112__136}1.1.2 工具调用\n\nManus 内置浏览器、代码编辑器等虚拟工具，可执行网页搜索、API 调用、数据分析等操作。例如分析股票时，它能自动连接雅虎金融 API 抓取实时数据，并调用 Python 脚本生成可视化图表。\n\n###### {#113__140}1.1.3 成果交付\n\n区别于传统 AI 仅提供建议，Manus 直接输出完整成果。例如用户上传合同文件后，它会生成包含风险条款标注、法律依据说明的审查报告，支持 Word/PDF 格式导出。\n\n##### {#12__144}1.2 典型应用场景\n\n###### {#121__146}1.2.1 简历筛选\n\n用户上传压缩包后，Manus 自动静压文件，识别简历中的工作经验、技能匹配度等关键信息，生成带候选人排名的 Excel 表格，准确率达 92%。\n\n###### {#122__150}1.2.2 合同审查\n\n可分析数十页合同文本，提取关键条款（如违约责任、付款周期），并对比法律数据库中的合规要求，标注潜在风险点。\n\n###### {#123__154}1.2.3 数据分析\n\n处理复杂数据时，Manus 能清洗原始数据、运行统计模型（如回归分析），最终生成包含趋势图、相关性矩阵的交互式仪表盘。\n\n#### {#2__158}2. 多模态处理能力\n\n##### {#21__160}2.1 技术特性\n\n###### {#211__162}2.1.1 多格式解析\n\n支持文本、音频、图像等混合输入。例如用户上传课堂录音和 PPT 截图，Manus 可自动转写为文字笔记，并提取图片中的公式生成图文版讲义。\n\n###### {#212__166}2.1.2 跨模态生成\n\n能将数据转换为多种形式输出。例如输入 Excel 销售数据，可生成带动态图表的 PPT，或创建交互式网页看板。\n\n##### {#22__170}2.2 实践案例\n\n###### {#221__172}2.2.1 设计辅助\n\n设计师输入\"为咖啡品牌设计极简风格名片\"，Manus 会搜索行业案例、调用 Canva 模板库生成设计方案，并提供 CMYK 色彩规范说明。\n\n###### {#222__176}2.2.2 教育材料制作\n\n教师上传课堂录音后，Manus 自动识别知识点片段，将其转换为带动画演示的 HTML 课件（如动量定理的受力分析动画）。\n\n#### {#3__180}3. 个性化服务\n\n##### {#31__182}3.1 自适应学习机制\n\n###### {#311__184}3.1.1 偏好记忆\n\nManus 会记录用户的使用习惯。例如若用户常要求将报告保存为 PDF，后续任务会自动采用该格式；若偏好图表配色方案，输出时会同步调整。\n\n###### {#312__188}3.1.2 动态路径优化\n\n当任务中途收到新指令（如旅行规划中增加预算），Manus 能即时调整方案。例如原计划的经济型酒店会自动替换为高端选项，并重新计算交通成本。\n\n##### {#32__192}3.2 场景化服务\n\n###### {#321__194}3.2.1 旅行规划\n\n输入\"规划日本 7 日游，包含历史景点和求婚地点\"，Manus 会搜索樱花花期、神社开放时间，推荐适合求婚的温泉旅馆，并生成带地图导航的 HTML 手册。\n\n###### {#322__198}3.2.2 房产投资\n\n根据预算和需求（如\"学区房+低犯罪率\"），Manus 爬取房产平台数据，调用 Python 计算性价比，最终生成包含房源对比、贷款方案建议的 30 页报告。\n\n#### {#4__202}4. 教育与创意支持\n\n##### {#41__204}4.1 教育赋能\n\n###### {#411__206}4.1.1 课件开发\n\n教师输入\"制作牛顿定律互动课件\"，Manus 会编写 HTML5 动画代码，插入可拖拽的受力分析模块，并生成配套的教师指导手册。\n\n###### {#412__210}4.1.2 学习助手\n\n学生上传课程大纲后，Manus 自动整理强化学习领域的经典论文、开源代码库，并按难度分级生成学习路径图。\n\n##### {#42__214}4.2 创意生产\n\n###### {#421__216}4.2.1 游戏开发\n\n输入\"创建网页版《Doom》射击游戏\"，Manus 会编写 JavaScript 代码实现 3D 渲染、碰撞检测功能，并部署到可在线试玩的网页。\n\n###### {#422__220}4.2.2 音效设计\n\n视频创作者输入\"科幻飞船降落音效\"，Manus 会分析影视作品中的类似场景，混合合成引擎轰鸣、金属摩擦声，输出 WAV/MP3 格式文件。\n\n### {#AI__224}四、AI 提示词指南\n\n#### {#1__Manus__226}1. 基本原则：让 Manus 听懂你的需求\n\n##### {#11__228}1.1 明确需求：说清目标与交付形式\n\nManus 作为通用型 AI 智能体，核心是理解需求→拆解任务→执行交付。要让 AI 准确响应，需在提示词中明确以下要素：\n\n* **目标**：用一句话概括核心诉求（如\"分析特斯拉股票\"\"制作物理课件\"）\n* **交付形式**：指定输出格式（HTML、PDF、Excel 等）及内容结构（图表类型、章节划分）\n* **约束条件**：预算、时间、数据源等限制（示例：\"预算 5000 美元\"\"使用 2024 年 Q1 财报数据\"）\n\n**正确示例**：\n\n\"我需要一个 4 月 15-23 日从西雅图出发的 7 天日本行程，预算为两人 2500-5000 美元。要求包含历史遗迹、剑道体验、求婚地点建议，并生成带地图的 HTML 手册。\"\n\n##### {#12__240}1.2 动态调整：任务中的灵活修正\n\nManus 支持在任务执行过程中修改需求。例如：\n\n* 增减预算或时间范围\n* 调整输出格式（如从 PPT 改为 Markdown）\n* 补充数据源或约束条件\n\n**操作步骤**：\n\n1. 在 Manus 任务面板点击\"修改参数\"\n2. 输入新指令（如\"将柱状图改为折线图\"）\n3. 系统自动回溯相关步骤并重新执行\n\n##### {#13__254}1.3 结果导向：以终为始设计提示词\n\n从最终成果倒推提示词结构：\n\n1. 定义输出格式：HTML/PDF/代码文件？是否需要交互功能？\n2. 拆解内容模块：如股票分析需包含财务数据、技术指标、SWOT 分析\n3. 预设验证标准：例如\"图表需标注数据来源\"\"代码需通过 PEP8 检查\"\n\n#### {#2__262}2. 经典模板：覆盖高频场景的提示词公式\n\n##### {#21__264}2.1 数据分析类模板\n\n**适用场景**：股票分析、市场调研、财报解读\n\n**结构公式**：\n> \"分析\\[对象\\]，要求包含：\\[模块 1\\]、\\[模块 2\\]、\\[模块 3\\]，数据源为\\[来源\\]，生成\\[格式\\]报告，重点展示\\[关键指标\\]。\"\n\n**示例**：\n\n\"深度分析英伟达股票，包含：市场情绪、技术指标、竞品对比，调用雅虎金融 API 生成交互式网页报告，用热力图展示股价相关性。\"\n\n##### {#22__276}2.2 内容生成类模板\n\n**适用场景**：课件制作、旅行规划、营销文案\n\n**结构公式**：\n> \"创建\\[主题\\]的\\[格式\\]内容，需包含：\\[要素 1\\]、\\[要素 2\\]、\\[要素 3\\]，风格参考\\[范例\\]，部署到\\[平台\\]。\"\n\n**示例**：\n\n\"制作动量守恒定律的 HTML 演示文稿，包含弹性碰撞、非弹性碰撞、爆炸案例的交互动画，按中学教学大纲分章节，部署到公开可访问的 URL。\"\n\n##### {#23__288}2.3 代码开发类模板\n\n**适用场景**：脚本编写、网页开发、自动化工具\n\n**结构公式**：\n> \"编写\\[语言\\]脚本实现\\[功能\\]，要求：\\[技术规范\\]，测试通过后交付\\[格式\\]，附\\[文档类型\\]说明。\"\n\n**示例**：\n\n\"开发 Python 自动化脚本，每日 8 点抓取微博热搜榜存入 Google Sheets，代码需符合 PEP8 规范，交付可执行文件及 API 调用文档。\"\n\n#### {#3__300}3. 分步教学：从零开始构建提示词\n\n##### {#31__302}3.1 第一步：需求拆解\n\n将复杂任务分解为 Manus 可执行的子任务：\n\n1. 信息收集：指定数据来源（如\"爬取小红书露营装备帖子\"）\n2. 数据处理：定义清洗规则（如\"剔除点赞量低于 100 的帖子\"）\n3. 分析建模：选择算法工具（如\"用 PySpark 计算品牌提及率\"）\n4. 成果交付：确定输出形式（如\"生成词云图+Excel 明细表\"）\n\n**案例**：\n\n\"监控竞品新品动态\"可拆解为：\n\n* 爬取电商平台商品页\n* 提取价格/功能参数\n* 对比历史数据生成波动图表\n\n##### {#32__319}3.2 第二步：格式规范\n\n通过结构化描述降低歧义：\n\n1. 章节划分：用数字序号或分级标题（如\"1.概述 2.财务分析\"）\n2. 图表规范：指定类型/尺寸/配色（如\"用 2A5CAA 色系绘制面积图\"）\n3. 交互需求：定义操作功能（如\"支持点击章节跳转\"\"鼠标悬停显示数据\"）\n\n**错误修正对比**：\n\n* 模糊指令：\"做个财报分析\"→ 失败率高\n* 明确指令：\"分析特斯拉 2024 年 Q4 财报，对比小鹏/理想的毛利率趋势，生成带注释的 PDF 报告\"→ 成功率高\n\n##### {#33__332}3.3 第三步：参数设置\n\n通过预设条件控制任务走向：\n\n1. 质量参数：分辨率（如\"图表导出为 300dpi PNG\"）\n2. 效率参数：超时限制（如\"若单步骤超 30 分钟则跳过\"）\n3. 安全参数：数据权限（如\"仅使用公开数据\"\"不访问本地文件夹\"）\n\n**操作界面**：\n\n在 Manus 任务面板的\"高级设置\"中，可勾选：\n\n* 是否保留中间文件\n* 错误处理策略（终止/跳过/重试）\n* 资源分配优先级\n\n#### {#4__348}4. 常见错误与修正方案\n\n##### {#41__1_350}4.1 错误类型 1：指令模糊\n\n**表现**：Manus 反复请求确认细节\n\n**修正方案**：\n\n* 补充场景信息（如\"中学物理教学\"而非\"教学\"）\n* 添加参照物（如\"按小米发布会风格设计 PPT\"）\n\n##### {#42__2_359}4.2 错误类型 2：忽略格式规范\n\n**表现**：输出文件排版混乱\n\n**修正方案**：\n\n* 提前定义模板（上传参考文件或指定官方模板库编号）\n* 要求分步确认（如\"先提交大纲审核再生成内容\"）\n\n##### {#43__3_368}4.3 错误类型 3：缺乏反馈机制\n\n**表现**：多次生成仍不符合预期\n\n**修正方案**：\n\n* 使用迭代指令（如\"基于 v1.0 报告，将第三章改为雷达图\"）\n* 启用人工干预模式（手动修改中间文件后继续任务）\n\n#### {#5__Manus__377}5. 进阶技巧：释放 Manus 全部潜力\n\n##### {#51__379}5.1 创建可复用的工作流模板\n\n将常用任务保存为模板：\n\n1. 在历史任务列表右键选择\"保存为模板\"\n2. 定义变量占位符（如{{公司名称}}、{{时间范围}}）\n3. 下次使用时直接替换变量一键执行\n\n##### {#52__387}5.2 多任务协同作战\n\n在\"任务看板\"中并行处理：\n\n* 数据依赖型任务：A 任务输出作为 B 任务输入（如爬虫→分析）\n* 资源隔离型任务：敏感数据在本地沙盒运行，公开数据调用云端算力\n\n##### {#53__394}5.3 通过反馈训练专属助手\n\n在用户偏好设置中：\n\n1. 定义术语库（如公司内部缩写对照表）\n2. 设置默认工具链（数据分析用 PySpark 而非 Pandas）\n3. 保存格式偏好（PPT 字体、图表配色方案）\n\n##### {#54__402}5.4 混合执行策略\n\n根据任务特性选择执行方式：\n\n* 本地执行：处理敏感数据（如合同扫描）\n* 云端执行：需要 GPU 加速的任务（如 3D 渲染）\n* 混合执行：先本地清洗数据，再云端建模分析\n\n### {#_410}五、实操案例解析\n\n#### {#_412}案例一：简历筛选\n\n##### {#11__414}1.1 任务输入与目标\n\n用户需要为\"强化学习算法工程师\"岗位筛选 15 份简历，并按候选人的专业知识水平进行排序。具体要求包括：\n\n* 上传包含 10 份简历的 ZIP 压缩包，随后补充上传 5 份简历\n* 提取候选人项目经验、技能匹配度等关键信息\n* 输出 Excel 格式的候选人排名表\n\n##### {#12_Manus__422}1.2 Manus 处理过程\n\n###### {#121__424}1.2.1 文件自动化处理\n\nManus 首先自动解压 ZIP 文件，逐份浏览 PDF 或 Word 格式的简历。对于用户后续补充上传的 5 份简历，系统异步接收并整合至任务队列，无需用户重复操作。\n\n###### {#122__428}1.2.2 智能分析与评估\n\n系统采用以下评估维度：\n\n1. 专业匹配度：识别简历中与强化学习相关的关键词（如 Q-learning、PPO 算法）\n2. 项目经验权重：根据项目复杂度、成果量化指标（如算法准确率提升百分比）打分\n3. 技能完整性：检测是否具备关联技术栈（Python、PyTorch、ROS 机器人平台）\n\n###### {#123__436}1.2.3 动态调整输出格式\n\n当用户临时要求将结果转为 Excel 表格时，Manus 自动执行以下操作：\n\n1. 调用 Python 的 pandas 库创建数据框架\n2. 按\"高级候选人\"\"基础经验者\"\"不匹配\"三级分类生成工作表\n3. 添加超链接直达候选人联系方式与作品集\n\n##### {#13__444}1.3 成果交付示例\n\n最终生成的 Excel 文件包含：\n\n* 主表：按综合评分排序的候选人列表\n* 附录：各评估维度的权重说明\n* 可视化图表：候选人技能雷达图（自动嵌入 SVG 格式）\n\n#### {#_452}案例二：股票相关性分析\n\n##### {#21__454}2.1 任务输入与目标\n\n用户要求分析英伟达（NVDA）、迈威尔科技（MRVL）、台积电（TSM）三家公司过去三年的股票价格相关性，并生成交互式可视化报告。具体需求包括：\n\n* 获取 2019 年 1 月-2022 年 1 月历史数据\n* 计算皮尔逊相关系数与滚动相关性\n* 部署可在线访问的数据仪表盘\n\n##### {#22_Manus__462}2.2 Manus 处理流程\n\n###### {#221__464}2.2.1 多源数据获取\n\n系统通过以下途径收集数据：\n\n1. 官方 API 调用：接入 Yahoo Finance 获取日线级收盘价\n2. 数据清洗：自动修复缺失值（如节假日休市数据）\n3. 交叉验证：对比 SEC 公开财报中的流通股数量\n\n###### {#222__472}2.2.2 统计分析实施\n\nManus 分阶段执行代码：\n\n1. 基础计算\n\n```js\n\n# 计算皮尔逊相关系数\ncorrelation_matrix = df[[\'NVDA\',\'MRVL\',\'TSM\']].corr(method=\'pearson\')\n```\n\n2. 进阶分析\n\n* 生成 30 日滚动相关性曲线\n* 绘制波动率对比热力图\n\n###### {#223__485}2.2.3 交互式可视化开发\n\n系统使用以下技术栈构建仪表盘：\n\n* 前端框架：Vue.js + ECharts 实现动态图表\n* 后端服务：FastAPI 提供数据接口\n* 部署方案：自动生成二级域名（如`https://stock.manus.space`）\n\n##### {#23__493}2.3 成果展示特点\n\n最终报告包含：\n\n* 时间序列图：叠加显示三只股票价格走势\n* 相关性矩阵：点击单元格可查看历史相关性变化动画\n* 投资建议模块：基于波动率提出对冲策略\n\n#### {#_501}案例三：物理教学课件制作\n\n##### {#31__503}3.1 任务输入与目标\n\n中学物理教师需要制作《动量守恒定律》的交互式教学课件，具体要求：\n\n* 包含弹性碰撞、非弹性碰撞等场景的动画演示\n* 支持课堂实时参数调整（如小球质量、初速度）\n* 输出 HTML 文件便于投影仪直接播放\n\n##### {#32_Manus__511}3.2 Manus 开发过程\n\n###### {#321__513}3.2.1 教学内容规划\n\n系统自动生成教学大纲：\n\n1. 基础概念：动量公式`p=mv`的矢量特性演示\n2. 实验模拟：\n   * 完全弹性碰撞（能量守恒）\n   * 完全非弹性碰撞（最大动能损失）\n3. 现实应用：汽车碰撞测试的动量变化分析\n\n###### {#322__523}3.2.2 交互动画开发\n\nManus 采用以下技术实现：\n\n* 动画引擎：基于 Canvas 的物理引擎模拟碰撞效果\n* 参数控制面板：\n\n```js\n\n<input type=\"range\" id=\"mass1\" min=\"1\" max=\"10\" value=\"4\">\n<label for=\"mass1\">小球质量(kg)</label>\n```\n\n* 即时计算反馈：\n\n```js\n\n// 实时显示动量总和\ndocument.getElementById(\'momentum\').innerHTML = m1v1 + m2v2;\n```\n\n###### {#323__539}3.2.3 教学资源整合\n\n系统自动补充：\n\n* 扩展阅读：链接至维基百科相关词条\n* 课堂习题：随机生成数值不同的练习题\n* 教师手册：Markdown 格式的教学建议文档\n\n##### {#33__547}3.3 教学应用效果\n\n最终课件支持：\n\n* 动态重置：一键恢复初始参数\n* 分步演示：分解碰撞过程的帧动画\n* 数据导出：将模拟结果保存为 CSV 供课后分析\n\n#### {#_555}案例共性特征总结\n\n1. **端到端自动化**：从原始数据到交付成果全程无需人工干预\n2. **多工具协同**：融合 API 调用、代码编写、可视化开发等能力\n3. **可扩展性**：所有输出文件保留完整源码，支持二次修改\n\n\n\n',1,0,1,0,1,1,'https://blog.csdn.net/u014496893/article/details/146104183?spm=1000.2115.3001.10524',0,NULL,NULL,'2025-04-28 17:37:59','2025-07-08 22:56:24'),(331,1,45,'机器学习特征筛选：向后淘汰法原理与Python实现','http://113.45.240.54:9092/article-cover/e295b524-c15d-4404-ab7e-36fcb45e5c7a_freecompress-Neat-Admin 管理系统 (12).png','机器学习\n','<p>向后淘汰法（Backward Elimination）是机器学习领域中一种重要的特征选择技术，其核心思想是通过系统性地移除对模型贡献较小的特征，以提高模型性能和可解释性。该方法从完整特征集出发，逐步剔除不重要的特征，最终保留对预测结果最具影响力的变量子集。</p>\n<h3><a id=\"_content_views_2\"></a>向后淘汰法的工作原理 {content_views}</h3>\n<p>向后淘汰法遵循一个迭代式的特征筛选过程，具体步骤如下：</p>\n<ol>\n<li><strong>初始模型构建</strong>：首先使用数据集中的全部特征构建模型。</li>\n<li><strong>模型拟合</strong>：在完整特征集上训练机器学习模型。</li>\n<li><strong>特征重要性评估</strong>：通过统计测试或性能指标（如线性回归中的p值）评估各个特征的重要性。</li>\n<li><strong>特征剔除</strong>：识别并移除对模型贡献最小的特征（例如具有最高p值或对模型性能影响最小的特征）。</li>\n<li><strong>模型重构</strong>：使用剩余特征重新训练模型。</li>\n<li><strong>迭代优化</strong>：重复上述过程，直到达到某个停止条件------例如所有剩余特征均达到统计显著性，或进一步移除特征会导致模型性能下降。</li>\n</ol>\n<h3><a id=\"_13\"></a>向后淘汰法的优势</h3>\n<p>向后淘汰法在特征选择过程中具有多方面的优势。首先，它能显著提升模型的简洁性，通过减少特征维度使模型更易于解释和理解。其次，移除不相关特征能够潜在地提高模型性能，有效避免过拟合现象。此外，特征数量的减少还能降低计算复杂度，提高模型训练和预测的效率。</p>\n<p>线性回归中的向后淘汰法实例</p>\n<p>在线性回归应用场景中，向后淘汰法的典型实现流程为：首先构建包含所有候选特征的完整模型；然后评估每个特征的p值，识别统计显著性最低（p值最高）的特征；将该特征从模型中剔除并重新训练；重复此过程直至所有保留的特征都具有统计显著性。</p>\n<h3><a id=\"_21\"></a>方法局限性</h3>\n<p>尽管向后淘汰法在特征选择中具有广泛应用，但也存在一定局限性：一是计算成本较高，特别是在处理高维特征空间时，迭代过程可能耗时较长；二是在特征间存在复杂依赖关系或非线性关联的情况下，该方法可能无法找到全局最优的特征子集，而是陷入局部最优解。</p>\n<p>向后淘汰法广泛应用于特征可解释性至关重要的模型中，如线性回归、逻辑回归等统计学习模型。</p>\n<h3><a id=\"Python_27\"></a>Python实现向后淘汰法</h3>\n<p>在Python环境中实现向后淘汰法有多种途径，既可利用现有库的自动化功能，也可以根据需求进行手动实现。</p>\n<h4><a id=\"statsmodels_31\"></a>基于statsmodels的自动化实现</h4>\n<p>Python的statsmodels库提供了便捷的功能支持向后淘汰过程，以下是在线性回归模型中的应用示例：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"> <span class=\"hljs-keyword\">import</span> statsmodels.api as sm\n<span class=\"hljs-keyword\">import</span> pandas as pd\n<span class=\"hljs-keyword\">import</span> numpy as np\n\n# 构建示例数据集\nX = np.random.rand(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">5</span>)  # <span class=\"hljs-number\">100</span>个样本，<span class=\"hljs-number\">5</span>个特征\ny = np.random.rand(<span class=\"hljs-number\">100</span>)\n\n# 添加常数项作为截距\nX = sm.add_constant(X)\n\n# 拟合模型\nmodel = sm.OLS(y, X).fit()\n\n# 输出摘要统计信息查看p值\n print(model.summary())\n</code></div></pre>\n<h4><a id=\"_56_54\"></a>{#_56}向后淘汰法的手动实现</h4>\n<p>对于需要更精细控制的场景，以下是向后淘汰法的手动实现方式：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"> <span class=\"hljs-keyword\">import</span> pandas as pd\n<span class=\"hljs-keyword\">import</span> numpy as np\n<span class=\"hljs-keyword\">import</span> statsmodels.api as sm\nfrom sklearn.datasets <span class=\"hljs-keyword\">import</span> make_regression\n\n# 生成示例数据\nX, y = make_regression(n_samples=<span class=\"hljs-number\">100</span>, n_features=<span class=\"hljs-number\">5</span>, noise=<span class=\"hljs-number\">0.1</span>, random_state=<span class=\"hljs-number\">42</span>)\n\n# 添加常数项作为截距\nX = sm.add_constant(X)\n\ndef <span class=\"hljs-title function_\">backward_elimination</span><span class=\"hljs-params\">(X, y, significance_level=<span class=\"hljs-number\">0.05</span>)</span>:\n    features = X.columns.tolist()\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-title function_\">len</span><span class=\"hljs-params\">(features)</span> &gt; <span class=\"hljs-number\">0</span>:\n        # 拟合模型\n        model = sm.OLS(y, X[features]).fit()\n        # 获取各特征的p值\n        p_values = model.pvalues[<span class=\"hljs-number\">1</span>:]  # 排除常数项\n        max_p_value = max(p_values)\n        <span class=\"hljs-keyword\">if</span> max_p_value &gt; significance_level:\n            # 如果最大p值超过阈值，移除该特征\n            excluded_feature = features[p_values.argmax()]\n            print(f<span class=\"hljs-string\">&#x27;移除特征: {excluded_feature}，p值为 {max_p_value}&#x27;</span>)\n            features.remove(excluded_feature)\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">break</span>\n    <span class=\"hljs-keyword\">return</span> features\n\n# 将X转换为DataFrame以使用列名\nX_df = pd.DataFrame(X, columns=[<span class=\"hljs-string\">&#x27;const&#x27;</span>, <span class=\"hljs-string\">&#x27;Feature1&#x27;</span>, <span class=\"hljs-string\">&#x27;Feature2&#x27;</span>, <span class=\"hljs-string\">&#x27;Feature3&#x27;</span>, <span class=\"hljs-string\">&#x27;Feature4&#x27;</span>, <span class=\"hljs-string\">&#x27;Feature5&#x27;</span>])\n\n# 执行向后淘汰\nselected_features = backward_elimination(X_df, y)\n print(<span class=\"hljs-string\">&#x27;保留的特征:&#x27;</span>, selected_features)\n</code></div></pre>\n<p>上述手动实现遵循以下核心步骤：首先使用所有特征拟合线性模型（</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">sm.OLS\n</code></div></pre>\n<p>）；然后检查每个特征的p值，若最大p值超过显著性阈值（如0.05），表明该特征在统计上不显著，应予以移除；移除p值最高的特征后重新训练模型；重复此过程直至所有保留特征的p值均低于设定的阈值。</p>\n<h4><a id=\"_103_103\"></a>{#_103}何时采用手动向后淘汰</h4>\n<p>在以下情境下，手动实现向后淘汰法可能更为适合：</p>\n<p>当项目有特定的定制化需求，需要对筛选过程进行精细控制时；处理规模较小的数据集或出于教学目的深入理解算法机制时。然而，对于大多数实际的机器学习工作流程，使用</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">statsmodels\n</code></div></pre>\n<p>、</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">sklearn\n</code></div></pre>\n<p>等库提供的现成工具能够更高效地自动化特征选择过程。</p>\n<h4><a id=\"Scikitlearn_117Scikitlearn_121\"></a>{#Scikitlearn_117}基于Scikit-learn的递归特征消除</h4>\n<p>Scikit-learn库通过递归特征消除（RFE）提供了一种更为自动化的特征选择方法，本质上是向后淘汰法的一种系统化实现：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"> from sklearn.feature_selection <span class=\"hljs-keyword\">import</span> RFE\nfrom sklearn.linear_model <span class=\"hljs-keyword\">import</span> LinearRegression\n\n# 创建基础模型\nmodel = LinearRegression()\n\n# 创建RFE模型并选择前<span class=\"hljs-number\">3</span>个特征\nrfe = RFE(model, <span class=\"hljs-number\">3</span>)\nX_rfe = rfe.fit_transform(X, y)\n\n# 输出特征排名\n print(<span class=\"hljs-string\">&quot;特征排名:&quot;</span>, rfe.ranking_)\n</code></div></pre>\n<p>这种方法执行与向后淘汰相似的操作，但在自动化处理大规模特征选择任务时效率更高，适用于生产环境的模型开发。</p>\n<h3><a id=\"_138_142\"></a>{#_138}总结</h3>\n<p>向后淘汰法是机器学习中一种重要的特征选择技术，其工作原理是从全部特征出发，逐步剔除对模型贡献度低的特征。本文详细介绍了向后淘汰法的工作原理、实施步骤、优势局限性，并提供了多种Python实现方式，包括基于statsmodels的自动化实现、手动实现以及基于Scikit-learn的递归特征消除。向后淘汰法能有效提升模型简洁性、可解释性，并在某些情况下改善模型性能，特别适用于线性回归等统计学习模型。然而，该方法在计算成本和处理复杂特征关系方面存在一定局限。选择合适的特征筛选方法应根据具体应用场景、数据特性和模型需求进行评估。</p>\n<p><a href=\"https://avoid.overfit.cn/post/6ea004a2a69e4aab90feb285b0f4b4f4\" target=\"_blank\">https://avoid.overfit.cn/post/6ea004a2a69e4aab90feb285b0f4b4f4</a></p>\n<p>作者：Ravindu Ruminates</p>\n','向后淘汰法（Backward Elimination）是机器学习领域中一种重要的特征选择技术，其核心思想是通过系统性地移除对模型贡献较小的特征，以提高模型性能和可解释性。该方法从完整特征集出发，逐步剔除不重要的特征，最终保留对预测结果最具影响力的变量子集。  \n\n### 向后淘汰法的工作原理 {content_views}\n\n向后淘汰法遵循一个迭代式的特征筛选过程，具体步骤如下：\n\n1. **初始模型构建**：首先使用数据集中的全部特征构建模型。\n2. **模型拟合**：在完整特征集上训练机器学习模型。\n3. **特征重要性评估**：通过统计测试或性能指标（如线性回归中的p值）评估各个特征的重要性。\n4. **特征剔除**：识别并移除对模型贡献最小的特征（例如具有最高p值或对模型性能影响最小的特征）。\n5. **模型重构**：使用剩余特征重新训练模型。\n6. **迭代优化**：重复上述过程，直到达到某个停止条件------例如所有剩余特征均达到统计显著性，或进一步移除特征会导致模型性能下降。\n\n### 向后淘汰法的优势\n\n向后淘汰法在特征选择过程中具有多方面的优势。首先，它能显著提升模型的简洁性，通过减少特征维度使模型更易于解释和理解。其次，移除不相关特征能够潜在地提高模型性能，有效避免过拟合现象。此外，特征数量的减少还能降低计算复杂度，提高模型训练和预测的效率。\n\n线性回归中的向后淘汰法实例\n\n在线性回归应用场景中，向后淘汰法的典型实现流程为：首先构建包含所有候选特征的完整模型；然后评估每个特征的p值，识别统计显著性最低（p值最高）的特征；将该特征从模型中剔除并重新训练；重复此过程直至所有保留的特征都具有统计显著性。\n\n### 方法局限性\n\n尽管向后淘汰法在特征选择中具有广泛应用，但也存在一定局限性：一是计算成本较高，特别是在处理高维特征空间时，迭代过程可能耗时较长；二是在特征间存在复杂依赖关系或非线性关联的情况下，该方法可能无法找到全局最优的特征子集，而是陷入局部最优解。\n\n向后淘汰法广泛应用于特征可解释性至关重要的模型中，如线性回归、逻辑回归等统计学习模型。\n\n### Python实现向后淘汰法\n\n在Python环境中实现向后淘汰法有多种途径，既可利用现有库的自动化功能，也可以根据需求进行手动实现。\n\n#### 基于statsmodels的自动化实现\n\nPython的statsmodels库提供了便捷的功能支持向后淘汰过程，以下是在线性回归模型中的应用示例：\n\n```java\n import statsmodels.api as sm\nimport pandas as pd\nimport numpy as np\n\n# 构建示例数据集\nX = np.random.rand(100, 5)  # 100个样本，5个特征\ny = np.random.rand(100)\n\n# 添加常数项作为截距\nX = sm.add_constant(X)\n\n# 拟合模型\nmodel = sm.OLS(y, X).fit()\n\n# 输出摘要统计信息查看p值\n print(model.summary())\n```\n\n#### {#_56}向后淘汰法的手动实现\n\n对于需要更精细控制的场景，以下是向后淘汰法的手动实现方式：\n\n```java\n import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\nfrom sklearn.datasets import make_regression\n\n# 生成示例数据\nX, y = make_regression(n_samples=100, n_features=5, noise=0.1, random_state=42)\n\n# 添加常数项作为截距\nX = sm.add_constant(X)\n\ndef backward_elimination(X, y, significance_level=0.05):\n    features = X.columns.tolist()\n    while len(features) > 0:\n        # 拟合模型\n        model = sm.OLS(y, X[features]).fit()\n        # 获取各特征的p值\n        p_values = model.pvalues[1:]  # 排除常数项\n        max_p_value = max(p_values)\n        if max_p_value > significance_level:\n            # 如果最大p值超过阈值，移除该特征\n            excluded_feature = features[p_values.argmax()]\n            print(f\'移除特征: {excluded_feature}，p值为 {max_p_value}\')\n            features.remove(excluded_feature)\n        else:\n            break\n    return features\n\n# 将X转换为DataFrame以使用列名\nX_df = pd.DataFrame(X, columns=[\'const\', \'Feature1\', \'Feature2\', \'Feature3\', \'Feature4\', \'Feature5\'])\n\n# 执行向后淘汰\nselected_features = backward_elimination(X_df, y)\n print(\'保留的特征:\', selected_features)\n```\n\n上述手动实现遵循以下核心步骤：首先使用所有特征拟合线性模型（\n\n```java\nsm.OLS\n```\n\n）；然后检查每个特征的p值，若最大p值超过显著性阈值（如0.05），表明该特征在统计上不显著，应予以移除；移除p值最高的特征后重新训练模型；重复此过程直至所有保留特征的p值均低于设定的阈值。\n\n#### {#_103}何时采用手动向后淘汰\n\n在以下情境下，手动实现向后淘汰法可能更为适合：\n\n当项目有特定的定制化需求，需要对筛选过程进行精细控制时；处理规模较小的数据集或出于教学目的深入理解算法机制时。然而，对于大多数实际的机器学习工作流程，使用\n\n```java\nstatsmodels\n```\n\n、\n\n```java\nsklearn\n```\n\n等库提供的现成工具能够更高效地自动化特征选择过程。\n\n#### {#Scikitlearn_117}基于Scikit-learn的递归特征消除\n\nScikit-learn库通过递归特征消除（RFE）提供了一种更为自动化的特征选择方法，本质上是向后淘汰法的一种系统化实现：\n\n```java\n from sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LinearRegression\n\n# 创建基础模型\nmodel = LinearRegression()\n\n# 创建RFE模型并选择前3个特征\nrfe = RFE(model, 3)\nX_rfe = rfe.fit_transform(X, y)\n\n# 输出特征排名\n print(\"特征排名:\", rfe.ranking_)\n```\n\n这种方法执行与向后淘汰相似的操作，但在自动化处理大规模特征选择任务时效率更高，适用于生产环境的模型开发。\n\n### {#_138}总结\n\n向后淘汰法是机器学习中一种重要的特征选择技术，其工作原理是从全部特征出发，逐步剔除对模型贡献度低的特征。本文详细介绍了向后淘汰法的工作原理、实施步骤、优势局限性，并提供了多种Python实现方式，包括基于statsmodels的自动化实现、手动实现以及基于Scikit-learn的递归特征消除。向后淘汰法能有效提升模型简洁性、可解释性，并在某些情况下改善模型性能，特别适用于线性回归等统计学习模型。然而，该方法在计算成本和处理复杂特征关系方面存在一定局限。选择合适的特征筛选方法应根据具体应用场景、数据特性和模型需求进行评估。\n\n<https://avoid.overfit.cn/post/6ea004a2a69e4aab90feb285b0f4b4f4>\n\n作者：Ravindu Ruminates\n',1,0,1,0,0,0,'https://blog.csdn.net/deephub/article/details/145976691?spm=1000.2115.3001.10524',0,NULL,NULL,'2025-04-28 17:40:31','2025-07-08 22:55:33'),(337,1,20,'效率炸裂！5 款资源管理软件，拯救你的文件 “混沌地狱”','http://113.45.240.54:9092/article-cover/a724b1e8-df19-4de3-b915-05a2e2657bbb_easy-es.jpg.jpg','5 款宝藏资源管理软件深度评测','<h2><a id=\"5___0\"></a>效率炸裂！5 款资源管理软件，拯救你的文件 “混沌地狱”</h2>\n<p>作为打工人 / 学生党，是不是总被杂乱文件搞到崩溃？找资料像挖坟、团队共享总翻车…… 这 5 款资源管理神器，从本地整理到云端协作，直接把效率拉满！</p>\n<h3><a id=\"___FileMeta_4\"></a>🔥 【本地收纳王 - FileMeta】</h3>\n<ul>\n<li><strong>核心技能</strong>：自动识别文件内容生成标签！传 100 个项目文件，3 秒生成「类型 + 时间 + 关键词」标签体系，找半年前的设计稿，搜 “2023 活动页” 直接秒开，效率提升 80%！</li>\n<li><strong>隐藏彩蛋</strong>：支持正则表达式筛选，想找 “所有 PDF 格式的合同”，一条规则直接过滤，打工人狂喜！</li>\n</ul>\n<h3><a id=\"___ResShare_9\"></a>👥 【团队协作王 - ResShare】</h3>\n<ul>\n<li><strong>神级设计</strong>：权限分级 + 实时预览！项目经理锁核心文件，成员在线批注自动同步，再也不用来回传版本。</li>\n<li><strong>注意坑点</strong>：免费版仅 5GB 存储，小团队轻量协作够，企业级建议升级专业版～</li>\n</ul>\n<h3><a id=\"___PureSync_14\"></a>🚀 【极简同步王 - PureSync】</h3>\n<ul>\n<li><strong>致命优势</strong>：无广告 + 双向同步！设好规则，本地改文件云端自动更，再也不怕 “版本混乱症”。</li>\n<li><strong>深夜技巧</strong>：右键设 “静默同步”，半夜自动更新，白天工作丝滑不打扰～</li>\n</ul>\n<p>（后两款软件同理展开评测，结尾互动：<strong>“你被哪款种草？评论区晒出你的文件管理黑历史！”</strong> ）</p>\n','## 效率炸裂！5 款资源管理软件，拯救你的文件 “混沌地狱”\n\n作为打工人 / 学生党，是不是总被杂乱文件搞到崩溃？找资料像挖坟、团队共享总翻车…… 这 5 款资源管理神器，从本地整理到云端协作，直接把效率拉满！\n\n### 🔥 【本地收纳王 - FileMeta】\n\n- **核心技能**：自动识别文件内容生成标签！传 100 个项目文件，3 秒生成「类型 + 时间 + 关键词」标签体系，找半年前的设计稿，搜 “2023 活动页” 直接秒开，效率提升 80%！\n- **隐藏彩蛋**：支持正则表达式筛选，想找 “所有 PDF 格式的合同”，一条规则直接过滤，打工人狂喜！\n\n### 👥 【团队协作王 - ResShare】\n\n- **神级设计**：权限分级 + 实时预览！项目经理锁核心文件，成员在线批注自动同步，再也不用来回传版本。\n- **注意坑点**：免费版仅 5GB 存储，小团队轻量协作够，企业级建议升级专业版～\n\n### 🚀 【极简同步王 - PureSync】\n\n- **致命优势**：无广告 + 双向同步！设好规则，本地改文件云端自动更，再也不怕 “版本混乱症”。\n- **深夜技巧**：右键设 “静默同步”，半夜自动更新，白天工作丝滑不打扰～\n\n（后两款软件同理展开评测，结尾互动：**“你被哪款种草？评论区晒出你的文件管理黑历史！”** ）',1,0,1,1,0,0,'',0,'',NULL,'2025-06-29 19:30:37','2025-07-08 22:53:38'),(338,1,20,'程序员私藏！3 款代码资源软件，让 CRUD 效率翻倍','http://113.45.240.54:9092/article-cover/3e8d2500-4666-4089-b5a9-e1630c99edc2_logo.png','CRUD ','<h2><a id=\"3__CRUD__0\"></a>程序员私藏！3 款代码资源软件，让 CRUD 效率翻倍</h2>\n<p>写代码总被 “找片段、理依赖、管分支” 搞心态？分享 3 款私藏工具，从个人沉淀到团队共建，让代码资产活起来！</p>\n<h3><a id=\"___CodeBox_4\"></a>📦 【代码百宝箱 - CodeBox】</h3>\n<ul>\n<li><strong>硬核功能</strong>：支持 20+ 语言语法高亮，Vue 组件、Python 脚本一键分类！搜 “防抖 Vue3”，1 秒定位工具函数，传统文件夹找代码平均 2 分钟 → 现在 10 秒，每天省出 1 小时写逻辑！</li>\n<li><strong>效率对比</strong>：谁用谁知道，早用早下班！</li>\n</ul>\n<h3><a id=\"___RepoMind_9\"></a>🌐 【团队知识库 - RepoMind】</h3>\n<ul>\n<li><strong>协同亮点</strong>：分支管理可视化 + 代码规范检查！新人看迭代脉络秒懂，提交前自动格式化，CodeReview 通过率直接涨 60%。</li>\n<li><strong>真实案例</strong>：我们团队用它管微服务，半年代码重复率从 35% 降到 12%，重构成本大砍！</li>\n</ul>\n<h3><a id=\"___LibKeep_14\"></a>🧰 【依赖管家 - LibKeep】</h3>\n<ul>\n<li><strong>解决痛点</strong>：自动检测依赖冲突！Node.js 装包前先 “体检”，生成依赖图谱，排查老旧包超直观。</li>\n<li><strong>避坑指南</strong>：国内镜像源偶尔慢，搭配 “镜像切换脚本” 更香～</li>\n</ul>\n','## 程序员私藏！3 款代码资源软件，让 CRUD 效率翻倍\n\n写代码总被 “找片段、理依赖、管分支” 搞心态？分享 3 款私藏工具，从个人沉淀到团队共建，让代码资产活起来！\n\n### 📦 【代码百宝箱 - CodeBox】\n\n- **硬核功能**：支持 20+ 语言语法高亮，Vue 组件、Python 脚本一键分类！搜 “防抖 Vue3”，1 秒定位工具函数，传统文件夹找代码平均 2 分钟 → 现在 10 秒，每天省出 1 小时写逻辑！\n- **效率对比**：谁用谁知道，早用早下班！\n\n### 🌐 【团队知识库 - RepoMind】\n\n- **协同亮点**：分支管理可视化 + 代码规范检查！新人看迭代脉络秒懂，提交前自动格式化，CodeReview 通过率直接涨 60%。\n- **真实案例**：我们团队用它管微服务，半年代码重复率从 35% 降到 12%，重构成本大砍！\n\n### 🧰 【依赖管家 - LibKeep】\n\n- **解决痛点**：自动检测依赖冲突！Node.js 装包前先 “体检”，生成依赖图谱，排查老旧包超直观。\n- **避坑指南**：国内镜像源偶尔慢，搭配 “镜像切换脚本” 更香～\n\n\n\n',1,0,1,1,0,0,'',0,'',NULL,'2025-06-29 19:31:49','2025-07-10 22:33:20'),(339,1,20,'设计师狂喜！4 款素材管理软件，告别 “找图 2 小时，作图 5 分钟”','http://113.45.240.54:9092/article-cover/44bd07df-1efb-4b3c-9f42-c4e529d11e43_wave.png','4 款素材管理软件','<h2><a id=\"4___2__5__0\"></a>设计师狂喜！4 款素材管理软件，告别 “找图 2 小时，作图 5 分钟”</h2>\n<p>PSD/PNG/SVG 堆成山？分享 4 款神器，从素材检索到灵感管理，让创意丝滑输出！</p>\n<h3><a id=\"___AssetBrain_4\"></a>👀 【视觉大脑 - AssetBrain】</h3>\n<ul>\n<li><strong>智能检索</strong>：上传素材自动识别元素（渐变背景、扁平化图标…），搜 “蓝色按钮” 精准定位，Sketch/Figma 文件直接预览，不用开软件也能看全貌！</li>\n<li><strong>实测场景</strong>：找去年双 11 海报，传统方法翻 3 个文件夹 → 现在搜 “2023-11 促销” 秒开！</li>\n</ul>\n<h3><a id=\"___InspireFlow_9\"></a>💡 【灵感协作台 - InspireFlow】</h3>\n<ul>\n<li><strong>特色玩法</strong>：灵感板支持 “标签 + 情绪板” 分类，Dribbble/Behance 素材拖进去自动打标签，团队共享灵感库，新人快速对齐品牌规范！</li>\n<li><strong>案例分享</strong>：用它做品牌升级，3 周收集 200+ 灵感，定稿效率涨 50%！</li>\n</ul>\n<h3><a id=\"___FontKeeper_14\"></a>✍️ 【字体救星 - FontKeeper】</h3>\n<ul>\n<li><strong>核心功能</strong>：本地字体生成预览图，搜 “粗体 标题” 快速筛字体，导出包自动嵌项目信息，商用不怕侵权！</li>\n<li><strong>冷知识</strong>：检测字体版权，踩雷率直接归 0～</li>\n</ul>\n','## 设计师狂喜！4 款素材管理软件，告别 “找图 2 小时，作图 5 分钟”\n\nPSD/PNG/SVG 堆成山？分享 4 款神器，从素材检索到灵感管理，让创意丝滑输出！\n\n### 👀 【视觉大脑 - AssetBrain】\n\n- **智能检索**：上传素材自动识别元素（渐变背景、扁平化图标…），搜 “蓝色按钮” 精准定位，Sketch/Figma 文件直接预览，不用开软件也能看全貌！\n- **实测场景**：找去年双 11 海报，传统方法翻 3 个文件夹 → 现在搜 “2023-11 促销” 秒开！\n\n### 💡 【灵感协作台 - InspireFlow】\n\n- **特色玩法**：灵感板支持 “标签 + 情绪板” 分类，Dribbble/Behance 素材拖进去自动打标签，团队共享灵感库，新人快速对齐品牌规范！\n- **案例分享**：用它做品牌升级，3 周收集 200+ 灵感，定稿效率涨 50%！\n\n### ✍️ 【字体救星 - FontKeeper】\n\n- **核心功能**：本地字体生成预览图，搜 “粗体 标题” 快速筛字体，导出包自动嵌项目信息，商用不怕侵权！\n- **冷知识**：检测字体版权，踩雷率直接归 0～',1,0,1,1,0,0,'',0,'',NULL,'2025-06-29 19:32:47','2025-07-08 22:52:35'),(341,1,20,'自媒体人必备！4 款素材软件，爆款内容流水线','http://113.45.240.54:9092/article-cover/2ac9bbcb-27fe-4b6c-b217-cd07e3b41813_9.jpg','自媒体人必备！4 款素材软件，爆款内容流水线','<h2><a id=\"4__0\"></a>自媒体人必备！4 款素材软件，爆款内容流水线</h2>\n<p>标题库、封面、脚本总难产？4 款工具，从灵感捕捉到发布，直接打造爆款流水线！</p>\n<h3><a id=\"___TitleLab_4\"></a>🔥 【标题工厂 - TitleLab】</h3>\n<ul>\n<li><strong>核心功能</strong>：输关键词（如 “职场 成长”），生成 20+ 标题模板（悬念式、清单体…），实时检测热度，优化点击率！</li>\n<li><strong>实战案例</strong>：“30 岁职场瓶颈”→“30 岁遇瓶颈？3 招逆袭核心骨干”，阅读量涨 3 倍！</li>\n</ul>\n<h3><a id=\"___MediaBank_9\"></a>🎨 【视觉军火库 - MediaBank】</h3>\n<ul>\n<li><strong>特色优势</strong>：短视频素材自动打标签（情绪 / 励志 / 职场…），剪视频搜 “职场 加班 反转” 直接拼素材，Canva 联动封面，效率对比：1 小时 → 10 分钟！</li>\n</ul>\n<h3><a id=\"___ScriptFlow_13\"></a>✍️ 【脚本白板 - ScriptFlow】</h3>\n<ul>\n<li><strong>协同亮点</strong>：分镜 / 台词 / 拍摄要求可视化编排，导出 “拍摄任务包”（分镜图 + 道具清单），片场不混乱！</li>\n<li><strong>冷知识</strong>：内置爆款脚本库，输领域自动推荐高赞结构（开头冲突 + 中间干货 + 结尾互动）～</li>\n</ul>\n','## 自媒体人必备！4 款素材软件，爆款内容流水线\n\n标题库、封面、脚本总难产？4 款工具，从灵感捕捉到发布，直接打造爆款流水线！\n\n### 🔥 【标题工厂 - TitleLab】\n\n- **核心功能**：输关键词（如 “职场 成长”），生成 20+ 标题模板（悬念式、清单体…），实时检测热度，优化点击率！\n- **实战案例**：“30 岁职场瓶颈”→“30 岁遇瓶颈？3 招逆袭核心骨干”，阅读量涨 3 倍！\n\n### 🎨 【视觉军火库 - MediaBank】\n\n- **特色优势**：短视频素材自动打标签（情绪 / 励志 / 职场…），剪视频搜 “职场 加班 反转” 直接拼素材，Canva 联动封面，效率对比：1 小时 → 10 分钟！\n\n### ✍️ 【脚本白板 - ScriptFlow】\n\n- **协同亮点**：分镜 / 台词 / 拍摄要求可视化编排，导出 “拍摄任务包”（分镜图 + 道具清单），片场不混乱！\n- **冷知识**：内置爆款脚本库，输领域自动推荐高赞结构（开头冲突 + 中间干货 + 结尾互动）～',1,0,1,1,0,0,'',0,'',NULL,'2025-06-29 19:34:17','2025-07-10 22:32:55'),(342,1,20,'效率党必看！资源软件自动化 workflow 搭建指南','http://113.45.240.54:9092/article-cover/f255d548-23ae-4857-a913-3f7259c56796_20.jpg','资源软件自动化 workflow 搭建指南','<h2><a id=\"_workflow__0\"></a>效率党必看！资源软件自动化 workflow 搭建指南</h2>\n<p>手动整理文件、重复上传？教你用 3 款软件搭自动化流程，让资源管理 “自动跑”！</p>\n<h3><a id=\"___AutoSync_4\"></a>🚀 【文件传送带 - AutoSync】</h3>\n<ul>\n<li><strong>基础玩法</strong>：设 “监控文件夹”，新增文件自动分类（PDF→文档库、PNG→素材库），配合云盘，本地改云端自动更！</li>\n<li><strong>进阶技巧</strong>：正则表达式命名，“202407_报告.pdf” 自动归 “2024 年 Q3→报告”～</li>\n</ul>\n<h3><a id=\"___TaskFlow_9\"></a>🔧 【资源流水线 - TaskFlow】</h3>\n<ul>\n<li><strong>核心功能</strong>：串联 “下载→解压→重命名→归档”，批量处理资源包只需点一次，支持 “IFTTT” 逻辑（文件含 “合同”→发审批提醒）！</li>\n<li><strong>实战案例</strong>：运营活动素材包，自动完成解压 / 分类 / 同步，省 2 小时机械操作！</li>\n</ul>\n<h3><a id=\"___ResStats_14\"></a>📊 【数据仪表盘 - ResStats】</h3>\n<ul>\n<li><strong>价值体现</strong>：统计资源使用频率（如 “周报模板月下载 20 次”），生成 “资源健康度报告”，预警老旧文件（2019 规范 3 年未更）～</li>\n</ul>\n','## 效率党必看！资源软件自动化 workflow 搭建指南\n\n手动整理文件、重复上传？教你用 3 款软件搭自动化流程，让资源管理 “自动跑”！\n\n### 🚀 【文件传送带 - AutoSync】\n\n- **基础玩法**：设 “监控文件夹”，新增文件自动分类（PDF→文档库、PNG→素材库），配合云盘，本地改云端自动更！\n- **进阶技巧**：正则表达式命名，“202407_报告.pdf” 自动归 “2024 年 Q3→报告”～\n\n### 🔧 【资源流水线 - TaskFlow】\n\n- **核心功能**：串联 “下载→解压→重命名→归档”，批量处理资源包只需点一次，支持 “IFTTT” 逻辑（文件含 “合同”→发审批提醒）！\n- **实战案例**：运营活动素材包，自动完成解压 / 分类 / 同步，省 2 小时机械操作！\n\n### 📊 【数据仪表盘 - ResStats】\n\n- **价值体现**：统计资源使用频率（如 “周报模板月下载 20 次”），生成 “资源健康度报告”，预警老旧文件（2019 规范 3 年未更）～',1,0,1,1,0,0,'',0,'',NULL,'2025-06-29 19:35:04','2025-07-10 22:33:40'),(343,1,20,'跨平台自由！5 款软件，Windows+Mac + 手机无缝管资源','http://113.45.240.54:9092/article-cover/d953b5ea-e68e-4c4b-9f62-2a4584085c86_img-error.jpg','Windows+Mac + 手机无缝管资源','<h2><a id=\"5_WindowsMac___0\"></a>跨平台自由！5 款软件，Windows+Mac + 手机无缝管资源</h2>\n<p>换设备就 “资源失联”？5 款神器，一次配置，多设备无缝访问，实现 “设备自由”！</p>\n<h3><a id=\"___CrossDrive_4\"></a>🌐 【全平台中枢 - CrossDrive】</h3>\n<ul>\n<li><strong>核心优势</strong>：统一管理本地、云盘（百度 / OneDrive）、NAS 资源，手机直接访问电脑共享文件夹，跨平台标签同步（Mac 标 “待处理”，Windows 端显示）！</li>\n<li><strong>实测场景</strong>：下班 Mac 存设计稿，地铁手机预览，到公司 Windows 无缝编辑，效率拉满！</li>\n</ul>\n<h3><a id=\"___PocketRes_9\"></a>📱 【口袋资源库 - PocketRes】</h3>\n<ul>\n<li><strong>移动优先</strong>：手机拍照识别文字 / 文件，自动同步标签库，Markdown 笔记跨端同步，扫描发票自动关联报销流程！</li>\n</ul>\n<h3><a id=\"___Boundless_13\"></a>👥 【协作无界 - Boundless】</h3>\n<ul>\n<li><strong>跨端协同</strong>：不同系统（Win+Mac + 安卓 + iOS）实时共享 / 批注，内置 “跨平台转换器”（Keynote→PPT 自动转）！</li>\n<li><strong>避坑指南</strong>：免费版 3 人协作，小团队够用，企业级买协作包～</li>\n</ul>\n','## 跨平台自由！5 款软件，Windows+Mac + 手机无缝管资源\n\n换设备就 “资源失联”？5 款神器，一次配置，多设备无缝访问，实现 “设备自由”！\n\n### 🌐 【全平台中枢 - CrossDrive】\n\n- **核心优势**：统一管理本地、云盘（百度 / OneDrive）、NAS 资源，手机直接访问电脑共享文件夹，跨平台标签同步（Mac 标 “待处理”，Windows 端显示）！\n- **实测场景**：下班 Mac 存设计稿，地铁手机预览，到公司 Windows 无缝编辑，效率拉满！\n\n### 📱 【口袋资源库 - PocketRes】\n\n- **移动优先**：手机拍照识别文字 / 文件，自动同步标签库，Markdown 笔记跨端同步，扫描发票自动关联报销流程！\n\n### 👥 【协作无界 - Boundless】\n\n- **跨端协同**：不同系统（Win+Mac + 安卓 + iOS）实时共享 / 批注，内置 “跨平台转换器”（Keynote→PPT 自动转）！\n- **避坑指南**：免费版 3 人协作，小团队够用，企业级买协作包～',1,0,1,1,0,0,'',0,'',NULL,'2025-06-29 19:35:43','2025-07-10 22:32:33'),(344,1,17,'后端开发必备！高效接口开发与管理实践全解析','http://113.45.240.54:9092/article-cover/dff45146-e4d2-423e-9382-ba515b2ac4a1_freecompress-Neat-Admin 管理系统 (13).png','后端开发必备！高效接口开发与管理实践全解析','<h1><a id=\"_0\"></a>后端开发必备！高效接口开发与管理实践全解析</h1>\n<p>在后端开发的日常工作中，接口开发与管理是核心环节之一，直接影响着项目的整体质量和开发效率。作为一名后端开发者，我在长期实践中积累了不少关于接口开发与管理的经验，今天就来和大家深入分享，助力大家打造更优质、高效的后端接口。</p>\n<h2><a id=\"_4\"></a>一、接口设计：清晰规范是基础</h2>\n<h3><a id=\"RESTful__6\"></a>（一）RESTful 风格落地</h3>\n<p>遵循 RESTful 风格设计接口，能让接口更具可读性和可维护性。比如，对于用户资源相关的接口：</p>\n<ul>\n<li>获取用户列表：<code>GET /api/users</code></li>\n<li>获取单个用户：<code>GET /api/users/{userId}</code></li>\n<li>创建用户：<code>POST /api/users</code></li>\n<li>更新用户：<code>PUT /api/users/{userId}</code></li>\n<li>删除用户：<code>DELETE /api/users/{userId}</code></li>\n</ul>\n<p>这样的设计，客户端能直观理解接口用途，后端团队在协作和维护时也更清晰。但要注意，实际项目中需结合业务灵活调整，比如部分复杂查询场景，可合理添加查询参数，像 <code>GET /api/users?page=1&amp;size=10</code> 实现分页查询用户列表。</p>\n<h3><a id=\"_18\"></a>（二）请求与响应结构定义</h3>\n<p>明确请求参数和响应数据的格式至关重要。对于请求参数，若为 JSON 格式，要规定好字段名称、类型、是否必填等。例如用户登录接口的请求体：</p>\n<pre><div class=\"hljs\"><code class=\"lang-json\"><span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;username&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;string&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-comment\">// 用户名，必填</span>\n    <span class=\"hljs-attr\">&quot;password&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;string&quot;</span>  <span class=\"hljs-comment\">// 密码，必填</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></div></pre>\n<p>响应数据也需统一规范，一般包含状态码、提示信息和具体数据，结构如下：</p>\n<pre><div class=\"hljs\"><code class=\"lang-json\"><span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;code&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">200</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-comment\">// 状态码，自定义，如 200 成功，400 错误等</span>\n    <span class=\"hljs-attr\">&quot;msg&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;操作成功&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-comment\">// 提示信息</span>\n    <span class=\"hljs-attr\">&quot;data&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span> <span class=\"hljs-comment\">// 具体返回数据，根据接口业务而定</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></div></pre>\n<h2><a id=\"_42\"></a>二、接口开发：高效编码有技巧</h2>\n<h3><a id=\"_44\"></a>（一）利用框架优势</h3>\n<p>以 Spring Boot 框架为例，它提供了丰富的注解和工具，简化接口开发。比如使用 <code>@RestController</code> 和 <code>@RequestMapping</code> 系列注解快速定义接口：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@RestController</span>\n<span class=\"hljs-meta\">@RequestMapping(&quot;/api/users&quot;)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserController</span> {\n\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-keyword\">private</span> UserService userService;\n\n    <span class=\"hljs-meta\">@GetMapping</span>\n    <span class=\"hljs-keyword\">public</span> ResponseResult&lt;List&lt;User&gt;&gt; <span class=\"hljs-title function_\">getUsers</span><span class=\"hljs-params\">()</span> {\n        List&lt;User&gt; userList = userService.listUsers();\n        <span class=\"hljs-keyword\">return</span> ResponseResult.success(userList);\n    }\n\n    <span class=\"hljs-comment\">// 其他接口方法...</span>\n}\n</code></div></pre>\n<p>同时，借助 Spring Boot 的自动装配、 starters 等特性，能快速集成数据库连接、日志管理等功能，减少手动配置工作量。</p>\n<h3><a id=\"_69\"></a>（二）参数校验与异常处理</h3>\n<p>为保证接口输入数据的合法性，要做好参数校验。可以使用 <code>javax.validation</code> 相关注解，如 <code>@NotBlank</code>、<code>@Size</code> 等，结合 Spring Boot 的 <code>@Valid</code> 注解实现校验：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@PostMapping</span>\n<span class=\"hljs-keyword\">public</span> ResponseResult <span class=\"hljs-title function_\">createUser</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> <span class=\"hljs-meta\">@Valid</span> UserCreateRequest request)</span> {\n    userService.createUser(request);\n    <span class=\"hljs-keyword\">return</span> ResponseResult.success();\n}\n\n<span class=\"hljs-comment\">// UserCreateRequest 类</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserCreateRequest</span> {\n    <span class=\"hljs-meta\">@NotBlank(message = &quot;用户名不能为空&quot;)</span>\n    <span class=\"hljs-keyword\">private</span> String username;\n    <span class=\"hljs-meta\">@NotBlank(message = &quot;密码不能为空&quot;)</span>\n    <span class=\"hljs-meta\">@Size(min = 6, message = &quot;密码长度不能少于 6 位&quot;)</span>\n    <span class=\"hljs-keyword\">private</span> String password;\n    <span class=\"hljs-comment\">// getters and setters...</span>\n}\n</code></div></pre>\n<p>对于异常处理，统一使用 <code>@ControllerAdvice</code> 和 <code>@ExceptionHandler</code> 捕获并处理异常，返回友好的错误信息：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@ControllerAdvice</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GlobalExceptionHandler</span> {\n\n    <span class=\"hljs-meta\">@ExceptionHandler(BusinessException.class)</span>\n    <span class=\"hljs-keyword\">public</span> ResponseResult <span class=\"hljs-title function_\">handleBusinessException</span><span class=\"hljs-params\">(BusinessException e)</span> {\n        <span class=\"hljs-keyword\">return</span> ResponseResult.error(e.getCode(), e.getMessage());\n    }\n\n    <span class=\"hljs-meta\">@ExceptionHandler(Exception.class)</span>\n    <span class=\"hljs-keyword\">public</span> ResponseResult <span class=\"hljs-title function_\">handleException</span><span class=\"hljs-params\">(Exception e)</span> {\n        <span class=\"hljs-comment\">// 记录日志等操作</span>\n        <span class=\"hljs-keyword\">return</span> ResponseResult.error(<span class=\"hljs-number\">500</span>, <span class=\"hljs-string\">&quot;系统异常，请稍后重试&quot;</span>);\n    }\n}\n</code></div></pre>\n<h2><a id=\"_111\"></a>三、接口文档：及时更新促协作</h2>\n<h3><a id=\"Swagger__Knif4j__113\"></a>（一）Swagger 与 Knif4j 实践</h3>\n<p>Swagger 是非常实用的接口文档生成工具，结合 Knif4j 能让文档更美观、功能更丰富。在 Spring Boot 项目中集成：</p>\n<ol>\n<li>添加依赖：</li>\n</ol>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.github.xiaoymin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.0.3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></div></pre>\n<ol>\n<li>配置 Swagger：</li>\n</ol>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-meta\">@EnableSwagger2WebMvc</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SwaggerConfig</span> {\n\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-keyword\">public</span> Docket <span class=\"hljs-title function_\">createRestApi</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Docket</span>(DocumentationType.SWAGGER_2)\n               .apiInfo(apiInfo())\n               .select()\n               .apis(RequestHandlerSelectors.basePackage(<span class=\"hljs-string\">&quot;com.example.demo.controller&quot;</span>))\n               .paths(PathSelectors.any())\n               .build();\n    }\n\n    <span class=\"hljs-keyword\">private</span> ApiInfo <span class=\"hljs-title function_\">apiInfo</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiInfoBuilder</span>()\n               .title(<span class=\"hljs-string\">&quot;后端接口文档&quot;</span>)\n               .description(<span class=\"hljs-string\">&quot;详细接口说明&quot;</span>)\n               .version(<span class=\"hljs-string\">&quot;1.0&quot;</span>)\n               .build();\n    }\n}\n</code></div></pre>\n<p>这样，启动项目后，访问 <code>http://localhost:8080/doc.html</code> 就能看到清晰的接口文档，可在线测试接口，方便前端开发人员对接，也利于后端团队后续维护查看。</p>\n<h3><a id=\"_161\"></a>（二）文档维护要点</h3>\n<p>接口文档要随着接口的迭代及时更新，包括接口路径、请求参数、响应数据、异常情况等变化。每次接口变更后，开发人员要同步更新文档，确保文档与实际接口一致。同时，可在文档中添加接口的业务说明、使用场景等内容，让阅读者更好理解接口用途。</p>\n<h2><a id=\"_165\"></a>四、接口性能：优化调优保稳定</h2>\n<h3><a id=\"_167\"></a>（一）数据库查询优化</h3>\n<p>接口性能往往受数据库操作影响大。要合理设计数据库表结构，建立索引优化查询。比如，对于经常根据用户 ID 查询用户信息的场景，给用户表的 <code>user_id</code> 字段建立索引：</p>\n<pre><div class=\"hljs\"><code class=\"lang-sql\"><span class=\"hljs-keyword\">CREATE</span> INDEX idx_user_id <span class=\"hljs-keyword\">ON</span> <span class=\"hljs-keyword\">user</span> (user_id);\n</code></div></pre>\n<p>避免复杂的多表关联查询，必要时可通过缓存、冗余字段等方式减少数据库压力。还可以使用分页查询，限制单次查询数据量，如 <code>SELECT * FROM user LIMIT 10 OFFSET 0</code> ，防止一次性查询大量数据导致内存溢出和响应缓慢。</p>\n<h3><a id=\"_178\"></a>（二）缓存策略应用</h3>\n<p>合理使用缓存能显著提升接口性能。以 Redis 为例，对于一些不常变化的数据，如系统配置、字典数据等，可将其缓存起来。在 Spring Boot 中集成 Redis 并使用：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">\n<span class=\"hljs-meta\">@Service</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserService</span> {\n\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-keyword\">private</span> StringRedisTemplate redisTemplate;\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-keyword\">private</span> UserMapper userMapper;\n\n    <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">getUserById</span><span class=\"hljs-params\">(String userId)</span> {\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;user:&quot;</span> + userId;\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">userJson</span> <span class=\"hljs-operator\">=</span> redisTemplate.opsForValue().get(key);\n        <span class=\"hljs-keyword\">if</span> (userJson != <span class=\"hljs-literal\">null</span>) {\n            <span class=\"hljs-keyword\">return</span> JSON.parseObject(userJson, User.class);\n        }\n        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> userMapper.selectById(userId);\n        <span class=\"hljs-keyword\">if</span> (user != <span class=\"hljs-literal\">null</span>) {\n            redisTemplate.opsForValue().set(key, JSON.toJSONString(user), <span class=\"hljs-number\">30</span>, TimeUnit.MINUTES);\n        }\n        <span class=\"hljs-keyword\">return</span> user;\n    }\n}\n</code></div></pre>\n<p>这样，下次查询相同用户信息时，可直接从缓存获取，减少数据库查询次数，提升接口响应速度。但要注意缓存的更新和失效策略，避免数据不一致问题。</p>\n<h2><a id=\"_210\"></a>五、接口安全：防护措施不可少</h2>\n<h3><a id=\"_212\"></a>（一）身份认证与授权</h3>\n<p>保障接口安全，身份认证和授权是基础。可采用 JWT（JSON Web Token）方式，用户登录成功后生成 JWT，后续请求携带 JWT 进行身份验证。在 Spring Boot 中通过过滤器或拦截器实现：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JwtInterceptor</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">HandlerInterceptor</span> {\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">preHandle</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"hljs-keyword\">throws</span> Exception {\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> request.getHeader(<span class=\"hljs-string\">&quot;Authorization&quot;</span>);\n        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(token)) {\n            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n        <span class=\"hljs-comment\">// 验证 JWT 有效性</span>\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-type\">Claims</span> <span class=\"hljs-variable\">claims</span> <span class=\"hljs-operator\">=</span> Jwts.parser()\n                   .setSigningKey(SecretKeyUtil.getSecretKey())\n                   .parseClaimsJws(token.replace(<span class=\"hljs-string\">&quot;Bearer &quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>))\n                   .getBody();\n            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">userId</span> <span class=\"hljs-operator\">=</span> claims.getSubject();\n            <span class=\"hljs-comment\">// 可将用户信息存入请求属性，方便后续接口使用</span>\n            request.setAttribute(<span class=\"hljs-string\">&quot;userId&quot;</span>, userId);\n        } <span class=\"hljs-keyword\">catch</span> (Exception e) {\n            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n}\n</code></div></pre>\n<p>然后在配置类中注册拦截器，对需要认证的接口进行拦截校验。同时，结合权限控制框架（如 Spring Security、Shiro 等）实现精细的授权管理，不同角色用户访问不同接口。</p>\n<h3><a id=\"_246\"></a>（二）接口防攻击</h3>\n<p>为防止接口被恶意攻击，要采取相应措施。比如，实现接口限流，使用 Redis 的计数器或 Spring Cloud Gateway 的限流功能，限制单位时间内接口的请求次数；对重要接口进行参数加密传输，防止数据被截取篡改；验证请求来源合法性，避免非法调用等。</p>\n<p>后端开发中，接口开发与管理是一个系统工程，从设计、开发到文档、性能、安全，每个环节都影响着项目的最终表现。希望通过以上分享的实践经验，能给大家在后端接口开发的道路上提供一些借鉴和思路，让我们开发出更健壮、高效、易用的后端接口，为整个项目的成功奠定坚实基础。后续我也会持续分享更多后端开发的干货，欢迎大家关注交流，一起进步！</p>\n','# 后端开发必备！高效接口开发与管理实践全解析\n\n在后端开发的日常工作中，接口开发与管理是核心环节之一，直接影响着项目的整体质量和开发效率。作为一名后端开发者，我在长期实践中积累了不少关于接口开发与管理的经验，今天就来和大家深入分享，助力大家打造更优质、高效的后端接口。\n\n## 一、接口设计：清晰规范是基础\n\n### （一）RESTful 风格落地\n\n遵循 RESTful 风格设计接口，能让接口更具可读性和可维护性。比如，对于用户资源相关的接口：\n\n- 获取用户列表：`GET /api/users`\n- 获取单个用户：`GET /api/users/{userId}`\n- 创建用户：`POST /api/users`\n- 更新用户：`PUT /api/users/{userId}`\n- 删除用户：`DELETE /api/users/{userId}`\n\n这样的设计，客户端能直观理解接口用途，后端团队在协作和维护时也更清晰。但要注意，实际项目中需结合业务灵活调整，比如部分复杂查询场景，可合理添加查询参数，像 `GET /api/users?page=1&size=10` 实现分页查询用户列表。\n\n### （二）请求与响应结构定义\n\n明确请求参数和响应数据的格式至关重要。对于请求参数，若为 JSON 格式，要规定好字段名称、类型、是否必填等。例如用户登录接口的请求体：\n\n\n```json\n{\n    \"username\": \"string\", // 用户名，必填\n    \"password\": \"string\"  // 密码，必填\n}\n```\n\n响应数据也需统一规范，一般包含状态码、提示信息和具体数据，结构如下：\n\n\n\n```json\n{\n    \"code\": 200, // 状态码，自定义，如 200 成功，400 错误等\n    \"msg\": \"操作成功\", // 提示信息\n    \"data\": {} // 具体返回数据，根据接口业务而定\n}\n```\n\n## 二、接口开发：高效编码有技巧\n\n### （一）利用框架优势\n\n以 Spring Boot 框架为例，它提供了丰富的注解和工具，简化接口开发。比如使用 `@RestController` 和 `@RequestMapping` 系列注解快速定义接口：\n\n\n```java\n@RestController\n@RequestMapping(\"/api/users\")\npublic class UserController {\n\n    @Autowired\n    private UserService userService;\n\n    @GetMapping\n    public ResponseResult<List<User>> getUsers() {\n        List<User> userList = userService.listUsers();\n        return ResponseResult.success(userList);\n    }\n\n    // 其他接口方法...\n}\n```\n\n同时，借助 Spring Boot 的自动装配、 starters 等特性，能快速集成数据库连接、日志管理等功能，减少手动配置工作量。\n\n### （二）参数校验与异常处理\n\n为保证接口输入数据的合法性，要做好参数校验。可以使用 `javax.validation` 相关注解，如 `@NotBlank`、`@Size` 等，结合 Spring Boot 的 `@Valid` 注解实现校验：\n\n```java\n@PostMapping\npublic ResponseResult createUser(@RequestBody @Valid UserCreateRequest request) {\n    userService.createUser(request);\n    return ResponseResult.success();\n}\n\n// UserCreateRequest 类\npublic class UserCreateRequest {\n    @NotBlank(message = \"用户名不能为空\")\n    private String username;\n    @NotBlank(message = \"密码不能为空\")\n    @Size(min = 6, message = \"密码长度不能少于 6 位\")\n    private String password;\n    // getters and setters...\n}\n```\n\n对于异常处理，统一使用 `@ControllerAdvice` 和 `@ExceptionHandler` 捕获并处理异常，返回友好的错误信息：\n\n\n```java\n@ControllerAdvice\npublic class GlobalExceptionHandler {\n\n    @ExceptionHandler(BusinessException.class)\n    public ResponseResult handleBusinessException(BusinessException e) {\n        return ResponseResult.error(e.getCode(), e.getMessage());\n    }\n\n    @ExceptionHandler(Exception.class)\n    public ResponseResult handleException(Exception e) {\n        // 记录日志等操作\n        return ResponseResult.error(500, \"系统异常，请稍后重试\");\n    }\n}\n```\n\n## 三、接口文档：及时更新促协作\n\n### （一）Swagger 与 Knif4j 实践\n\nSwagger 是非常实用的接口文档生成工具，结合 Knif4j 能让文档更美观、功能更丰富。在 Spring Boot 项目中集成：\n\n1. 添加依赖：\n\n\n\n```xml\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-spring-boot-starter</artifactId>\n    <version>3.0.3</version>\n</dependency>\n```\n\n1. 配置 Swagger：\n\n\n\n\n```java\n@Configuration\n@EnableSwagger2WebMvc\npublic class SwaggerConfig {\n\n    @Bean\n    public Docket createRestApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n               .apiInfo(apiInfo())\n               .select()\n               .apis(RequestHandlerSelectors.basePackage(\"com.example.demo.controller\"))\n               .paths(PathSelectors.any())\n               .build();\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n               .title(\"后端接口文档\")\n               .description(\"详细接口说明\")\n               .version(\"1.0\")\n               .build();\n    }\n}\n```\n\n这样，启动项目后，访问 `http://localhost:8080/doc.html` 就能看到清晰的接口文档，可在线测试接口，方便前端开发人员对接，也利于后端团队后续维护查看。\n\n### （二）文档维护要点\n\n接口文档要随着接口的迭代及时更新，包括接口路径、请求参数、响应数据、异常情况等变化。每次接口变更后，开发人员要同步更新文档，确保文档与实际接口一致。同时，可在文档中添加接口的业务说明、使用场景等内容，让阅读者更好理解接口用途。\n\n## 四、接口性能：优化调优保稳定\n\n### （一）数据库查询优化\n\n接口性能往往受数据库操作影响大。要合理设计数据库表结构，建立索引优化查询。比如，对于经常根据用户 ID 查询用户信息的场景，给用户表的 `user_id` 字段建立索引：\n\n\n```sql\nCREATE INDEX idx_user_id ON user (user_id);\n```\n\n避免复杂的多表关联查询，必要时可通过缓存、冗余字段等方式减少数据库压力。还可以使用分页查询，限制单次查询数据量，如 `SELECT * FROM user LIMIT 10 OFFSET 0` ，防止一次性查询大量数据导致内存溢出和响应缓慢。\n\n### （二）缓存策略应用\n\n合理使用缓存能显著提升接口性能。以 Redis 为例，对于一些不常变化的数据，如系统配置、字典数据等，可将其缓存起来。在 Spring Boot 中集成 Redis 并使用：\n\n\n```java\n\n@Service\npublic class UserService {\n\n    @Autowired\n    private StringRedisTemplate redisTemplate;\n    @Autowired\n    private UserMapper userMapper;\n\n    public User getUserById(String userId) {\n        String key = \"user:\" + userId;\n        String userJson = redisTemplate.opsForValue().get(key);\n        if (userJson != null) {\n            return JSON.parseObject(userJson, User.class);\n        }\n        User user = userMapper.selectById(userId);\n        if (user != null) {\n            redisTemplate.opsForValue().set(key, JSON.toJSONString(user), 30, TimeUnit.MINUTES);\n        }\n        return user;\n    }\n}\n```\n\n这样，下次查询相同用户信息时，可直接从缓存获取，减少数据库查询次数，提升接口响应速度。但要注意缓存的更新和失效策略，避免数据不一致问题。\n\n## 五、接口安全：防护措施不可少\n\n### （一）身份认证与授权\n\n保障接口安全，身份认证和授权是基础。可采用 JWT（JSON Web Token）方式，用户登录成功后生成 JWT，后续请求携带 JWT 进行身份验证。在 Spring Boot 中通过过滤器或拦截器实现：\n```java\n\npublic class JwtInterceptor implements HandlerInterceptor {\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        String token = request.getHeader(\"Authorization\");\n        if (StringUtils.isEmpty(token)) {\n            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n            return false;\n        }\n        // 验证 JWT 有效性\n        try {\n            Claims claims = Jwts.parser()\n                   .setSigningKey(SecretKeyUtil.getSecretKey())\n                   .parseClaimsJws(token.replace(\"Bearer \", \"\"))\n                   .getBody();\n            String userId = claims.getSubject();\n            // 可将用户信息存入请求属性，方便后续接口使用\n            request.setAttribute(\"userId\", userId);\n        } catch (Exception e) {\n            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n            return false;\n        }\n        return true;\n    }\n}\n```\n\n然后在配置类中注册拦截器，对需要认证的接口进行拦截校验。同时，结合权限控制框架（如 Spring Security、Shiro 等）实现精细的授权管理，不同角色用户访问不同接口。\n\n### （二）接口防攻击\n\n为防止接口被恶意攻击，要采取相应措施。比如，实现接口限流，使用 Redis 的计数器或 Spring Cloud Gateway 的限流功能，限制单位时间内接口的请求次数；对重要接口进行参数加密传输，防止数据被截取篡改；验证请求来源合法性，避免非法调用等。\n\n后端开发中，接口开发与管理是一个系统工程，从设计、开发到文档、性能、安全，每个环节都影响着项目的最终表现。希望通过以上分享的实践经验，能给大家在后端接口开发的道路上提供一些借鉴和思路，让我们开发出更健壮、高效、易用的后端接口，为整个项目的成功奠定坚实基础。后续我也会持续分享更多后端开发的干货，欢迎大家关注交流，一起进步！',1,0,1,1,0,0,'',0,'',NULL,'2025-06-29 19:40:59','2025-07-10 22:32:12'),(345,1,16,'从代码到生产！Jenkins+Docker 自动化部署全流程实战','http://113.45.240.54:9092/article-cover/c95b390a-0a63-4136-aa99-8b07627bf7ed_freecompress-Neat-Admin 管理系统 (5).png','从代码到生产！Jenkins+Docker 自动化部署全流程实战','<h3><a id=\"JenkinsDocker__0\"></a><strong>从代码到生产！Jenkins+Docker 自动化部署全流程实战</strong></h3>\n<h4><a id=\"_2\"></a>一、传统部署痛点与自动化价值</h4>\n<ul>\n<li><strong>手动部署坑点</strong>：环境不一致、依赖冲突、部署耗时（某电商案例：手动部署一次需 4 小时，自动化后 15 分钟）</li>\n<li><strong>自动化核心优势</strong>：一致性（Docker 镜像保证环境统一）、可追溯（Jenkins 记录每次部署日志）、高可用（蓝绿部署 + 滚动更新）</li>\n</ul>\n<h4><a id=\"JenkinsDocker__7\"></a>二、Jenkins+Docker 部署架构搭建</h4>\n<ol>\n<li><strong>环境准备</strong></li>\n</ol>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 安装Jenkins（CentOS）</span>\nyum install java-11-openjdk\nwget https://get.jenkins.io/war-stable/2.387.1/jenkins.war\njava -jar jenkins.war --httpPort=8080\n\n<span class=\"hljs-comment\"># 安装Docker</span>\nyum install docker-ce docker-ce-cli containerd.io\nsystemctl start docker\n</code></div></pre>\n<ol>\n<li><strong>Jenkinsfile 核心配置</strong></li>\n</ol>\n<pre><div class=\"hljs\"><code class=\"lang-groovy\">pipeline {\n    agent any\n    environment {\n        DOCKER_IMAGE = <span class=\"hljs-string\">&#x27;myapp:latest&#x27;</span>\n        CONTAINER_NAME = <span class=\"hljs-string\">&#x27;myapp-container&#x27;</span>\n    }\n    stages {\n        stage(<span class=\"hljs-string\">&#x27;Build&#x27;</span>) {\n            steps {\n                sh <span class=\"hljs-string\">&#x27;mvn clean package -DskipTests&#x27;</span>\n                sh <span class=\"hljs-string\">&quot;docker build -t ${DOCKER_IMAGE} .&quot;</span>\n            }\n        }\n        stage(<span class=\"hljs-string\">&#x27;Deploy&#x27;</span>) {\n            steps {\n                sh <span class=\"hljs-string\">&quot;docker stop ${CONTAINER_NAME} || true&quot;</span>\n                sh <span class=\"hljs-string\">&quot;docker rm ${CONTAINER_NAME} || true&quot;</span>\n                sh <span class=\"hljs-string\">&quot;docker run -d --name ${CONTAINER_NAME} -p 8080:8080 ${DOCKER_IMAGE}&quot;</span>\n            }\n        }\n    }\n}\n</code></div></pre>\n<h4><a id=\"_55\"></a>三、进阶部署策略</h4>\n<ul>\n<li><strong>蓝绿部署实现</strong>：维护两套环境（blue/green），通过 Nginx 切换流量</li>\n<li><strong>健康检查机制</strong>：Jenkins 部署后自动调用<code>curl -f http://localhost:8080/health</code>，失败则回滚</li>\n<li><strong>实战案例</strong>：某 SaaS 平台使用该架构，部署效率提升 90%，故障恢复时间从 30 分钟缩短至 5 分钟</li>\n</ul>\n','### **从代码到生产！Jenkins+Docker 自动化部署全流程实战**\n\n#### 一、传统部署痛点与自动化价值\n\n- **手动部署坑点**：环境不一致、依赖冲突、部署耗时（某电商案例：手动部署一次需 4 小时，自动化后 15 分钟）\n- **自动化核心优势**：一致性（Docker 镜像保证环境统一）、可追溯（Jenkins 记录每次部署日志）、高可用（蓝绿部署 + 滚动更新）\n\n#### 二、Jenkins+Docker 部署架构搭建\n\n1. **环境准备**\n\n\n\n\n\n```bash\n# 安装Jenkins（CentOS）\nyum install java-11-openjdk\nwget https://get.jenkins.io/war-stable/2.387.1/jenkins.war\njava -jar jenkins.war --httpPort=8080\n\n# 安装Docker\nyum install docker-ce docker-ce-cli containerd.io\nsystemctl start docker\n```\n\n1. **Jenkinsfile 核心配置**\n\n\n\n```groovy\npipeline {\n    agent any\n    environment {\n        DOCKER_IMAGE = \'myapp:latest\'\n        CONTAINER_NAME = \'myapp-container\'\n    }\n    stages {\n        stage(\'Build\') {\n            steps {\n                sh \'mvn clean package -DskipTests\'\n                sh \"docker build -t ${DOCKER_IMAGE} .\"\n            }\n        }\n        stage(\'Deploy\') {\n            steps {\n                sh \"docker stop ${CONTAINER_NAME} || true\"\n                sh \"docker rm ${CONTAINER_NAME} || true\"\n                sh \"docker run -d --name ${CONTAINER_NAME} -p 8080:8080 ${DOCKER_IMAGE}\"\n            }\n        }\n    }\n}\n```\n\n#### 三、进阶部署策略\n\n- **蓝绿部署实现**：维护两套环境（blue/green），通过 Nginx 切换流量\n- **健康检查机制**：Jenkins 部署后自动调用`curl -f http://localhost:8080/health`，失败则回滚\n- **实战案例**：某 SaaS 平台使用该架构，部署效率提升 90%，故障恢复时间从 30 分钟缩短至 5 分钟',1,0,1,1,0,0,'',0,'',NULL,'2025-06-29 19:47:12','2025-07-10 22:31:52'),(346,1,19,'网络爬虫：Scrapy 框架实战 + 反爬对抗全攻略','http://113.45.240.54:9092/article-cover/158ceb0a-bf49-494a-9d4a-128488109c1b_freecompress-Neat-Admin 管理系统 (12).png','网络爬虫：Scrapy 框架实战 + 反爬对抗全攻略','<h3><a id=\"Scrapy____0\"></a><strong>网络爬虫：Scrapy 框架实战 + 反爬对抗全攻略</strong></h3>\n<h4><a id=\"Scrapy__2\"></a>一、Scrapy 核心架构解析</h4>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-comment\"># 爬虫核心组件（以爬取豆瓣电影为例）</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DoubanMovieSpider</span>(scrapy.Spider):\n    name = <span class=\"hljs-string\">&#x27;douban_movie&#x27;</span>\n    start_urls = [<span class=\"hljs-string\">&#x27;https://movie.douban.com/top250&#x27;</span>]\n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">parse</span>(<span class=\"hljs-params\">self, response</span>):\n        <span class=\"hljs-keyword\">for</span> movie <span class=\"hljs-keyword\">in</span> response.css(<span class=\"hljs-string\">&#x27;.grid_view li&#x27;</span>):\n            <span class=\"hljs-keyword\">yield</span> {\n                <span class=\"hljs-string\">&#x27;title&#x27;</span>: movie.css(<span class=\"hljs-string\">&#x27;.title::text&#x27;</span>).get(),\n                <span class=\"hljs-string\">&#x27;rating&#x27;</span>: movie.css(<span class=\"hljs-string\">&#x27;.rating_num::text&#x27;</span>).get(),\n                <span class=\"hljs-string\">&#x27;quote&#x27;</span>: movie.css(<span class=\"hljs-string\">&#x27;.quote .inq::text&#x27;</span>).get()\n            }\n        next_url = response.css(<span class=\"hljs-string\">&#x27;.next a::attr(href)&#x27;</span>).get()\n        <span class=\"hljs-keyword\">if</span> next_url:\n            <span class=\"hljs-keyword\">yield</span> response.follow(next_url, self.parse)\n</code></div></pre>\n<h4><a id=\"_24\"></a>二、反爬对抗策略</h4>\n<p><strong>请求头伪装</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-comment\"># settings.py配置</span>\nUSER_AGENT = <span class=\"hljs-string\">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36&#x27;</span>\nDEFAULT_REQUEST_HEADERS = {\n    <span class=\"hljs-string\">&#x27;Accept&#x27;</span>: <span class=\"hljs-string\">&#x27;text/html,application/xhtml+xml,application/xml&#x27;</span>,\n    <span class=\"hljs-string\">&#x27;Accept-Language&#x27;</span>: <span class=\"hljs-string\">&#x27;zh-CN,zh;q=0.9,en;q=0.8&#x27;</span>,\n    <span class=\"hljs-string\">&#x27;Referer&#x27;</span>: <span class=\"hljs-string\">&#x27;https://movie.douban.com/&#x27;</span>\n}\n</code></div></pre>\n<p>IP 代理池实现</p>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-comment\"># middleware.py</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ProxyMiddleware</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">process_request</span>(<span class=\"hljs-params\">self, request, spider</span>):\n        proxy = self.get_random_proxy()  <span class=\"hljs-comment\"># 从代理池获取IP</span>\n        request.meta[<span class=\"hljs-string\">&#x27;proxy&#x27;</span>] = <span class=\"hljs-string\">f&#x27;http://<span class=\"hljs-subst\">{proxy}</span>&#x27;</span>\n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_random_proxy</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-comment\"># 从Redis或API获取代理IP（示例）</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;127.0.0.1:8080&#x27;</span>\n</code></div></pre>\n<h4><a id=\"_56\"></a>三、分布式爬虫方案</h4>\n<ul>\n<li>\n<p>Scrapy-Redis 架构</p>\n<p>：</p>\n<ol>\n<li>用 Redis 存储待爬 URL 和已爬指纹</li>\n<li>多台服务器共享任务队列</li>\n</ol>\n</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 启动3个爬虫节点</span>\nscrapy crawl douban_movie -s REDIS_HOST=192.168.1.100 -s REDIS_PORT=6379\n</code></div></pre>\n','### **网络爬虫：Scrapy 框架实战 + 反爬对抗全攻略**\n\n#### 一、Scrapy 核心架构解析\n\n\n\n```python\n# 爬虫核心组件（以爬取豆瓣电影为例）\nclass DoubanMovieSpider(scrapy.Spider):\n    name = \'douban_movie\'\n    start_urls = [\'https://movie.douban.com/top250\']\n    \n    def parse(self, response):\n        for movie in response.css(\'.grid_view li\'):\n            yield {\n                \'title\': movie.css(\'.title::text\').get(),\n                \'rating\': movie.css(\'.rating_num::text\').get(),\n                \'quote\': movie.css(\'.quote .inq::text\').get()\n            }\n        next_url = response.css(\'.next a::attr(href)\').get()\n        if next_url:\n            yield response.follow(next_url, self.parse)\n```\n\n#### 二、反爬对抗策略\n\n**请求头伪装**\n\n\n\n```python\n# settings.py配置\nUSER_AGENT = \'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36\'\nDEFAULT_REQUEST_HEADERS = {\n    \'Accept\': \'text/html,application/xhtml+xml,application/xml\',\n    \'Accept-Language\': \'zh-CN,zh;q=0.9,en;q=0.8\',\n    \'Referer\': \'https://movie.douban.com/\'\n}\n```\n\nIP 代理池实现\n\n\n\n```python\n# middleware.py\nclass ProxyMiddleware:\n    def process_request(self, request, spider):\n        proxy = self.get_random_proxy()  # 从代理池获取IP\n        request.meta[\'proxy\'] = f\'http://{proxy}\'\n    \n    def get_random_proxy(self):\n        # 从Redis或API获取代理IP（示例）\n        return \'127.0.0.1:8080\'\n```\n\n#### 三、分布式爬虫方案\n\n- Scrapy-Redis 架构\n\n  ：\n\n  1. 用 Redis 存储待爬 URL 和已爬指纹\n  2. 多台服务器共享任务队列\n\n\n\n```bash\n# 启动3个爬虫节点\nscrapy crawl douban_movie -s REDIS_HOST=192.168.1.100 -s REDIS_PORT=6379\n```',1,0,1,1,0,0,'',0,'',NULL,'2025-06-29 19:49:40','2025-07-10 22:31:11'),(347,1,28,'数据库：MySQL 高性能优化从入门到实战','http://113.45.240.54:9092/article-cover/56490de4-489f-41bf-bb59-c2243e247ffe_mysql.png','MySQL 高性能优化从入门到实战','<h3><a id=\"MySQL__0\"></a><strong>数据库：MySQL 高性能优化从入门到实战</strong></h3>\n<h4><a id=\"_2\"></a>一、索引优化核心技巧</h4>\n<ol>\n<li><strong>复合索引最佳实践</strong></li>\n</ol>\n<pre><div class=\"hljs\"><code class=\"lang-sql\"><span class=\"hljs-comment\">-- 为订单表创建复合索引（商家ID+状态+时间）</span>\n<span class=\"hljs-keyword\">CREATE</span> INDEX idx_shop_status_time <span class=\"hljs-keyword\">ON</span> orders(shop_id, status, create_time);\n\n<span class=\"hljs-comment\">-- 高效查询示例</span>\n<span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> orders \n<span class=\"hljs-keyword\">WHERE</span> shop_id<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1001</span> <span class=\"hljs-keyword\">AND</span> status<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;paid&#x27;</span> <span class=\"hljs-keyword\">AND</span> create_time<span class=\"hljs-operator\">&gt;</span><span class=\"hljs-string\">&#x27;2024-01-01&#x27;</span>;\n</code></div></pre>\n<ol>\n<li><strong>索引失效场景</strong></li>\n</ol>\n<ul>\n<li>对字段使用函数：<code>WHERE DATE(create_time)=\'2024-01-01\'</code>（应改为<code>WHERE create_time&gt;=\'2024-01-01\' AND create_time&lt;\'2024-01-02\'</code>）</li>\n<li>模糊查询以通配符开头：<code>WHERE name LIKE \'%admin\'</code></li>\n</ul>\n<h4><a id=\"_20\"></a>二、查询优化实战</h4>\n<ol>\n<li><strong>慢查询定位</strong></li>\n</ol>\n<pre><div class=\"hljs\"><code class=\"lang-sql\"><span class=\"hljs-comment\">-- 开启慢查询日志</span>\n<span class=\"hljs-keyword\">SET</span> <span class=\"hljs-keyword\">GLOBAL</span> slow_query_log <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">SET</span> <span class=\"hljs-keyword\">GLOBAL</span> long_query_time <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">-- 超过1秒的查询记录</span>\n\n<span class=\"hljs-comment\">-- 分析慢查询</span>\n<span class=\"hljs-keyword\">SELECT</span> query, <span class=\"hljs-built_in\">COUNT</span>(<span class=\"hljs-operator\">*</span>) <span class=\"hljs-keyword\">as</span> cnt, <span class=\"hljs-built_in\">SUM</span>(<span class=\"hljs-type\">time</span>) <span class=\"hljs-keyword\">as</span> total_time\n<span class=\"hljs-keyword\">FROM</span> mysql.slow_log\n<span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> query <span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> total_time <span class=\"hljs-keyword\">DESC</span> LIMIT <span class=\"hljs-number\">10</span>;\n</code></div></pre>\n<p>​    2.<strong>分页查询优化</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-sql\"><span class=\"hljs-comment\">-- 传统分页（offset过大时性能差）</span>\n<span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> users LIMIT <span class=\"hljs-number\">10000</span>, <span class=\"hljs-number\">20</span>;\n\n<span class=\"hljs-comment\">-- 优化方案（通过主键定位）</span>\n<span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> users \n<span class=\"hljs-keyword\">WHERE</span> id <span class=\"hljs-operator\">&gt;</span> (<span class=\"hljs-keyword\">SELECT</span> id <span class=\"hljs-keyword\">FROM</span> users LIMIT <span class=\"hljs-number\">10000</span>, <span class=\"hljs-number\">1</span>)\nLIMIT <span class=\"hljs-number\">20</span>;\n</code></div></pre>\n<h4><a id=\"_49\"></a>三、架构优化方案</h4>\n<ul>\n<li><strong>读写分离配置（主从复制）</strong></li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-ini\"><span class=\"hljs-comment\"># 主库my.cnf</span>\n<span class=\"hljs-attr\">server-id</span>=<span class=\"hljs-number\">1</span>\n<span class=\"hljs-attr\">log-bin</span>=mysql-bin\n<span class=\"hljs-attr\">binlog-format</span>=ROW\n\n<span class=\"hljs-comment\"># 从库my.cnf</span>\n<span class=\"hljs-attr\">server-id</span>=<span class=\"hljs-number\">2</span>\n<span class=\"hljs-attr\">relay-log</span>=mysql-relay\n<span class=\"hljs-attr\">read-only</span>=<span class=\"hljs-number\">1</span>\n</code></div></pre>\n','### **数据库：MySQL 高性能优化从入门到实战**\n\n#### 一、索引优化核心技巧\n\n1. **复合索引最佳实践**\n\n```sql\n-- 为订单表创建复合索引（商家ID+状态+时间）\nCREATE INDEX idx_shop_status_time ON orders(shop_id, status, create_time);\n\n-- 高效查询示例\nSELECT * FROM orders \nWHERE shop_id=1001 AND status=\'paid\' AND create_time>\'2024-01-01\';\n```\n\n1. **索引失效场景**\n\n- 对字段使用函数：`WHERE DATE(create_time)=\'2024-01-01\'`（应改为`WHERE create_time>=\'2024-01-01\' AND create_time<\'2024-01-02\'`）\n- 模糊查询以通配符开头：`WHERE name LIKE \'%admin\'`\n\n#### 二、查询优化实战\n\n1. **慢查询定位**\n\n```sql\n-- 开启慢查询日志\nSET GLOBAL slow_query_log = 1;\nSET GLOBAL long_query_time = 1;  -- 超过1秒的查询记录\n\n-- 分析慢查询\nSELECT query, COUNT(*) as cnt, SUM(time) as total_time\nFROM mysql.slow_log\nGROUP BY query ORDER BY total_time DESC LIMIT 10;\n```\n\n​    2.**分页查询优化**\n\n\n\n```sql\n-- 传统分页（offset过大时性能差）\nSELECT * FROM users LIMIT 10000, 20;\n\n-- 优化方案（通过主键定位）\nSELECT * FROM users \nWHERE id > (SELECT id FROM users LIMIT 10000, 1)\nLIMIT 20;\n```\n\n#### 三、架构优化方案\n\n- **读写分离配置（主从复制）**\n\n\n\n```ini\n# 主库my.cnf\nserver-id=1\nlog-bin=mysql-bin\nbinlog-format=ROW\n\n# 从库my.cnf\nserver-id=2\nrelay-log=mysql-relay\nread-only=1\n```',1,0,1,1,0,0,'',0,'',NULL,'2025-06-29 19:51:38','2025-07-10 22:33:05'),(348,1,31,'Vue3 Composition API 实战与性能优化','http://113.45.240.54:9092/article-cover/dc1eb341-c6a9-4869-a311-b17ef0c3367d_04879535dfa9f7db21623729b5f0ef48.jpeg','Vue3 Composition API 实战与性能优化','<h3><a id=\"Vue3_Composition_API__0\"></a><strong>Vue3 Composition API 实战与性能优化</strong></h3>\n<h4><a id=\"Composition_API__2\"></a>一、Composition API 核心特性</h4>\n<p><strong>组合式函数封装</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\n&lt;!-- 使用组合式函数管理计数器 --&gt;\n<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span>&gt;</span><span class=\"language-javascript\">\n<span class=\"hljs-keyword\">import</span> { ref, onMounted } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useCounter</span>(<span class=\"hljs-params\">initialValue = <span class=\"hljs-number\">0</span></span>) {\n    <span class=\"hljs-keyword\">const</span> count = <span class=\"hljs-title function_\">ref</span>(initialValue);\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">increment</span> = (<span class=\"hljs-params\"></span>) =&gt; count.<span class=\"hljs-property\">value</span>++;\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">decrement</span> = (<span class=\"hljs-params\"></span>) =&gt; count.<span class=\"hljs-property\">value</span>--;\n    <span class=\"hljs-keyword\">return</span> { count, increment, decrement };\n}\n\n<span class=\"hljs-keyword\">const</span> { count, increment } = <span class=\"hljs-title function_\">useCounter</span>(<span class=\"hljs-number\">5</span>);\n\n<span class=\"hljs-title function_\">onMounted</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;计数器已初始化&#x27;</span>);\n});\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n\n<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;increment&quot;</span>&gt;</span>+1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{{ count }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span>\n</code></div></pre>\n<h4><a id=\"_36\"></a>二、性能优化手段</h4>\n<ol>\n<li><strong>组件缓存与按需加载</strong></li>\n</ol>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\n&lt;!-- 缓存频繁切换的组件 --&gt;\n<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">keep-alive</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">component</span> <span class=\"hljs-attr\">:is</span>=<span class=\"hljs-string\">&quot;currentComponent&quot;</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">keep-alive</span>&gt;</span></span>\n\n&lt;!-- 路由组件按需加载 --&gt;\n<span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-title function_\">createRouter</span>({\n  <span class=\"hljs-attr\">routes</span>: [\n    {\n      <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/user&#x27;</span>,\n      <span class=\"hljs-attr\">component</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">import</span>(<span class=\"hljs-string\">&#x27;./views/UserView.vue&#x27;</span>)\n    }\n  ]\n})\n</code></div></pre>\n<p>2.<strong>响应式优化</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\n<span class=\"hljs-comment\">// 避免无效响应式转换</span>\n<span class=\"hljs-keyword\">const</span> state = <span class=\"hljs-title function_\">reactive</span>({\n  <span class=\"hljs-comment\">// 只对需要响应式的字段进行包装</span>\n  <span class=\"hljs-attr\">formData</span>: {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;张三&#x27;</span>,\n    <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">25</span>\n  },\n  <span class=\"hljs-comment\">// 大数据集使用普通对象</span>\n  <span class=\"hljs-attr\">largeList</span>: []\n})\n\n<span class=\"hljs-comment\">// 批量更新数据</span>\n<span class=\"hljs-keyword\">import</span> { pauseTracking, resumeTracking } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n<span class=\"hljs-title function_\">pauseTracking</span>();\nstate.<span class=\"hljs-property\">formData</span>.<span class=\"hljs-property\">name</span> = <span class=\"hljs-string\">&#x27;李四&#x27;</span>;\nstate.<span class=\"hljs-property\">formData</span>.<span class=\"hljs-property\">age</span> = <span class=\"hljs-number\">26</span>;\n<span class=\"hljs-title function_\">resumeTracking</span>();\n</code></div></pre>\n','### **Vue3 Composition API 实战与性能优化**\n\n#### 一、Composition API 核心特性\n\n**组合式函数封装**\n\n\n\n```js\n\n<!-- 使用组合式函数管理计数器 -->\n<script setup>\nimport { ref, onMounted } from \'vue\';\n\nfunction useCounter(initialValue = 0) {\n    const count = ref(initialValue);\n    const increment = () => count.value++;\n    const decrement = () => count.value--;\n    return { count, increment, decrement };\n}\n\nconst { count, increment } = useCounter(5);\n\nonMounted(() => {\n    console.log(\'计数器已初始化\');\n});\n</script>\n\n<template>\n  <div>\n    <button @click=\"increment\">+1</button>\n    <span>{{ count }}</span>\n  </div>\n</template>\n```\n\n#### 二、性能优化手段\n\n1. **组件缓存与按需加载**\n\n\n\n```js\n\n<!-- 缓存频繁切换的组件 -->\n<keep-alive>\n  <component :is=\"currentComponent\" />\n</keep-alive>\n\n<!-- 路由组件按需加载 -->\nconst router = createRouter({\n  routes: [\n    {\n      path: \'/user\',\n      component: () => import(\'./views/UserView.vue\')\n    }\n  ]\n})\n```\n\n  2.**响应式优化**\n\n\n\n```js\n\n// 避免无效响应式转换\nconst state = reactive({\n  // 只对需要响应式的字段进行包装\n  formData: {\n    name: \'张三\',\n    age: 25\n  },\n  // 大数据集使用普通对象\n  largeList: []\n})\n\n// 批量更新数据\nimport { pauseTracking, resumeTracking } from \'vue\';\npauseTracking();\nstate.formData.name = \'李四\';\nstate.formData.age = 26;\nresumeTracking();\n```',1,0,1,1,1,1,'',0,'',NULL,'2025-06-29 19:52:54','2025-07-08 22:52:47'),(349,1,38,'C 语言：内存管理深度解析与实战技巧','http://113.45.240.54:9092/article-cover/13f6f272-e71c-407d-a44d-214daa25939c_7.jpg','C 语言：内存管理深度解析与实战技巧','<h3><a id=\"C__0\"></a><strong>C 语言：内存管理深度解析与实战技巧</strong></h3>\n<h4><a id=\"_2\"></a>一、内存分配方式对比</h4>\n<table>\n<thead>\n<tr>\n<th>分配方式</th>\n<th>示例代码</th>\n<th>生命周期</th>\n<th>应用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>栈分配</td>\n<td><code>int a = 10;</code></td>\n<td>函数结束释放</td>\n<td>局部变量、函数参数</td>\n</tr>\n<tr>\n<td>堆分配</td>\n<td><code>int* p = malloc(sizeof(int));</code></td>\n<td>手动 free 释放</td>\n<td>动态数据结构（链表、数组）</td>\n</tr>\n<tr>\n<td>静态分配</td>\n<td><code>static int b = 20;</code></td>\n<td>程序结束释放</td>\n<td>全局变量、静态变量</td>\n</tr>\n</tbody>\n</table>\n<h4><a id=\"_10\"></a>二、内存泄漏防治</h4>\n<ol>\n<li><strong>野指针问题</strong></li>\n</ol>\n<pre><div class=\"hljs\"><code class=\"lang-c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">dangerous</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-type\">int</span>* p = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\n    *p = <span class=\"hljs-number\">10</span>;\n    <span class=\"hljs-built_in\">free</span>(p);\n    <span class=\"hljs-comment\">// 危险！p成为野指针</span>\n    *p = <span class=\"hljs-number\">20</span>;  <span class=\"hljs-comment\">// 未定义行为</span>\n}\n\n<span class=\"hljs-comment\">// 安全写法</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">safe</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-type\">int</span>* p = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\n    *p = <span class=\"hljs-number\">10</span>;\n    <span class=\"hljs-built_in\">free</span>(p);\n    p = <span class=\"hljs-literal\">NULL</span>;  <span class=\"hljs-comment\">// 置为NULL避免野指针</span>\n}\n</code></div></pre>\n<ol>\n<li><strong>内存泄漏检测</strong></li>\n</ol>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 使用valgrind检测</span>\nvalgrind --leak-check=full ./myprogram\n\n<span class=\"hljs-comment\"># 输出示例</span>\n==4231== 100 bytes <span class=\"hljs-keyword\">in</span> 1 blocks are definitely lost <span class=\"hljs-keyword\">in</span> loss record 1 of 1\n==4231==    at 0x4C2DB80: malloc (<span class=\"hljs-keyword\">in</span> /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==4231==    by 0x108913: main (<span class=\"hljs-keyword\">in</span> ./myprogram)\n</code></div></pre>\n<h4><a id=\"_44\"></a>三、高性能内存管理技巧</h4>\n<ul>\n<li><strong>内存池实现思路</strong></li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-c\"><span class=\"hljs-comment\">// 简易内存池示例</span>\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> {</span>\n    <span class=\"hljs-type\">void</span>* start;       <span class=\"hljs-comment\">// 内存池起始地址</span>\n    <span class=\"hljs-type\">void</span>* end;         <span class=\"hljs-comment\">// 内存池结束地址</span>\n    <span class=\"hljs-type\">void</span>* current;     <span class=\"hljs-comment\">// 当前分配位置</span>\n} MemoryPool;\n\nMemoryPool* <span class=\"hljs-title function_\">create_pool</span><span class=\"hljs-params\">(<span class=\"hljs-type\">size_t</span> size)</span> {\n    MemoryPool* pool = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(MemoryPool));\n    pool-&gt;start = pool-&gt;current = <span class=\"hljs-built_in\">malloc</span>(size);\n    pool-&gt;end = (<span class=\"hljs-type\">char</span>*)pool-&gt;start + size;\n    <span class=\"hljs-keyword\">return</span> pool;\n}\n\n<span class=\"hljs-type\">void</span>* <span class=\"hljs-title function_\">pool_alloc</span><span class=\"hljs-params\">(MemoryPool* pool, <span class=\"hljs-type\">size_t</span> size)</span> {\n    <span class=\"hljs-type\">void</span>* result = pool-&gt;current;\n    pool-&gt;current = (<span class=\"hljs-type\">char</span>*)pool-&gt;current + size;\n    <span class=\"hljs-keyword\">if</span> (pool-&gt;current &gt; pool-&gt;end) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;  <span class=\"hljs-comment\">// 内存不足</span>\n    <span class=\"hljs-keyword\">return</span> result;\n}\n</code></div></pre>\n','### **C 语言：内存管理深度解析与实战技巧**\n\n#### 一、内存分配方式对比\n\n| 分配方式 | 示例代码                        | 生命周期       | 应用场景                   |\n| -------- | ------------------------------- | -------------- | -------------------------- |\n| 栈分配   | `int a = 10;`                   | 函数结束释放   | 局部变量、函数参数         |\n| 堆分配   | `int* p = malloc(sizeof(int));` | 手动 free 释放 | 动态数据结构（链表、数组） |\n| 静态分配 | `static int b = 20;`            | 程序结束释放   | 全局变量、静态变量         |\n\n#### 二、内存泄漏防治\n\n1. **野指针问题**\n\n```c\nvoid dangerous() {\n    int* p = malloc(sizeof(int));\n    *p = 10;\n    free(p);\n    // 危险！p成为野指针\n    *p = 20;  // 未定义行为\n}\n\n// 安全写法\nvoid safe() {\n    int* p = malloc(sizeof(int));\n    *p = 10;\n    free(p);\n    p = NULL;  // 置为NULL避免野指针\n}\n```\n\n1. **内存泄漏检测**\n\n```bash\n# 使用valgrind检测\nvalgrind --leak-check=full ./myprogram\n\n# 输出示例\n==4231== 100 bytes in 1 blocks are definitely lost in loss record 1 of 1\n==4231==    at 0x4C2DB80: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==4231==    by 0x108913: main (in ./myprogram)\n```\n\n#### 三、高性能内存管理技巧\n\n- **内存池实现思路**\n\n\n\n```c\n// 简易内存池示例\ntypedef struct {\n    void* start;       // 内存池起始地址\n    void* end;         // 内存池结束地址\n    void* current;     // 当前分配位置\n} MemoryPool;\n\nMemoryPool* create_pool(size_t size) {\n    MemoryPool* pool = malloc(sizeof(MemoryPool));\n    pool->start = pool->current = malloc(size);\n    pool->end = (char*)pool->start + size;\n    return pool;\n}\n\nvoid* pool_alloc(MemoryPool* pool, size_t size) {\n    void* result = pool->current;\n    pool->current = (char*)pool->current + size;\n    if (pool->current > pool->end) return NULL;  // 内存不足\n    return result;\n}\n```',1,0,1,1,0,0,'',0,'',NULL,'2025-06-29 19:54:22','2025-07-10 22:28:21'),(350,1,40,'C++：现代 C++17 特性实战与性能优化','http://113.45.240.54:9092/article-cover/13bfb4bb-791d-4ea7-a58c-8aafff3db37f_freecompress-Neat-Admin 管理系统 (17).png','C++：现代 C++17 特性实战与性能优化','<h3><a id=\"C_C17__0\"></a><strong>C++：现代 C++17 特性实战与性能优化</strong></h3>\n<h4><a id=\"_2\"></a>一、新特性提升开发效率</h4>\n<p><strong>结构化绑定（Structured Binding）</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;tuple&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">auto</span> user = std::<span class=\"hljs-built_in\">make_tuple</span>(<span class=\"hljs-string\">&quot;张三&quot;</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">1.75</span>);\n    <span class=\"hljs-comment\">// 传统方式</span>\n    std::string name = std::<span class=\"hljs-built_in\">get</span>&lt;<span class=\"hljs-number\">0</span>&gt;(user);\n    <span class=\"hljs-type\">int</span> age = std::<span class=\"hljs-built_in\">get</span>&lt;<span class=\"hljs-number\">1</span>&gt;(user);\n    <span class=\"hljs-type\">double</span> height = std::<span class=\"hljs-built_in\">get</span>&lt;<span class=\"hljs-number\">2</span>&gt;(user);\n    \n    <span class=\"hljs-comment\">// C++17结构化绑定</span>\n    <span class=\"hljs-keyword\">auto</span> [name1, age1, height1] = user;\n    std::cout &lt;&lt; name1 &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; age1 &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; height1 &lt;&lt; std::endl;\n}\n</code></div></pre>\n<p><strong>折叠表达式（Fold Expressions）</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-cpp\"><span class=\"hljs-comment\">// 可变参数模板求和</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span>... Args&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">sum</span><span class=\"hljs-params\">(Args... args)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> (args + ...);  <span class=\"hljs-comment\">// 折叠表达式展开为 args1 + args2 + ... + argsN</span>\n}\n\n<span class=\"hljs-type\">int</span> total = <span class=\"hljs-built_in\">sum</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>);  <span class=\"hljs-comment\">// 结果15</span>\n</code></div></pre>\n<h4><a id=\"_42\"></a>二、性能优化核心技术</h4>\n<p><strong>移动语义与完美转发</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">String</span> {\n<span class=\"hljs-keyword\">private</span>:\n    <span class=\"hljs-type\">char</span>* data;\n    <span class=\"hljs-type\">size_t</span> length;\n    \n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-comment\">// 移动构造函数</span>\n    <span class=\"hljs-built_in\">String</span>(String&amp;&amp; other) <span class=\"hljs-keyword\">noexcept</span> \n        : <span class=\"hljs-built_in\">data</span>(other.data), <span class=\"hljs-built_in\">length</span>(other.length) {\n        other.data = <span class=\"hljs-literal\">nullptr</span>;\n        other.length = <span class=\"hljs-number\">0</span>;\n    }\n    \n    <span class=\"hljs-comment\">// 完美转发构造函数</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n    <span class=\"hljs-built_in\">String</span>(T&amp;&amp; str) : <span class=\"hljs-built_in\">length</span>(<span class=\"hljs-built_in\">strlen</span>(str)) {\n        data = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">char</span>[length + <span class=\"hljs-number\">1</span>];\n        <span class=\"hljs-built_in\">strcpy</span>(data, std::forward&lt;T&gt;(str));\n    }\n};\n</code></div></pre>\n<p><strong>并行算法优化</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;execution&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">nums</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1000000</span>, <span class=\"hljs-number\">1</span>)</span></span>;\n    <span class=\"hljs-comment\">// 串行求和</span>\n    <span class=\"hljs-type\">int</span> sum1 = std::<span class=\"hljs-built_in\">accumulate</span>(nums.<span class=\"hljs-built_in\">begin</span>(), nums.<span class=\"hljs-built_in\">end</span>(), <span class=\"hljs-number\">0</span>);\n    \n    <span class=\"hljs-comment\">// 并行求和（利用多线程）</span>\n    <span class=\"hljs-type\">int</span> sum2 = std::<span class=\"hljs-built_in\">accumulate</span>(std::execution::par, nums.<span class=\"hljs-built_in\">begin</span>(), nums.<span class=\"hljs-built_in\">end</span>(), <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></div></pre>\n','### **C++：现代 C++17 特性实战与性能优化**\n\n#### 一、新特性提升开发效率\n\n**结构化绑定（Structured Binding）**\n\n\n\n```cpp\n#include <tuple>\n#include <string>\n#include <iostream>\n\nint main() {\n    auto user = std::make_tuple(\"张三\", 25, 1.75);\n    // 传统方式\n    std::string name = std::get<0>(user);\n    int age = std::get<1>(user);\n    double height = std::get<2>(user);\n    \n    // C++17结构化绑定\n    auto [name1, age1, height1] = user;\n    std::cout << name1 << \" \" << age1 << \" \" << height1 << std::endl;\n}\n```\n\n\n\n**折叠表达式（Fold Expressions）**\n\n\n\n```cpp\n// 可变参数模板求和\ntemplate <typename... Args>\nint sum(Args... args) {\n    return (args + ...);  // 折叠表达式展开为 args1 + args2 + ... + argsN\n}\n\nint total = sum(1, 2, 3, 4, 5);  // 结果15\n```\n\n#### 二、性能优化核心技术\n\n**移动语义与完美转发**\n\n```cpp\nclass String {\nprivate:\n    char* data;\n    size_t length;\n    \npublic:\n    // 移动构造函数\n    String(String&& other) noexcept \n        : data(other.data), length(other.length) {\n        other.data = nullptr;\n        other.length = 0;\n    }\n    \n    // 完美转发构造函数\n    template <typename T>\n    String(T&& str) : length(strlen(str)) {\n        data = new char[length + 1];\n        strcpy(data, std::forward<T>(str));\n    }\n};\n```\n\n**并行算法优化**\n\n\n\n```cpp\n#include <algorithm>\n#include <vector>\n#include <execution>\n\nint main() {\n    std::vector<int> nums(1000000, 1);\n    // 串行求和\n    int sum1 = std::accumulate(nums.begin(), nums.end(), 0);\n    \n    // 并行求和（利用多线程）\n    int sum2 = std::accumulate(std::execution::par, nums.begin(), nums.end(), 0);\n    return 0;\n}\n```',1,0,1,1,0,0,'',0,'',NULL,'2025-06-29 19:56:11','2025-07-08 22:46:38'),(351,1,17,'微信公众号扫码登录','http://113.45.240.54:9092/article-cover/fb6a09be-cb3d-47be-8c3b-b218dab910e7_weixin.jpg','微信公众号扫码登录简化登录流程，用户无需输入账号密码，手机扫码即登，省时省力。其通过服务端认证，规避密码传输风险，依托微信安全体系保障账号安全。同时能引导用户关注公众号，助力引流与用户互动，在便捷、安全与运营融合上优势显著。','<p>微信公众号扫码登录：Spring Boot 集成微信公众号扫码登录</p>\n<p><a href=\"https://www.bilibili.com/video/BV12x8Lz1Ekc\" target=\"_blank\">【码云星链】演示视频</a><br />\n一、极致便捷，告别繁琐输入​<br />\n传统登录方式往往要求用户手动输入冗长的用户名与复杂密码，不仅耗时费力，还容易因记错信息而导致登录失败。微信公众号扫码登录则极大简化了这一流程。​<br />\n用户仅需掏出手机，打开微信的扫一扫功能，对准屏幕上的二维码轻轻一扫，几秒钟内便能无缝登录应用。整个过程一气呵成，无需记忆复杂账号密码，完美契合快节奏的现代生活，尤其适合那些追求便捷、渴望快速进入应用的用户。​<br />\n二、多重保障，筑牢安全防线​<br />\n从安全维度审视，微信公众号扫码登录有着显著优势。扫码登录时，身份认证在服务端严谨完成，避免了用户密码在传输过程中可能遭遇的泄露风险。​<br />\n而且，以微信公众号扫码登录为例，网站仅需获取一个用于识别用户身份的标识，无需存储用户的敏感信息，有效降低了信息泄露隐患。再加上微信本身极为成熟的安全防护体系，对用户账号全方位保驾护航，进一步提升了登录过程的安全性，让用户使用起来安心无忧。​<br />\n三、深度融合，提升用户粘性​<br />\n微信公众号扫码登录不仅是简单的登录手段，还巧妙实现了与公众号的深度联动。当用户通过扫码登录，系统可引导用户关注公众号，为公众号高效引流，增加粉丝数量。​<br />\n而公众号作为与用户紧密沟通的桥梁，能及时推送应用的新功能、优惠活动等资讯，提升用户对应用的关注度与参与度，增强用户粘性，形成应用与用户之间的良性互动循环。​<br />\n四、原理剖析，洞察运行机制​<br />\n要深入理解微信公众号扫码登录，需明晰其背后涉及的参与方及工作流程。这一过程主要涉及用户、浏览器、网站服务端、微信服务端四方。​<br />\n用户作为发起者，点击登录后扫描二维码；浏览器负责展示二维码，并持续轮询扫码状态；</p>\n','微信公众号扫码登录：Spring Boot 集成微信公众号扫码登录\n\n[【码云星链】演示视频](https://www.bilibili.com/video/BV12x8Lz1Ekc)\n一、极致便捷，告别繁琐输入​\n传统登录方式往往要求用户手动输入冗长的用户名与复杂密码，不仅耗时费力，还容易因记错信息而导致登录失败。微信公众号扫码登录则极大简化了这一流程。​\n用户仅需掏出手机，打开微信的扫一扫功能，对准屏幕上的二维码轻轻一扫，几秒钟内便能无缝登录应用。整个过程一气呵成，无需记忆复杂账号密码，完美契合快节奏的现代生活，尤其适合那些追求便捷、渴望快速进入应用的用户。​\n二、多重保障，筑牢安全防线​\n从安全维度审视，微信公众号扫码登录有着显著优势。扫码登录时，身份认证在服务端严谨完成，避免了用户密码在传输过程中可能遭遇的泄露风险。​\n而且，以微信公众号扫码登录为例，网站仅需获取一个用于识别用户身份的标识，无需存储用户的敏感信息，有效降低了信息泄露隐患。再加上微信本身极为成熟的安全防护体系，对用户账号全方位保驾护航，进一步提升了登录过程的安全性，让用户使用起来安心无忧。​\n三、深度融合，提升用户粘性​\n微信公众号扫码登录不仅是简单的登录手段，还巧妙实现了与公众号的深度联动。当用户通过扫码登录，系统可引导用户关注公众号，为公众号高效引流，增加粉丝数量。​\n而公众号作为与用户紧密沟通的桥梁，能及时推送应用的新功能、优惠活动等资讯，提升用户对应用的关注度与参与度，增强用户粘性，形成应用与用户之间的良性互动循环。​\n四、原理剖析，洞察运行机制​\n要深入理解微信公众号扫码登录，需明晰其背后涉及的参与方及工作流程。这一过程主要涉及用户、浏览器、网站服务端、微信服务端四方。​\n用户作为发起者，点击登录后扫描二维码；浏览器负责展示二维码，并持续轮询扫码状态；',1,1,1,1,1,1,'',0,'',NULL,'2025-06-29 19:57:51','2025-07-28 16:41:33'),(352,1,43,'LLVM 架构解析与自定义编译器开发','http://113.45.240.54:9092/article-cover/18bdedd1-a533-4e9d-92aa-996ad2a85cb2_freecompress-Neat-Admin 管理系统 (14).png','LLVM 架构解析与自定义编译器开发','<h3><a id=\"LLVM__0\"></a><strong>LLVM 架构解析与自定义编译器开发</strong></h3>\n<h4><a id=\"LLVM__2\"></a>一、LLVM 核心组件架构</h4>\n<pre><div class=\"hljs\"><code class=\"lang-plaintext\">┌──────────────┐    ┌──────────────┐    ┌──────────────┐\n│  Frontend    │───→│  Optimizer   │───→│  Backend     │\n│  (Clang/LLVM)│    │  (LLVM IR)   │    │  (Code Gen)  │\n└──────────────┘    └──────────────┘    └──────────────┘\n       │               │                   │\n       ▼               ▼                   ▼\n┌──────────────┐    ┌──────────────┐    ┌──────────────┐\n│  Source Code │    │  Intermediate│    │  Machine Code│\n│  (C/C++/Swift)│    │  Representation(IR)│  (x86/ARM)   │\n└──────────────┘    └──────────────┘    └──────────────┘\n</code></div></pre>\n<h4><a id=\"_19\"></a>二、自定义编译器实战</h4>\n<ol>\n<li><strong>编写词法分析器（Lexer）</strong></li>\n</ol>\n<pre><div class=\"hljs\"><code class=\"lang-cpp\"><span class=\"hljs-comment\">// 简易计算器词法分析器</span>\n<span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">TokenType</span> {\n    TOKEN_NUMBER, TOKEN_PLUS, TOKEN_MINUS,\n    TOKEN_MUL, TOKEN_DIV, TOKEN_LPAREN,\n    TOKEN_RPAREN, TOKEN_EOF\n};\n\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Token</span> {\n    TokenType type;\n    std::string text;\n    <span class=\"hljs-type\">double</span> value;  <span class=\"hljs-comment\">// 数字字面量值</span>\n};\n\n<span class=\"hljs-function\">Token <span class=\"hljs-title\">get_next_token</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::string&amp; text)</span> </span>{\n    <span class=\"hljs-comment\">// 解析字符流生成Token（简化实现）</span>\n    <span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">&#x27;+&#x27;</span>) <span class=\"hljs-keyword\">return</span> {TOKEN_PLUS, <span class=\"hljs-string\">&quot;+&quot;</span>};\n    <span class=\"hljs-comment\">// ...其他Token解析</span>\n}\n</code></div></pre>\n<ol>\n<li><strong>构建 LLVM IR 模块</strong></li>\n</ol>\n<pre><div class=\"hljs\"><code class=\"lang-cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;llvm/IR/LLVMContext.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;llvm/IR/Module.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;llvm/IR/Function.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;llvm/IR/BasicBlock.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;llvm/IR/Instructions.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    llvm::LLVMContext context;\n    llvm::Module* <span class=\"hljs-keyword\">module</span> = <span class=\"hljs-keyword\">new</span> llvm::<span class=\"hljs-built_in\">Module</span>(<span class=\"hljs-string\">&quot;Calculator&quot;</span>, context);\n    \n    <span class=\"hljs-comment\">// 定义main函数</span>\n    llvm::FunctionType* mainType = llvm::FunctionType::<span class=\"hljs-built_in\">get</span>(\n        llvm::Type::<span class=\"hljs-built_in\">getInt32Ty</span>(context), <span class=\"hljs-literal\">false</span>);\n    llvm::Function* mainFunc = llvm::Function::<span class=\"hljs-built_in\">Create</span>(\n        mainType, llvm::Function::ExternalLinkage, <span class=\"hljs-string\">&quot;main&quot;</span>, <span class=\"hljs-keyword\">module</span>);\n    \n    <span class=\"hljs-comment\">// 创建基本块</span>\n    llvm::BasicBlock* bb = llvm::BasicBlock::<span class=\"hljs-built_in\">Create</span>(\n        context, <span class=\"hljs-string\">&quot;entry&quot;</span>, mainFunc);\n    \n    <span class=\"hljs-comment\">// 添加计算指令（示例：return 42）</span>\n    llvm::ReturnInst::<span class=\"hljs-built_in\">Create</span>(context, llvm::ConstantInt::<span class=\"hljs-built_in\">get</span>(\n        llvm::Type::<span class=\"hljs-built_in\">getInt32Ty</span>(context), <span class=\"hljs-number\">42</span>), bb);\n    \n    <span class=\"hljs-comment\">// 输出IR</span>\n    <span class=\"hljs-keyword\">module</span>-&gt;<span class=\"hljs-built_in\">print</span>(llvm::<span class=\"hljs-built_in\">errs</span>(), <span class=\"hljs-literal\">nullptr</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></div></pre>\n','### **LLVM 架构解析与自定义编译器开发**\n\n#### 一、LLVM 核心组件架构\n\n\n\n```plaintext\n┌──────────────┐    ┌──────────────┐    ┌──────────────┐\n│  Frontend    │───→│  Optimizer   │───→│  Backend     │\n│  (Clang/LLVM)│    │  (LLVM IR)   │    │  (Code Gen)  │\n└──────────────┘    └──────────────┘    └──────────────┘\n       │               │                   │\n       ▼               ▼                   ▼\n┌──────────────┐    ┌──────────────┐    ┌──────────────┐\n│  Source Code │    │  Intermediate│    │  Machine Code│\n│  (C/C++/Swift)│    │  Representation(IR)│  (x86/ARM)   │\n└──────────────┘    └──────────────┘    └──────────────┘\n```\n\n#### 二、自定义编译器实战\n\n1. **编写词法分析器（Lexer）**\n\n\n\n```cpp\n// 简易计算器词法分析器\nenum TokenType {\n    TOKEN_NUMBER, TOKEN_PLUS, TOKEN_MINUS,\n    TOKEN_MUL, TOKEN_DIV, TOKEN_LPAREN,\n    TOKEN_RPAREN, TOKEN_EOF\n};\n\nstruct Token {\n    TokenType type;\n    std::string text;\n    double value;  // 数字字面量值\n};\n\nToken get_next_token(const std::string& text) {\n    // 解析字符流生成Token（简化实现）\n    if (text[i] == \'+\') return {TOKEN_PLUS, \"+\"};\n    // ...其他Token解析\n}\n```\n\n1. **构建 LLVM IR 模块**\n\n\n\n```cpp\n#include <llvm/IR/LLVMContext.h>\n#include <llvm/IR/Module.h>\n#include <llvm/IR/Function.h>\n#include <llvm/IR/BasicBlock.h>\n#include <llvm/IR/Instructions.h>\n\nint main() {\n    llvm::LLVMContext context;\n    llvm::Module* module = new llvm::Module(\"Calculator\", context);\n    \n    // 定义main函数\n    llvm::FunctionType* mainType = llvm::FunctionType::get(\n        llvm::Type::getInt32Ty(context), false);\n    llvm::Function* mainFunc = llvm::Function::Create(\n        mainType, llvm::Function::ExternalLinkage, \"main\", module);\n    \n    // 创建基本块\n    llvm::BasicBlock* bb = llvm::BasicBlock::Create(\n        context, \"entry\", mainFunc);\n    \n    // 添加计算指令（示例：return 42）\n    llvm::ReturnInst::Create(context, llvm::ConstantInt::get(\n        llvm::Type::getInt32Ty(context), 42), bb);\n    \n    // 输出IR\n    module->print(llvm::errs(), nullptr);\n    return 0;\n}\n```',1,0,1,1,0,0,'',0,'',NULL,'2025-06-29 19:59:06','2025-07-08 22:45:09'),(353,1,44,'Linux：性能优化工具与实战案例','http://113.45.240.54:9092/article-cover/dc3c9e8d-9050-40c0-9562-75b7428f2132_freecompress-Neat-Admin 管理系统 (9).png','Linux：性能优化工具与实战案例','<h3><a id=\"Linux_0\"></a><strong>Linux：性能优化工具与实战案例</strong></h3>\n<h4><a id=\"_2\"></a>一、系统性能监控三剑客</h4>\n<p><strong>top 进阶用法</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 按CPU使用率排序（按P键）</span>\ntop -o cpu\n\n<span class=\"hljs-comment\"># 监控指定进程（PID=1234）</span>\ntop -p 1234\n\n<span class=\"hljs-comment\"># 输出示例</span>\ntop - 14:30:23 up 1 day, 22:10,  2 <span class=\"hljs-built_in\">users</span>,  load average: 0.51, 0.62, 0.71\nTasks: 246 total,   1 running, 245 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  0.5 us,  0.3 sy,  0.0 ni, 99.0 <span class=\"hljs-built_in\">id</span>,  0.1 wa,  0.0 hi,  0.1 si,  0.0 st\nKiB Mem : 16384512 total, 14328080 free,  1020460 used,   108464 buffers\nKiB Swap: 32764996 total, 32764996 free,        0 used. 13514708 cached Mem\n</code></div></pre>\n<p><strong>htop 交互式优化</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 启动htop并监控CPU核心</span>\nhtop -d 2 -C\n\n<span class=\"hljs-comment\"># 快捷键操作：</span>\n<span class=\"hljs-comment\"># F6: 按进程排序方式切换</span>\n<span class=\"hljs-comment\"># F9: 向进程发送信号</span>\n<span class=\"hljs-comment\"># F10: 退出</span>\n</code></div></pre>\n<h4><a id=\"IO__39\"></a>二、I/O 性能优化实战</h4>\n<p><strong>iostat 分析磁盘瓶颈</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 每5秒采样一次，共采样3次</span>\niostat -x 5 3\n\n<span class=\"hljs-comment\"># 关键指标解释：</span>\n<span class=\"hljs-comment\"># await: 平均I/O等待时间（ms）</span>\n<span class=\"hljs-comment\"># svctm: 平均I/O服务时间（ms）</span>\n<span class=\"hljs-comment\"># %util: 设备利用率（接近100%表示瓶颈）</span>\n</code></div></pre>\n<p><strong>磁盘调度算法调整</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 查看当前调度算法</span>\n<span class=\"hljs-built_in\">cat</span> /sys/block/sda/queue/scheduler\n<span class=\"hljs-comment\"># 输出示例：[mq-deadline] kyber bfq</span>\n\n<span class=\"hljs-comment\"># 修改为bfq算法（适合数据库场景）</span>\n<span class=\"hljs-built_in\">echo</span> bfq &gt; /sys/block/sda/queue/scheduler\n</code></div></pre>\n','### **Linux：性能优化工具与实战案例**\n\n#### 一、系统性能监控三剑客\n\n\n\n**top 进阶用法**\n\n```bash\n# 按CPU使用率排序（按P键）\ntop -o cpu\n\n# 监控指定进程（PID=1234）\ntop -p 1234\n\n# 输出示例\ntop - 14:30:23 up 1 day, 22:10,  2 users,  load average: 0.51, 0.62, 0.71\nTasks: 246 total,   1 running, 245 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  0.5 us,  0.3 sy,  0.0 ni, 99.0 id,  0.1 wa,  0.0 hi,  0.1 si,  0.0 st\nKiB Mem : 16384512 total, 14328080 free,  1020460 used,   108464 buffers\nKiB Swap: 32764996 total, 32764996 free,        0 used. 13514708 cached Mem\n```\n\n\n\n**htop 交互式优化**\n\n```bash\n# 启动htop并监控CPU核心\nhtop -d 2 -C\n\n# 快捷键操作：\n# F6: 按进程排序方式切换\n# F9: 向进程发送信号\n# F10: 退出\n```\n\n\n\n#### 二、I/O 性能优化实战\n\n\n\n**iostat 分析磁盘瓶颈**\n\n```bash\n# 每5秒采样一次，共采样3次\niostat -x 5 3\n\n# 关键指标解释：\n# await: 平均I/O等待时间（ms）\n# svctm: 平均I/O服务时间（ms）\n# %util: 设备利用率（接近100%表示瓶颈）\n```\n\n\n\n**磁盘调度算法调整**\n\n```bash\n# 查看当前调度算法\ncat /sys/block/sda/queue/scheduler\n# 输出示例：[mq-deadline] kyber bfq\n\n# 修改为bfq算法（适合数据库场景）\necho bfq > /sys/block/sda/queue/scheduler\n```\n\n',1,0,1,1,0,0,'',0,'',NULL,'2025-06-29 20:00:52','2025-07-08 22:44:48'),(354,1,46,'Python：异步编程与 asyncio 实战指南','http://113.45.240.54:9092/article-cover/dc43beb6-e067-4245-8edc-e4181ab36120_freecompress-Neat-Admin 管理系统 (20).png','Python：异步编程与 asyncio 实战指南','<h3><a id=\"Python_asyncio__0\"></a><strong>Python：异步编程与 asyncio 实战指南</strong></h3>\n<h4><a id=\"asyncawait__2\"></a>一、async/await 核心语法</h4>\n<ol>\n<li><strong>异步函数基本结构</strong></li>\n</ol>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fetch_data</span>():\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;开始获取数据...&quot;</span>)\n    <span class=\"hljs-comment\"># 模拟异步I/O操作</span>\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">return</span> {<span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;张三&quot;</span>, <span class=\"hljs-string\">&quot;age&quot;</span>: <span class=\"hljs-number\">25</span>}\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;主函数开始&quot;</span>)\n    <span class=\"hljs-comment\"># 并发执行多个异步任务</span>\n    task1 = fetch_data()\n    task2 = fetch_data()\n    \n    <span class=\"hljs-comment\"># 等待任务完成</span>\n    result1, result2 = <span class=\"hljs-keyword\">await</span> asyncio.gather(task1, task2)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;结果1: <span class=\"hljs-subst\">{result1}</span>&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;结果2: <span class=\"hljs-subst\">{result2}</span>&quot;</span>)\n\n<span class=\"hljs-comment\"># 运行主函数</span>\nasyncio.run(main())\n</code></div></pre>\n<h4><a id=\"_30\"></a>二、高性能异步方案</h4>\n<p><strong>异步爬虫示例（爬取 100 个网页）</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-keyword\">import</span> aiohttp\n<span class=\"hljs-keyword\">import</span> asyncio\n<span class=\"hljs-keyword\">import</span> time\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-params\">session, url</span>):\n    <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">with</span> session.get(url) <span class=\"hljs-keyword\">as</span> response:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">await</span> response.text()\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n    urls = [<span class=\"hljs-string\">f&quot;https://api.example.com/page/<span class=\"hljs-subst\">{i}</span>&quot;</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">101</span>)]\n    start_time = time.time()\n    \n    <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">with</span> aiohttp.ClientSession() <span class=\"hljs-keyword\">as</span> session:\n        tasks = [fetch(session, url) <span class=\"hljs-keyword\">for</span> url <span class=\"hljs-keyword\">in</span> urls]\n        results = <span class=\"hljs-keyword\">await</span> asyncio.gather(*tasks)\n    \n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;耗时: <span class=\"hljs-subst\">{time.time() - start_time:<span class=\"hljs-number\">.2</span>f}</span>秒&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;获取<span class=\"hljs-subst\">{<span class=\"hljs-built_in\">len</span>(results)}</span>个页面&quot;</span>)\n\n<span class=\"hljs-comment\"># 异步爬虫耗时约2秒（传统同步方式需100秒）</span>\n</code></div></pre>\n<h4><a id=\"_57\"></a>三、异步框架对比与选择</h4>\n<table>\n<thead>\n<tr>\n<th>框架</th>\n<th>特点</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>asyncio</td>\n<td>内置标准库，原生支持</td>\n<td>通用异步任务、网络 IO</td>\n</tr>\n<tr>\n<td>Tornado</td>\n<td>高性能 Web 框架，非阻塞模式</td>\n<td>Web 服务、长轮询</td>\n</tr>\n<tr>\n<td>FastAPI</td>\n<td>基于 asyncio，高性能 API 框架</td>\n<td>异步 RESTful 服务</td>\n</tr>\n<tr>\n<td>Scrapy</td>\n<td>异步爬虫框架</td>\n<td>大规模网络数据抓取</td>\n</tr>\n</tbody>\n</table>\n','### **Python：异步编程与 asyncio 实战指南**\n\n#### 一、async/await 核心语法\n\n1. **异步函数基本结构**\n\n```python\nimport asyncio\n\nasync def fetch_data():\n    print(\"开始获取数据...\")\n    # 模拟异步I/O操作\n    await asyncio.sleep(1)\n    return {\"name\": \"张三\", \"age\": 25}\n\nasync def main():\n    print(\"主函数开始\")\n    # 并发执行多个异步任务\n    task1 = fetch_data()\n    task2 = fetch_data()\n    \n    # 等待任务完成\n    result1, result2 = await asyncio.gather(task1, task2)\n    print(f\"结果1: {result1}\")\n    print(f\"结果2: {result2}\")\n\n# 运行主函数\nasyncio.run(main())\n```\n\n#### 二、高性能异步方案\n\n**异步爬虫示例（爬取 100 个网页）**\n\n```python\nimport aiohttp\nimport asyncio\nimport time\n\nasync def fetch(session, url):\n    async with session.get(url) as response:\n        return await response.text()\n\nasync def main():\n    urls = [f\"https://api.example.com/page/{i}\" for i in range(1, 101)]\n    start_time = time.time()\n    \n    async with aiohttp.ClientSession() as session:\n        tasks = [fetch(session, url) for url in urls]\n        results = await asyncio.gather(*tasks)\n    \n    print(f\"耗时: {time.time() - start_time:.2f}秒\")\n    print(f\"获取{len(results)}个页面\")\n\n# 异步爬虫耗时约2秒（传统同步方式需100秒）\n```\n\n#### 三、异步框架对比与选择\n\n| 框架    | 特点                          | 适用场景              |\n| ------- | ----------------------------- | --------------------- |\n| asyncio | 内置标准库，原生支持          | 通用异步任务、网络 IO |\n| Tornado | 高性能 Web 框架，非阻塞模式   | Web 服务、长轮询      |\n| FastAPI | 基于 asyncio，高性能 API 框架 | 异步 RESTful 服务     |\n| Scrapy  | 异步爬虫框架                  | 大规模网络数据抓取    |',1,0,1,1,0,0,'',0,'',NULL,'2025-06-29 20:02:15','2025-07-08 22:44:19'),(355,1,39,'大模型时代下的 AI 技术演进与应用突破','http://113.45.240.54:9092/article-cover/a9fe7e06-cb69-4a58-8b56-3d0aa08cac6d_freecompress-Neat-Admin 管理系统 (4).png','大模型时代下的 AI 技术演进与应用突破','<h3><a id=\"_AI__0\"></a><strong>大模型时代下的 AI 技术演进与应用突破</strong></h3>\n<h4><a id=\"AI__2\"></a>一、从专用模型到通用智能：AI 技术迭代路径</h4>\n<ol>\n<li>\n<p><strong>预训练模型的革命</strong></p>\n<ul>\n<li>\n<p>GPT-4、Claude 3 等大语言模型实现「零样本学习」，如输入「用 Python 写一个自动生成诗歌的程序」即可直接输出可运行代码：</p>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-keyword\">import</span> random\n<span class=\"hljs-keyword\">from</span> transformers <span class=\"hljs-keyword\">import</span> GPT2LMHeadModel, GPT2Tokenizer\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">generate_poem</span>(<span class=\"hljs-params\">theme</span>):\n    tokenizer = GPT2Tokenizer.from_pretrained(<span class=\"hljs-string\">&quot;gpt2&quot;</span>)\n    model = GPT2LMHeadModel.from_pretrained(<span class=\"hljs-string\">&quot;gpt2&quot;</span>)\n    input_ids = tokenizer.encode(<span class=\"hljs-string\">f&quot;写诗主题：<span class=\"hljs-subst\">{theme}</span>\\n诗：&quot;</span>, return_tensors=<span class=\"hljs-string\">&quot;pt&quot;</span>)\n    output = model.generate(input_ids, max_length=<span class=\"hljs-number\">100</span>, num_return_sequences=<span class=\"hljs-number\">1</span>)\n    poem = tokenizer.decode(output[<span class=\"hljs-number\">0</span>], skip_special_tokens=<span class=\"hljs-literal\">True</span>)\n    <span class=\"hljs-keyword\">return</span> poem\n</code></div></pre>\n</li>\n<li>\n<p>多模态模型（如 Google PaLM-E）实现文本、图像、视频的联合理解，可操控机器人完成「看到桌子上的苹果并捡起来」的跨模态任务。</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>模型小型化与边缘部署</strong></p>\n<ul>\n<li>LLaMA 3、Qwen-7B 等轻量化模型通过量化技术（如 4-bit 量化）可在消费级 GPU（RTX 4060）甚至手机端运行，某电商 APP 使用轻量化推荐模型使推荐延迟从 500ms 降至 80ms。</li>\n</ul>\n</li>\n</ol>\n<h4><a id=\"_29\"></a>二、行业应用突破案例</h4>\n<ol>\n<li><strong>医疗 AI 的临床落地</strong>\n<ul>\n<li>斯坦福医学团队使用 Vision Transformer 分析胸部 CT，肺癌检测准确率达 97.3%，超过初级放射科医生平均水平（92%）。</li>\n<li>智能问诊系统通过对话生成病历摘要，某三甲医院应用后门诊医生日均病历撰写时间从 2.5 小时缩短至 40 分钟。</li>\n</ul>\n</li>\n<li><strong>工业质检的效率革命</strong>\n<ul>\n<li>某汽车厂商部署基于 YOLOv8 的 AI 质检系统，车身焊点缺陷检测速度达 30 帧 / 秒，漏检率 &lt; 0.1%，较传统人工质检效率提升 15 倍。</li>\n</ul>\n</li>\n</ol>\n<h4><a id=\"_37\"></a>三、技术挑战与伦理思考</h4>\n<ul>\n<li><strong>幻觉问题</strong>：大模型在医学咨询中可能生成错误用药建议，需通过「检索增强生成（RAG）」技术结合知识库验证（如 PubMed 数据库对接）。</li>\n<li><strong>数据隐私</strong>：某教育 AI 平台因训练数据包含学生隐私信息被罚款 2300 万美元，推动《AI 训练数据合规指南》出台。</li>\n</ul>\n','### **大模型时代下的 AI 技术演进与应用突破**\n\n#### 一、从专用模型到通用智能：AI 技术迭代路径\n\n1. **预训练模型的革命**\n\n   - GPT-4、Claude 3 等大语言模型实现「零样本学习」，如输入「用 Python 写一个自动生成诗歌的程序」即可直接输出可运行代码：\n\n     \n\n     ```python\n     import random\n     from transformers import GPT2LMHeadModel, GPT2Tokenizer\n     \n     def generate_poem(theme):\n         tokenizer = GPT2Tokenizer.from_pretrained(\"gpt2\")\n         model = GPT2LMHeadModel.from_pretrained(\"gpt2\")\n         input_ids = tokenizer.encode(f\"写诗主题：{theme}\\n诗：\", return_tensors=\"pt\")\n         output = model.generate(input_ids, max_length=100, num_return_sequences=1)\n         poem = tokenizer.decode(output[0], skip_special_tokens=True)\n         return poem\n     ```\n\n   - 多模态模型（如 Google PaLM-E）实现文本、图像、视频的联合理解，可操控机器人完成「看到桌子上的苹果并捡起来」的跨模态任务。\n\n2. **模型小型化与边缘部署**\n\n   - LLaMA 3、Qwen-7B 等轻量化模型通过量化技术（如 4-bit 量化）可在消费级 GPU（RTX 4060）甚至手机端运行，某电商 APP 使用轻量化推荐模型使推荐延迟从 500ms 降至 80ms。\n\n#### 二、行业应用突破案例\n\n1. **医疗 AI 的临床落地**\n   - 斯坦福医学团队使用 Vision Transformer 分析胸部 CT，肺癌检测准确率达 97.3%，超过初级放射科医生平均水平（92%）。\n   - 智能问诊系统通过对话生成病历摘要，某三甲医院应用后门诊医生日均病历撰写时间从 2.5 小时缩短至 40 分钟。\n2. **工业质检的效率革命**\n   - 某汽车厂商部署基于 YOLOv8 的 AI 质检系统，车身焊点缺陷检测速度达 30 帧 / 秒，漏检率 < 0.1%，较传统人工质检效率提升 15 倍。\n\n#### 三、技术挑战与伦理思考\n\n- **幻觉问题**：大模型在医学咨询中可能生成错误用药建议，需通过「检索增强生成（RAG）」技术结合知识库验证（如 PubMed 数据库对接）。\n- **数据隐私**：某教育 AI 平台因训练数据包含学生隐私信息被罚款 2300 万美元，推动《AI 训练数据合规指南》出台。\n\n\n\n',1,0,1,1,0,0,'',0,'',NULL,'2025-06-29 20:06:19','2025-07-08 23:03:14'),(356,1,39,'AI 驱动的自动化机器学习（AutoML）实战指南','http://113.45.240.54:9092/article-cover/42cb07a8-0048-4e39-bd70-c1eaea2e88b1_freecompress-Neat-Admin 管理系统 (5).png','AI 驱动的自动化机器学习（AutoML）实战指南','<h3><a id=\"AI_AutoML_0\"></a><strong>AI 驱动的自动化机器学习（AutoML）实战指南</strong></h3>\n<h4><a id=\"AutoML__2\"></a>一、AutoML 核心能力解析</h4>\n<ol>\n<li>\n<p><strong>特征工程自动化</strong></p>\n<ul>\n<li>自动识别数据中的类别特征（如「性别」）与连续特征（如「年龄」），某金融风控场景中，AutoML 工具自动生成的特征组合使欺诈检测 AUC 从 0.78 提升至 0.91。</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-keyword\">from</span> auto_ml <span class=\"hljs-keyword\">import</span> AutoML\n\n<span class=\"hljs-comment\"># 自动特征工程示例</span>\nautoml = AutoML()\nautoml.fit(X_train, y_train, feature_generation=<span class=\"hljs-literal\">True</span>)\nbest_features = automl.get_feature_importance()\n</code></div></pre>\n</li>\n<li>\n<p><strong>模型架构搜索</strong></p>\n<ul>\n<li>通过强化学习或贝叶斯优化自动搜索最优神经网络结构，Google AutoML Vision 在 ImageNet 图像分类任务中发现的新架构，top-1 准确率达 83.5%，接近人工设计的 ResNet-50（83.8%）。</li>\n</ul>\n</li>\n</ol>\n<h4><a id=\"_H2Oai__23\"></a>二、实战：用 H2O.ai 搭建自动化风控模型</h4>\n<ol>\n<li>\n<p><strong>数据准备与自动建模</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-keyword\">import</span> h2o\n<span class=\"hljs-keyword\">from</span> h2o.automl <span class=\"hljs-keyword\">import</span> H2OAutoML\n\nh2o.init()\ndf = h2o.import_file(<span class=\"hljs-string\">&quot;credit_risk.csv&quot;</span>)\ndf[<span class=\"hljs-string\">&quot;default&quot;</span>] = df[<span class=\"hljs-string\">&quot;default&quot;</span>].asfactor()\n\n<span class=\"hljs-comment\"># 划分训练集与测试集</span>\ntrain, test = df.split_frame(ratios=[<span class=\"hljs-number\">0.8</span>], seed=<span class=\"hljs-number\">123</span>)\n\n<span class=\"hljs-comment\"># 启动AutoML（设置最大运行时间30分钟）</span>\naml = H2OAutoML(max_runtime_secs=<span class=\"hljs-number\">1800</span>, project_name=<span class=\"hljs-string\">&quot;credit_risk&quot;</span>)\naml.train(y=<span class=\"hljs-string\">&quot;default&quot;</span>, training_frame=train, leaderboard_frame=test)\n</code></div></pre>\n</li>\n<li>\n<p><strong>模型解释与部署</strong></p>\n<ul>\n<li>AutoML 生成的 XGBoost 模型通过 SHAP 值解释各特征影响：「负债率 &gt; 30%」对违约概率的贡献度达 27.3%，「信用卡数量 &gt; 5 张」贡献度 19.1%。</li>\n<li>模型通过 H2O Driverless AI 部署为 REST API，响应延迟 &lt; 50ms，支持日均 10 万次风控查询。</li>\n</ul>\n</li>\n</ol>\n<h4><a id=\"AutoML__50\"></a>三、AutoML 的未来趋势</h4>\n<ul>\n<li><strong>低代码 / 无代码平台</strong>：如 Google Cloud AutoML、阿里云 PAI-DSW 使业务人员可通过拖拽完成 AI 建模，某零售企业非技术人员使用后，促销预测模型开发周期从 2 周缩短至 4 小时。</li>\n<li><strong>跨模态 AutoML</strong>：自动处理文本（商品描述）、图像（商品图）、时序（销售数据）的混合数据建模，某电商平台应用后，新品销量预测准确率提升 12%。</li>\n</ul>\n','### **AI 驱动的自动化机器学习（AutoML）实战指南**\n\n#### 一、AutoML 核心能力解析\n\n1. **特征工程自动化**\n\n   - 自动识别数据中的类别特征（如「性别」）与连续特征（如「年龄」），某金融风控场景中，AutoML 工具自动生成的特征组合使欺诈检测 AUC 从 0.78 提升至 0.91。\n\n   \n\n   ```python\n   from auto_ml import AutoML\n   \n   # 自动特征工程示例\n   automl = AutoML()\n   automl.fit(X_train, y_train, feature_generation=True)\n   best_features = automl.get_feature_importance()\n   ```\n\n2. **模型架构搜索**\n\n   - 通过强化学习或贝叶斯优化自动搜索最优神经网络结构，Google AutoML Vision 在 ImageNet 图像分类任务中发现的新架构，top-1 准确率达 83.5%，接近人工设计的 ResNet-50（83.8%）。\n\n#### 二、实战：用 H2O.ai 搭建自动化风控模型\n\n1. **数据准备与自动建模**\n\n   \n\n   ```python\n   import h2o\n   from h2o.automl import H2OAutoML\n   \n   h2o.init()\n   df = h2o.import_file(\"credit_risk.csv\")\n   df[\"default\"] = df[\"default\"].asfactor()\n   \n   # 划分训练集与测试集\n   train, test = df.split_frame(ratios=[0.8], seed=123)\n   \n   # 启动AutoML（设置最大运行时间30分钟）\n   aml = H2OAutoML(max_runtime_secs=1800, project_name=\"credit_risk\")\n   aml.train(y=\"default\", training_frame=train, leaderboard_frame=test)\n   ```\n\n2. **模型解释与部署**\n\n   - AutoML 生成的 XGBoost 模型通过 SHAP 值解释各特征影响：「负债率 > 30%」对违约概率的贡献度达 27.3%，「信用卡数量 > 5 张」贡献度 19.1%。\n   - 模型通过 H2O Driverless AI 部署为 REST API，响应延迟 < 50ms，支持日均 10 万次风控查询。\n\n#### 三、AutoML 的未来趋势\n\n- **低代码 / 无代码平台**：如 Google Cloud AutoML、阿里云 PAI-DSW 使业务人员可通过拖拽完成 AI 建模，某零售企业非技术人员使用后，促销预测模型开发周期从 2 周缩短至 4 小时。\n- **跨模态 AutoML**：自动处理文本（商品描述）、图像（商品图）、时序（销售数据）的混合数据建模，某电商平台应用后，新品销量预测准确率提升 12%。\n\n\n',1,0,1,1,0,0,'',0,'',NULL,'2025-06-29 20:07:02','2025-07-08 23:06:01'),(357,1,42,'生成式 AI 从技术原理到产业落地全解析','http://113.45.240.54:9092/article-cover/b4df352d-2551-45cb-bd8b-25c87ce976bf_freecompress-Neat-Admin 管理系统 (16).png','生成式 AI 从技术原理到产业落地全解析','<h3><a id=\"_AI__0\"></a><strong>生成式 AI 从技术原理到产业落地全解析</strong></h3>\n<h4><a id=\"_2\"></a>一、核心生成模型技术演进</h4>\n<ol>\n<li>\n<p><strong>扩散模型（Diffusion Models）的突破</strong></p>\n<ul>\n<li>Stable Diffusion 通过「去噪过程」生成图像：先向真实图像添加高斯噪声，再训练模型逆向去噪，某设计团队使用其生成的产品效果图，修改效率提升 40%。</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-keyword\">from</span> diffusers <span class=\"hljs-keyword\">import</span> StableDiffusionPipeline\n<span class=\"hljs-keyword\">import</span> torch\n\npipe = StableDiffusionPipeline.from_pretrained(\n    <span class=\"hljs-string\">&quot;runwayml/stable-diffusion-v1-5&quot;</span>, torch.float16\n)\npipe = pipe.to(<span class=\"hljs-string\">&quot;cuda&quot;</span>)\nimage = pipe(<span class=\"hljs-string\">&quot;未来城市夜景，赛博朋克风格&quot;</span>).images[<span class=\"hljs-number\">0</span>]\nimage.save(<span class=\"hljs-string\">&quot;cyberpunk_city.png&quot;</span>)\n</code></div></pre>\n</li>\n<li>\n<p><strong>自回归模型（Autoregressive Models）的创新</strong></p>\n<ul>\n<li>GPT-4V 通过「tokenizer+transformer」架构生成图像描述，输入汽车图片可输出：「2024 款特斯拉 Model 3，午夜银金属漆，19 英寸轮毂，全景玻璃车顶」，准确率达 91%。</li>\n</ul>\n</li>\n</ol>\n<h4><a id=\"AIGC__24\"></a>二、AIGC 产业应用全景图</h4>\n<ol>\n<li><strong>内容生产工业化</strong>\n<ul>\n<li>某网文平台用 AI 生成小说大纲与章节，配合人工润色，单月产出小说数量从 50 部增至 200 部，头部作品订阅量增长 35%。</li>\n<li>电商平台自动生成商品描述：输入「蓝色纯棉 T 恤」，AI 生成「采用新疆长绒棉，32 支精梳工艺，亲肤透气，适合夏季穿搭」等 10 种不同风格文案。</li>\n</ul>\n</li>\n<li><strong>工业设计革命</strong>\n<ul>\n<li>宝马使用 AI 生成汽车外观设计方案，某概念车型从 1000 + 人工设计稿中，AI 生成的方案被选中比例达 37%，设计周期从 6 个月缩短至 45 天。</li>\n<li>建筑领域，Midjourney 生成的建筑草图经 AutoCAD 转换后，某商业综合体方案设计成本降低 28%。</li>\n</ul>\n</li>\n</ol>\n<h4><a id=\"AIGC__33\"></a>三、AIGC 的合规与治理</h4>\n<ul>\n<li><strong>版权归属争议</strong>：美国版权局裁定 AI 生成的图片不受版权保护，某艺术家使用 AI 绘画参赛被取消资格，推动行业建立「AI 生成内容标识规范」。</li>\n<li><strong>技术伦理框架</strong>：欧盟《AI 法案》要求生成式 AI 工具需内置「水印生成」功能，某社交平台应用后，AI 伪造内容传播量下降 62%。</li>\n</ul>\n','### **生成式 AI 从技术原理到产业落地全解析**\n\n#### 一、核心生成模型技术演进\n\n1. **扩散模型（Diffusion Models）的突破**\n\n   - Stable Diffusion 通过「去噪过程」生成图像：先向真实图像添加高斯噪声，再训练模型逆向去噪，某设计团队使用其生成的产品效果图，修改效率提升 40%。\n\n   ```python\n   from diffusers import StableDiffusionPipeline\n   import torch\n   \n   pipe = StableDiffusionPipeline.from_pretrained(\n       \"runwayml/stable-diffusion-v1-5\", torch.float16\n   )\n   pipe = pipe.to(\"cuda\")\n   image = pipe(\"未来城市夜景，赛博朋克风格\").images[0]\n   image.save(\"cyberpunk_city.png\")\n   ```\n\n2. **自回归模型（Autoregressive Models）的创新**\n\n   - GPT-4V 通过「tokenizer+transformer」架构生成图像描述，输入汽车图片可输出：「2024 款特斯拉 Model 3，午夜银金属漆，19 英寸轮毂，全景玻璃车顶」，准确率达 91%。\n\n#### 二、AIGC 产业应用全景图\n\n1. **内容生产工业化**\n   - 某网文平台用 AI 生成小说大纲与章节，配合人工润色，单月产出小说数量从 50 部增至 200 部，头部作品订阅量增长 35%。\n   - 电商平台自动生成商品描述：输入「蓝色纯棉 T 恤」，AI 生成「采用新疆长绒棉，32 支精梳工艺，亲肤透气，适合夏季穿搭」等 10 种不同风格文案。\n2. **工业设计革命**\n   - 宝马使用 AI 生成汽车外观设计方案，某概念车型从 1000 + 人工设计稿中，AI 生成的方案被选中比例达 37%，设计周期从 6 个月缩短至 45 天。\n   - 建筑领域，Midjourney 生成的建筑草图经 AutoCAD 转换后，某商业综合体方案设计成本降低 28%。\n\n#### 三、AIGC 的合规与治理\n\n- **版权归属争议**：美国版权局裁定 AI 生成的图片不受版权保护，某艺术家使用 AI 绘画参赛被取消资格，推动行业建立「AI 生成内容标识规范」。\n- **技术伦理框架**：欧盟《AI 法案》要求生成式 AI 工具需内置「水印生成」功能，某社交平台应用后，AI 伪造内容传播量下降 62%。\n\n\n\n\n\n',1,0,1,1,0,0,'',0,'',NULL,'2025-06-29 20:08:09','2025-07-08 23:02:56'),(358,14,54,'1111111','http://113.45.240.54:9092/article-cover/dd664799-e537-418d-a74c-58bd52a19714_100o0x000000lfjqh56A6.jpg','111111111111111111111111111111111','<p>11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111</p>\n','11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111',1,0,0,1,0,0,'',0,'111',NULL,'2025-07-09 16:19:54','2025-07-26 20:45:43');
/*!40000 ALTER TABLE `sys_article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sys_article_like`
--

DROP TABLE IF EXISTS `sys_article_like`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sys_article_like` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `user_id` int NOT NULL COMMENT '用户id',
  `article_id` int NOT NULL COMMENT '文章id',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=28 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='文章点赞表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sys_article_like`
--

LOCK TABLES `sys_article_like` WRITE;
/*!40000 ALTER TABLE `sys_article_like` DISABLE KEYS */;
INSERT INTO `sys_article_like` VALUES (5,1,292),(6,1,300),(7,1811,332),(9,1811,296),(10,1811,298),(12,1,331),(13,1811,331),(17,4,331),(18,14,296),(20,14,358),(22,17,296),(25,16,351),(26,1,351);
/*!40000 ALTER TABLE `sys_article_like` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sys_article_tag`
--

DROP TABLE IF EXISTS `sys_article_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sys_article_tag` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `article_id` int NOT NULL COMMENT '文章id',
  `tag_id` int NOT NULL COMMENT '标签id',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2130 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='文章标签关联表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sys_article_tag`
--

LOCK TABLES `sys_article_tag` WRITE;
/*!40000 ALTER TABLE `sys_article_tag` DISABLE KEYS */;
INSERT INTO `sys_article_tag` VALUES (1436,297,66),(1437,297,103),(1438,297,104),(1786,306,125),(1787,306,126),(1788,306,127),(1789,306,128),(1790,306,129),(2006,354,116),(2007,354,118),(2008,353,18),(2009,352,109),(2010,352,120),(2013,350,120),(2027,339,162),(2028,339,168),(2029,348,12),(2030,348,120),(2033,337,162),(2034,324,120),(2037,309,163),(2038,308,18),(2039,308,63),(2040,304,120),(2041,302,109),(2042,302,110),(2043,302,111),(2044,302,112),(2045,331,118),(2046,331,161),(2047,329,12),(2048,329,159),(2049,321,136),(2050,321,173),(2051,320,13),(2052,320,63),(2053,318,159),(2054,318,161),(2055,318,161),(2056,318,162),(2057,318,163),(2058,317,158),(2059,317,120),(2060,298,145),(2061,298,144),(2062,292,1),(2063,292,12),(2064,357,134),(2065,357,135),(2066,355,163),(2067,355,134),(2070,356,134),(2071,356,145),(2072,349,120),(2074,346,116),(2075,345,59),(2076,345,32),(2079,344,13),(2080,344,1),(2081,343,118),(2082,343,135),(2085,341,162),(2086,347,31),(2087,338,162),(2088,342,145),(2089,342,162),(2121,296,1),(2127,351,145),(2128,351,163),(2129,351,1);
/*!40000 ALTER TABLE `sys_article_tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sys_category`
--

DROP TABLE IF EXISTS `sys_category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sys_category` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '名称',
  `sort` int DEFAULT NULL COMMENT '排序',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=55 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='分类表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sys_category`
--

LOCK TABLES `sys_category` WRITE;
/*!40000 ALTER TABLE `sys_category` DISABLE KEYS */;
INSERT INTO `sys_category` VALUES (16,'运维部署',1,'2024-12-22 18:59:28',NULL),(17,'后端开发',1,NULL,NULL),(19,'网络爬虫',2,NULL,'2025-07-26 20:46:08'),(20,'资源软件',3,NULL,'2025-07-26 20:46:11'),(28,'数据库',4,NULL,'2025-07-26 20:46:15'),(31,'前端开发',5,NULL,'2025-07-26 20:46:22'),(32,'博客文档',6,NULL,'2025-07-26 20:46:27'),(37,'读书文档',7,'2025-04-28 16:08:08','2025-07-26 20:46:41'),(38,'c语言',8,'2025-04-28 17:04:18','2025-07-26 20:46:45'),(39,'AI文章',9,'2025-04-28 17:04:38','2025-07-26 20:46:55'),(40,'C++',NULL,'2025-04-28 17:05:10',NULL),(41,'Java',NULL,'2025-04-28 17:28:20',NULL),(42,'AIGC',NULL,'2025-04-28 17:29:41',NULL),(43,'编译器',NULL,'2025-04-28 17:30:51',NULL),(44,'Linux',NULL,'2025-04-28 17:32:16',NULL),(45,'机器学习',NULL,'2025-04-28 17:40:51',NULL),(46,'Python ',NULL,'2025-04-28 17:41:56',NULL),(54,NULL,NULL,'2025-07-09 16:19:54',NULL);
/*!40000 ALTER TABLE `sys_category` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sys_comment`
--

DROP TABLE IF EXISTS `sys_comment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sys_comment` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '评论主键ID，自增唯一标识',
  `article_id` int NOT NULL COMMENT '关联的文章ID，表明该评论所属的文章',
  `user_id` int NOT NULL COMMENT '发表评论的用户ID',
  `reply_user_id` int DEFAULT NULL COMMENT '回复人id',
  `parent_id` int DEFAULT NULL COMMENT '父评论ID，用于实现回复评论的层级结构，若为顶级评论则为NULL',
  `content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '评论内容，使用utf8mb4字符集以支持更多字符类型',
  `like_count` int DEFAULT '0' COMMENT '点赞数，记录该评论获得的点赞数量',
  `is_stick` int DEFAULT '0' COMMENT '是否置顶',
  `ip` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT 'ip',
  `browser` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '浏览器',
  `system` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '系统',
  `ip_source` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT 'ip来源',
  `create_time` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE,
  KEY `idx_article_id` (`article_id`) USING BTREE,
  KEY `idx_user_id` (`user_id`) USING BTREE,
  KEY `idx_parent_id` (`parent_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=64 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT='评论';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sys_comment`
--

LOCK TABLES `sys_comment` WRITE;
/*!40000 ALTER TABLE `sys_comment` DISABLE KEYS */;
INSERT INTO `sys_comment` VALUES (15,1,1,9,14,'fwafwaf',0,0,'127.0.0.1',NULL,NULL,'内网IP|内网IP',NULL),(19,1,1,1,14,'sfawfwa',0,0,'127.0.0.1',NULL,NULL,'内网IP|内网IP',NULL),(20,1,1,9,14,'fawaf',0,0,'127.0.0.1',NULL,NULL,'内网IP|内网IP',NULL),(21,1,1,NULL,NULL,'![laugh](https://media.giphy.com/media/10JhviFuU2gWD6/giphy.gif)',0,0,'127.0.0.1',NULL,NULL,'内网IP|内网IP',NULL),(22,1,1,NULL,NULL,'\\![happy](https://media.giphy.com/media/XR9Dp54ZC4dji/giphy.gif)',0,0,'127.0.0.1',NULL,NULL,'内网IP|内网IP',NULL),(23,1,1,NULL,NULL,'![happy](https://media.giphy.com/media/XR9Dp54ZC4dji/giphy.gif)',0,0,'127.0.0.1',NULL,NULL,'内网IP|内网IP',NULL),(25,292,1,NULL,NULL,'<span style=\"color: #409eff\">hhhh</span>',0,0,'127.0.0.1',NULL,NULL,'内网IP|内网IP','2024-12-27 20:40:32'),(27,292,1,1809,25,'那是',0,0,'127.0.0.1',NULL,NULL,'内网IP|内网IP','2024-12-28 14:07:05'),(31,265,1,NULL,NULL,'asfsafafwf',0,0,'127.0.0.1','Chrome 131.0.0.0',NULL,'内网IP|内网IP','2024-12-31 14:48:18'),(32,332,1811,NULL,NULL,'哈哈哈哈哈哈哈哈哈',0,0,'127.0.0.1','Chrome 135.0.0.0',NULL,'内网IP|内网IP','2025-04-28 17:54:56'),(33,332,1811,1811,32,'***袜带',0,0,'127.0.0.1',NULL,NULL,'内网IP|内网IP','2025-04-28 17:55:04'),(34,298,1811,NULL,NULL,'订单创建失败<div>快修</div>',0,0,'127.0.0.1','Chrome 135.0.0.0',NULL,'内网IP|内网IP','2025-04-28 17:59:23'),(35,326,1811,NULL,NULL,'<img src=\"https://baidubox-emoji.cdn.bcebos.com/imgs/[亲吻].png\" class=\"emoji\" style=\"width: 30px; height: 30px; vertical-align: middle;\">',0,0,'127.0.0.1','Chrome 135.0.0.0',NULL,'内网IP|内网IP','2025-04-28 18:11:32'),(36,326,1811,1811,35,'<img src=\"https://baidubox-emoji.cdn.bcebos.com/imgs/[滑稽].png\" class=\"emoji\" style=\"width: 22px; height: 22px; vertical-align: middle;\">',0,0,'127.0.0.1',NULL,NULL,'内网IP|内网IP','2025-04-28 18:11:47'),(37,296,1,NULL,NULL,'1111',0,0,'127.0.0.1','Chrome 135.0.0.0',NULL,'内网IP|内网IP','2025-04-29 16:44:10'),(38,296,1,NULL,NULL,'11111',0,0,'127.0.0.1','Chrome 135.0.0.0',NULL,'内网IP|内网IP','2025-04-29 16:44:17'),(39,296,1,NULL,NULL,'11111',0,0,'127.0.0.1','Chrome 135.0.0.0',NULL,'内网IP|内网IP','2025-04-29 16:44:22'),(40,296,1,NULL,NULL,'111111111',0,0,'127.0.0.1','Chrome 135.0.0.0',NULL,'内网IP|内网IP','2025-04-29 16:44:28'),(41,296,1,NULL,NULL,'1111111',0,0,'127.0.0.1','Chrome 135.0.0.0',NULL,'内网IP|内网IP','2025-04-29 16:44:33'),(42,296,1,NULL,NULL,'111111111',0,0,'127.0.0.1','Chrome 135.0.0.0',NULL,'内网IP|内网IP','2025-04-29 16:44:39'),(43,296,1,NULL,NULL,'1111111',0,0,'127.0.0.1','Chrome 135.0.0.0',NULL,'内网IP|内网IP','2025-04-29 16:44:46'),(44,296,1,NULL,NULL,'111111',0,0,'127.0.0.1','Chrome 135.0.0.0',NULL,'内网IP|内网IP','2025-04-29 16:44:51'),(45,296,1,NULL,NULL,'111111',0,0,'127.0.0.1','Chrome 135.0.0.0',NULL,'内网IP|内网IP','2025-04-29 16:44:57'),(46,296,1,NULL,NULL,'11111111',0,0,'127.0.0.1','Chrome 135.0.0.0',NULL,'内网IP|内网IP','2025-04-29 16:45:02'),(47,296,1,NULL,NULL,'111111111',0,0,'127.0.0.1','Chrome 135.0.0.0',NULL,'内网IP|内网IP','2025-04-29 16:45:08'),(48,296,1,1,47,'1111',0,0,'127.0.0.1',NULL,NULL,'内网IP|内网IP','2025-04-29 16:45:16'),(50,296,1,1,47,'1',0,0,'127.0.0.1',NULL,NULL,'内网IP|内网IP','2025-04-30 00:15:21'),(51,331,2,NULL,NULL,'11',0,0,'113.45.240.54','Chrome 135.0.0.0',NULL,'中国|北京|北京市|鹏博士','2025-05-09 00:13:38'),(53,331,1,NULL,NULL,'111',0,0,'192.168.1.178','Chrome 137.0.0.0',NULL,'内网IP|内网IP','2025-06-29 15:07:02'),(54,357,16,NULL,NULL,'111<img src=\"https://baidubox-emoji.cdn.bcebos.com/imgs/[嘻嘻].png\" class=\"emoji\" style=\"width: 30px; height: 30px; vertical-align: middle;\">',0,0,'192.168.1.178','Chrome 137.0.0.0',NULL,'内网IP|内网IP','2025-06-29 22:19:00'),(55,357,16,16,54,'111',0,0,'192.168.1.178',NULL,NULL,'内网IP|内网IP','2025-06-29 22:19:08'),(56,296,16,NULL,NULL,'1111111<img src=\"https://baidubox-emoji.cdn.bcebos.com/imgs/[大笑].png\" class=\"emoji\" style=\"width: 30px; height: 30px; vertical-align: middle;\">',0,0,'113.45.240.54','Chrome 138.0.0.0',NULL,'中国|北京|北京市|鹏博士','2025-07-23 21:58:38'),(57,296,16,NULL,NULL,'<img src=\"https://baidubox-emoji.cdn.bcebos.com/imgs/[滑稽].png\" class=\"emoji\" style=\"width: 30px; height: 30px; vertical-align: middle;\">1111111',0,0,'113.45.240.54','Chrome 138.0.0.0',NULL,'中国|北京|北京市|鹏博士','2025-07-23 22:27:09'),(58,296,16,NULL,NULL,'111',0,0,'113.45.240.54','Chrome 138.0.0.0',NULL,'中国|北京|北京市|鹏博士','2025-07-28 14:20:39'),(59,296,16,NULL,NULL,'888',0,0,'113.45.240.54','Chrome 138.0.0.0',NULL,'中国|北京|北京市|鹏博士','2025-07-28 14:30:34'),(60,296,16,NULL,NULL,'<img src=\"https://baidubox-emoji.cdn.bcebos.com/imgs/[大笑].png\" class=\"emoji\" style=\"width: 30px; height: 30px; vertical-align: middle;\">',0,0,'113.45.240.54','Chrome 138.0.0.0',NULL,'中国|北京|北京市|鹏博士','2025-07-28 14:30:40'),(61,296,16,NULL,NULL,'777<img src=\"https://baidubox-emoji.cdn.bcebos.com/imgs/[困].png\" class=\"emoji\" style=\"width: 30px; height: 30px; vertical-align: middle;\">',0,0,'113.45.240.54','Chrome 138.0.0.0',NULL,'中国|北京|北京市|鹏博士','2025-07-28 14:46:16'),(62,296,16,NULL,NULL,'<br>',0,0,'113.45.240.54','Chrome 138.0.0.0',NULL,'中国|北京|北京市|鹏博士','2025-07-28 15:37:29');
/*!40000 ALTER TABLE `sys_comment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sys_config`
--

DROP TABLE IF EXISTS `sys_config`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sys_config` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '参数主键',
  `config_name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT '' COMMENT '参数名称',
  `config_key` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT '' COMMENT '参数键名',
  `config_value` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT '' COMMENT '参数键值',
  `config_type` varchar(4) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT 'N' COMMENT '系统内置（Y是 N否）',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `remark` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT='参数配置表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sys_config`
--

LOCK TABLES `sys_config` WRITE;
/*!40000 ALTER TABLE `sys_config` DISABLE KEYS */;
INSERT INTO `sys_config` VALUES (1,'滑块验证码开关','slider_verify_switch','Y','Y',NULL,'2025-03-19 16:33:27','开启：Y,关闭：N');
/*!40000 ALTER TABLE `sys_config` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sys_dict`
--

DROP TABLE IF EXISTS `sys_dict`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sys_dict` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键',
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '字典名称',
  `type` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '字典类型',
  `status` int NOT NULL DEFAULT '1' COMMENT '是否发布(1:是，0:否)',
  `remark` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '备注',
  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  `sort` int DEFAULT '0' COMMENT '排序',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=39 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT='字典表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sys_dict`
--

LOCK TABLES `sys_dict` WRITE;
/*!40000 ALTER TABLE `sys_dict` DISABLE KEYS */;
INSERT INTO `sys_dict` VALUES (26,'登录方式','login_type',1,'登陆方式','2024-12-28 22:25:17','2024-12-28 22:25:17',0),(31,'反馈类型','feedback_type',1,'反馈类型','2025-01-12 10:37:00','2025-01-12 10:37:00',0),(32,'反馈状态','feedback_status',1,'','2025-01-12 10:37:00','2025-01-12 10:37:00',0),(33,'公告位置','notice_position',1,'','2025-02-11 15:27:51','2025-02-11 15:27:51',0),(34,'是否状态','sys_yes_no',1,'是和否状态','2025-02-13 14:33:48','2025-02-13 14:33:47',0),(35,'文件类型','sys_file_type',1,'','2025-02-13 17:10:46','2025-02-13 17:10:45',0),(36,'存储平台','sys_file_oss',1,'','2025-02-14 08:47:01','2025-02-14 08:47:01',0),(37,'文章状态','article_status',1,NULL,'2025-01-16 09:56:49','2025-01-16 09:56:49',0),(38,'资源分类','sys_resource_category',1,NULL,'2025-03-12 10:04:22','2025-03-12 10:04:22',0);
/*!40000 ALTER TABLE `sys_dict` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sys_dict_data`
--

DROP TABLE IF EXISTS `sys_dict_data`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sys_dict_data` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键',
  `dict_id` bigint NOT NULL COMMENT '字典类型id',
  `label` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '字典标签',
  `value` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '字典键值',
  `style` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '回显样式',
  `is_default` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT '0' COMMENT '是否默认（1是 0否）',
  `sort` int DEFAULT NULL COMMENT '排序',
  `remark` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '备注',
  `status` int DEFAULT '1',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=68 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT='字典数据表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sys_dict_data`
--

LOCK TABLES `sys_dict_data` WRITE;
/*!40000 ALTER TABLE `sys_dict_data` DISABLE KEYS */;
INSERT INTO `sys_dict_data` VALUES (1,37,'下架','0','danger','0',1,NULL,1),(2,37,'上架','1','success','0',2,NULL,1),(3,37,'草稿','2','warning','0',3,NULL,1),(4,37,'审核','3','info','0',4,NULL,1),(5,26,'QQ','qq','success','1',2,'QQ登录',1),(6,26,'微博','weibo','danger','0',2,'微博登录',1),(7,26,'码云','3','danger','0',3,'gitee登录',1),(8,26,'微信','2','success','1',0,'微信登录',1),(9,26,'github','github','info','1',4,'github登录',1),(38,31,'问题反馈','bug','danger','0',1,'',1),(39,31,'功能建议','feature','success','0',2,'',1),(40,31,'其他','other','info','0',3,'',1),(49,33,'顶部','top','primary','0',1,'',1),(50,33,'右侧','right','info','0',2,'',1),(51,34,'否','0','danger','0',0,'',1),(52,34,'是','1','success','0',1,'',1),(53,35,'png','png','primary','0',0,'',1),(54,35,'gif','gif','info','0',1,'',1),(55,35,'jpg','jpg','primary','0',2,'',1),(56,35,'jpeg','jpeg','primary','0',3,'',1),(57,35,'doc','doc','warning','0',4,'',1),(58,35,'mp4','mp4','danger','0',5,'',1),(59,36,'七牛云','qiniu','primary','0',0,'',1),(60,36,'阿里云','ali','warning','0',1,'',1),(61,36,'本地云','local','info','0',2,'',1),(62,36,'腾讯云','tencent','primary','0',3,'',1),(63,36,'minio','minio','danger','0',4,'',1),(64,37,'软件安装包','1','primary','0',1,'zip',1),(65,37,'PDF电子书','2','danger','0',3,'pdf',1),(66,37,'Office文档','3','info','0',2,'doc',1),(67,26,'邮箱','1','success','1',1,'邮箱登录',1);
/*!40000 ALTER TABLE `sys_dict_data` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sys_feedback`
--

DROP TABLE IF EXISTS `sys_feedback`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sys_feedback` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键',
  `user_id` bigint NOT NULL COMMENT '反馈人id',
  `type` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '反馈类型',
  `content` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '反馈内容',
  `email` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '联系邮箱',
  `reply_content` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '回复内容',
  `status` int DEFAULT '0' COMMENT '状态',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT='反馈';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sys_feedback`
--

LOCK TABLES `sys_feedback` WRITE;
/*!40000 ALTER TABLE `sys_feedback` DISABLE KEYS */;
INSERT INTO `sys_feedback` VALUES (3,1,'bug','测试','206413428@qq.com','11111',0,'2025-06-29 20:13:38');
/*!40000 ALTER TABLE `sys_feedback` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sys_file_oss`
--

DROP TABLE IF EXISTS `sys_file_oss`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sys_file_oss` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键',
  `domain` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '访问域名',
  `access_key` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT 'access-key',
  `secret_key` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT 'secret-key',
  `bucket` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '空间名',
  `base_path` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '存储基础路径',
  `platform` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '存储类型',
  `is_enable` int DEFAULT NULL COMMENT '是否启用存储',
  `storage_path` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '本地存储路径',
  `enable_access` int DEFAULT NULL COMMENT '本地启用访问',
  `path_patterns` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '本地访问路径',
  `region` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '仓库所在地域',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT='存储平台';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sys_file_oss`
--

LOCK TABLES `sys_file_oss` WRITE;
/*!40000 ALTER TABLE `sys_file_oss` DISABLE KEYS */;
INSERT INTO `sys_file_oss` VALUES (1,'http://113.45.240.54:9092/','','','','','local',1,'/opt/uploadPath/',1,'**',NULL,'2025-02-14 10:52:33');
/*!40000 ALTER TABLE `sys_file_oss` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sys_friend`
--

DROP TABLE IF EXISTS `sys_friend`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sys_friend` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '网站名称',
  `url` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '网站地址',
  `avatar` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '网站头像地址',
  `info` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '网站描述',
  `email` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '邮箱',
  `sort` int DEFAULT '0' COMMENT '排序',
  `reason` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '下架原因',
  `status` int NOT NULL DEFAULT '0' COMMENT 'ENUM-状态:"0,下架;1,申请;2:上架"',
  `create_time` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE KEY `url` (`url`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=70 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='友情链接';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sys_friend`
--

LOCK TABLES `sys_friend` WRITE;
/*!40000 ALTER TABLE `sys_friend` DISABLE KEYS */;
INSERT INTO `sys_friend` VALUES (4,'拾壹博客','https://www.shiyit.com','http://113.45.240.54:9092/default/11e1b479-7d83-419e-99c1-5e0e8c729588_logo.jpeg','一个专注技术分享的平台','2484913345@qq.com',99,'1',2,'2022-12-13 09:16:15','2022-12-13 09:16:15'),(68,'asdaf','https://gitee.com/tticw/code-cloud-star-chain.git','http://113.45.240.54:9092/default/11e1b479-7d83-419e-99c1-5e0e8c729588_logo.jpeg','abcdf','17758751671@163.com',1,NULL,2,'2025-04-27 14:53:55','2025-04-27 14:53:55'),(69,'dwa','http://localhost:3001/friends','http://113.45.240.54:9092/default/11e1b479-7d83-419e-99c1-5e0e8c729588_logo.jpeg','dwa','23让7539@qq.com',1,NULL,2,'2025-04-27 17:44:29','2025-04-27 17:44:29');
/*!40000 ALTER TABLE `sys_friend` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sys_job`
--

DROP TABLE IF EXISTS `sys_job`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sys_job` (
  `job_id` bigint NOT NULL AUTO_INCREMENT COMMENT '任务ID',
  `job_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '任务名称',
  `job_group` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '任务组名',
  `invoke_target` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '调用目标字符串',
  `cron_expression` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT 'cron执行表达式',
  `misfire_policy` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT '3' COMMENT '计划执行错误策略（1立即执行 2执行一次 3放弃执行）',
  `concurrent` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT '1' COMMENT '是否并发执行（0允许 1禁止）',
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT '0' COMMENT '状态（0正常 1暂停）',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `remark` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '备注信息',
  PRIMARY KEY (`job_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='定时任务调度表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sys_job`
--

LOCK TABLES `sys_job` WRITE;
/*!40000 ALTER TABLE `sys_job` DISABLE KEYS */;
INSERT INTO `sys_job` VALUES (1,'系统默认（无参）','DEFAULT','task.neatNoParams','* * * * * ? *','3','1','1','2024-11-17 12:39:45',NULL,''),(2,'系统默认（有参）','DEFAULT','demoTask.ryParams(\'ry\')','0/15 * * * * ?','3','1','1','2024-11-17 12:39:45',NULL,''),(3,'系统默认（多参）','DEFAULT','demoTask.ryMultipleParams(\'ry\', true, 2000L, 316.50D, 100)','0/20 * * * * ?','3','1','1','2024-11-17 12:39:45',NULL,''),(11,'test','DEFAULT','task.neatNoParams','0/15 * * * * ? *','3','1','1',NULL,NULL,NULL),(12,'定时更新阅读量','DEFAULT','task.syncQuantity','0 0 0 * * ? *','1','1','1',NULL,NULL,NULL);
/*!40000 ALTER TABLE `sys_job` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sys_job_log`
--

DROP TABLE IF EXISTS `sys_job_log`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sys_job_log` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '任务日志ID',
  `job_id` bigint NOT NULL COMMENT '任务ID',
  `job_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '任务名称',
  `job_group` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '任务组名',
  `invoke_target` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '调用目标字符串',
  `job_message` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '日志信息',
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT '0' COMMENT '执行状态（0正常 1失败）',
  `exception_info` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT '' COMMENT '异常信息',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `start_time` datetime DEFAULT NULL COMMENT '开始时间',
  `stop_time` datetime DEFAULT NULL COMMENT '结束时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=150 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='定时任务调度日志表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sys_job_log`
--

LOCK TABLES `sys_job_log` WRITE;
/*!40000 ALTER TABLE `sys_job_log` DISABLE KEYS */;
INSERT INTO `sys_job_log` VALUES (77,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：-3毫秒','0','','2025-04-27 09:41:59','2025-04-27 09:41:59','2025-04-27 09:41:59'),(78,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:00','2025-04-27 09:42:00','2025-04-27 09:42:00'),(79,2,'系统默认（有参）','DEFAULT','demoTask.ryParams(\'ry\')','系统默认（有参） 总共耗时：-1毫秒','1','org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named \'demoTask\' available\r\n	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:893)\r\n	at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1318)\r\n	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)\r\n	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)\r\n	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1156)\r\n	at com.mojian.utils.SpringUtil.getBean(SpringUtil.java:47)\r\n	at com.mojian.utils.JobInvokeUtils.invokeMethod(JobInvokeUtils.java:31)\r\n	at com.mojian.quartz.QuartzDisallowConcurrentExecution.doExecute(QuartzDisallowConcurrentExecution.java:15)\r\n	at com.mojian.quartz.AbstractQuartzJob.execute(AbstractQuartzJob.java:39)\r\n	at org.quartz.core.JobRunShell.run(JobRunShell.java:202)\r\n	at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:573)\r\n','2025-04-27 09:42:00','2025-04-27 09:42:00','2025-04-27 09:42:00'),(80,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:01','2025-04-27 09:42:01','2025-04-27 09:42:01'),(81,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:02','2025-04-27 09:42:02','2025-04-27 09:42:02'),(82,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:03','2025-04-27 09:42:03','2025-04-27 09:42:03'),(83,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:04','2025-04-27 09:42:04','2025-04-27 09:42:04'),(84,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:05','2025-04-27 09:42:05','2025-04-27 09:42:05'),(85,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:06','2025-04-27 09:42:06','2025-04-27 09:42:06'),(86,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:07','2025-04-27 09:42:07','2025-04-27 09:42:07'),(87,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:08','2025-04-27 09:42:08','2025-04-27 09:42:08'),(88,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:09','2025-04-27 09:42:09','2025-04-27 09:42:09'),(89,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:10','2025-04-27 09:42:10','2025-04-27 09:42:10'),(90,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:11','2025-04-27 09:42:11','2025-04-27 09:42:11'),(91,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:12','2025-04-27 09:42:12','2025-04-27 09:42:12'),(92,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:13','2025-04-27 09:42:13','2025-04-27 09:42:13'),(93,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:14','2025-04-27 09:42:14','2025-04-27 09:42:14'),(94,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:15','2025-04-27 09:42:15','2025-04-27 09:42:15'),(95,2,'系统默认（有参）','DEFAULT','demoTask.ryParams(\'ry\')','系统默认（有参） 总共耗时：0毫秒','1','org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named \'demoTask\' available\r\n	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:893)\r\n	at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1318)\r\n	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)\r\n	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)\r\n	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1156)\r\n	at com.mojian.utils.SpringUtil.getBean(SpringUtil.java:47)\r\n	at com.mojian.utils.JobInvokeUtils.invokeMethod(JobInvokeUtils.java:31)\r\n	at com.mojian.quartz.QuartzDisallowConcurrentExecution.doExecute(QuartzDisallowConcurrentExecution.java:15)\r\n	at com.mojian.quartz.AbstractQuartzJob.execute(AbstractQuartzJob.java:39)\r\n	at org.quartz.core.JobRunShell.run(JobRunShell.java:202)\r\n	at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:573)\r\n','2025-04-27 09:42:15','2025-04-27 09:42:15','2025-04-27 09:42:15'),(96,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:16','2025-04-27 09:42:16','2025-04-27 09:42:16'),(97,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:17','2025-04-27 09:42:17','2025-04-27 09:42:17'),(98,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:18','2025-04-27 09:42:18','2025-04-27 09:42:18'),(99,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:19','2025-04-27 09:42:19','2025-04-27 09:42:19'),(100,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:20','2025-04-27 09:42:20','2025-04-27 09:42:20'),(101,3,'系统默认（多参）','DEFAULT','demoTask.ryMultipleParams(\'ry\', true, 2000L, 316.50D, 100)','系统默认（多参） 总共耗时：-1毫秒','1','org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named \'demoTask\' available\r\n	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:893)\r\n	at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1318)\r\n	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)\r\n	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)\r\n	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1156)\r\n	at com.mojian.utils.SpringUtil.getBean(SpringUtil.java:47)\r\n	at com.mojian.utils.JobInvokeUtils.invokeMethod(JobInvokeUtils.java:31)\r\n	at com.mojian.quartz.QuartzDisallowConcurrentExecution.doExecute(QuartzDisallowConcurrentExecution.java:15)\r\n	at com.mojian.quartz.AbstractQuartzJob.execute(AbstractQuartzJob.java:39)\r\n	at org.quartz.core.JobRunShell.run(JobRunShell.java:202)\r\n	at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:573)\r\n','2025-04-27 09:42:20','2025-04-27 09:42:20','2025-04-27 09:42:20'),(102,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:21','2025-04-27 09:42:21','2025-04-27 09:42:21'),(103,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:22','2025-04-27 09:42:22','2025-04-27 09:42:22'),(104,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:23','2025-04-27 09:42:23','2025-04-27 09:42:23'),(105,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:24','2025-04-27 09:42:24','2025-04-27 09:42:24'),(106,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:25','2025-04-27 09:42:25','2025-04-27 09:42:25'),(107,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:26','2025-04-27 09:42:26','2025-04-27 09:42:26'),(108,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:27','2025-04-27 09:42:27','2025-04-27 09:42:27'),(109,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:28','2025-04-27 09:42:28','2025-04-27 09:42:28'),(110,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:29','2025-04-27 09:42:29','2025-04-27 09:42:29'),(111,2,'系统默认（有参）','DEFAULT','demoTask.ryParams(\'ry\')','系统默认（有参） 总共耗时：0毫秒','1','org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named \'demoTask\' available\r\n	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:893)\r\n	at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1318)\r\n	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)\r\n	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)\r\n	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1156)\r\n	at com.mojian.utils.SpringUtil.getBean(SpringUtil.java:47)\r\n	at com.mojian.utils.JobInvokeUtils.invokeMethod(JobInvokeUtils.java:31)\r\n	at com.mojian.quartz.QuartzDisallowConcurrentExecution.doExecute(QuartzDisallowConcurrentExecution.java:15)\r\n	at com.mojian.quartz.AbstractQuartzJob.execute(AbstractQuartzJob.java:39)\r\n	at org.quartz.core.JobRunShell.run(JobRunShell.java:202)\r\n	at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:573)\r\n','2025-04-27 09:42:30','2025-04-27 09:42:30','2025-04-27 09:42:30'),(112,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:30','2025-04-27 09:42:30','2025-04-27 09:42:30'),(113,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:31','2025-04-27 09:42:31','2025-04-27 09:42:31'),(114,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:32','2025-04-27 09:42:32','2025-04-27 09:42:32'),(115,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:33','2025-04-27 09:42:33','2025-04-27 09:42:33'),(116,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:34','2025-04-27 09:42:34','2025-04-27 09:42:34'),(117,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:35','2025-04-27 09:42:35','2025-04-27 09:42:35'),(118,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:36','2025-04-27 09:42:36','2025-04-27 09:42:36'),(119,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:37','2025-04-27 09:42:37','2025-04-27 09:42:37'),(120,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:38','2025-04-27 09:42:38','2025-04-27 09:42:38'),(121,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:39','2025-04-27 09:42:39','2025-04-27 09:42:39'),(122,3,'系统默认（多参）','DEFAULT','demoTask.ryMultipleParams(\'ry\', true, 2000L, 316.50D, 100)','系统默认（多参） 总共耗时：0毫秒','1','org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named \'demoTask\' available\r\n	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:893)\r\n	at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1318)\r\n	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)\r\n	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)\r\n	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1156)\r\n	at com.mojian.utils.SpringUtil.getBean(SpringUtil.java:47)\r\n	at com.mojian.utils.JobInvokeUtils.invokeMethod(JobInvokeUtils.java:31)\r\n	at com.mojian.quartz.QuartzDisallowConcurrentExecution.doExecute(QuartzDisallowConcurrentExecution.java:15)\r\n	at com.mojian.quartz.AbstractQuartzJob.execute(AbstractQuartzJob.java:39)\r\n	at org.quartz.core.JobRunShell.run(JobRunShell.java:202)\r\n	at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:573)\r\n','2025-04-27 09:42:40','2025-04-27 09:42:40','2025-04-27 09:42:40'),(123,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:40','2025-04-27 09:42:40','2025-04-27 09:42:40'),(124,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:41','2025-04-27 09:42:41','2025-04-27 09:42:41'),(125,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:42','2025-04-27 09:42:42','2025-04-27 09:42:42'),(126,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:43','2025-04-27 09:42:43','2025-04-27 09:42:43'),(127,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:44','2025-04-27 09:42:44','2025-04-27 09:42:44'),(128,2,'系统默认（有参）','DEFAULT','demoTask.ryParams(\'ry\')','系统默认（有参） 总共耗时：0毫秒','1','org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named \'demoTask\' available\r\n	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:893)\r\n	at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1318)\r\n	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)\r\n	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)\r\n	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1156)\r\n	at com.mojian.utils.SpringUtil.getBean(SpringUtil.java:47)\r\n	at com.mojian.utils.JobInvokeUtils.invokeMethod(JobInvokeUtils.java:31)\r\n	at com.mojian.quartz.QuartzDisallowConcurrentExecution.doExecute(QuartzDisallowConcurrentExecution.java:15)\r\n	at com.mojian.quartz.AbstractQuartzJob.execute(AbstractQuartzJob.java:39)\r\n	at org.quartz.core.JobRunShell.run(JobRunShell.java:202)\r\n	at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:573)\r\n','2025-04-27 09:42:45','2025-04-27 09:42:45','2025-04-27 09:42:45'),(129,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:45','2025-04-27 09:42:45','2025-04-27 09:42:45'),(130,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:46','2025-04-27 09:42:46','2025-04-27 09:42:46'),(131,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:47','2025-04-27 09:42:47','2025-04-27 09:42:47'),(132,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:48','2025-04-27 09:42:48','2025-04-27 09:42:48'),(133,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:49','2025-04-27 09:42:49','2025-04-27 09:42:49'),(134,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:50','2025-04-27 09:42:50','2025-04-27 09:42:50'),(135,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:51','2025-04-27 09:42:51','2025-04-27 09:42:51'),(136,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:52','2025-04-27 09:42:52','2025-04-27 09:42:52'),(137,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:53','2025-04-27 09:42:53','2025-04-27 09:42:53'),(138,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:54','2025-04-27 09:42:54','2025-04-27 09:42:54'),(139,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:55','2025-04-27 09:42:55','2025-04-27 09:42:55'),(140,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:42:56','2025-04-27 09:42:56','2025-04-27 09:42:56'),(141,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-04-27 09:44:34','2025-04-27 09:44:34','2025-04-27 09:44:34'),(142,2,'系统默认（有参）','DEFAULT','demoTask.ryParams(\'ry\')','系统默认（有参） 总共耗时：0毫秒','1','org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named \'demoTask\' available\r\n	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:893)\r\n	at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1318)\r\n	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)\r\n	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)\r\n	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1156)\r\n	at com.mojian.utils.SpringUtil.getBean(SpringUtil.java:47)\r\n	at com.mojian.utils.JobInvokeUtils.invokeMethod(JobInvokeUtils.java:31)\r\n	at com.mojian.quartz.QuartzDisallowConcurrentExecution.doExecute(QuartzDisallowConcurrentExecution.java:15)\r\n	at com.mojian.quartz.AbstractQuartzJob.execute(AbstractQuartzJob.java:39)\r\n	at org.quartz.core.JobRunShell.run(JobRunShell.java:202)\r\n	at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:573)\r\n','2025-04-27 09:44:38','2025-04-27 09:44:38','2025-04-27 09:44:38'),(143,3,'系统默认（多参）','DEFAULT','demoTask.ryMultipleParams(\'ry\', true, 2000L, 316.50D, 100)','系统默认（多参） 总共耗时：0毫秒','1','org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named \'demoTask\' available\r\n	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:893)\r\n	at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1318)\r\n	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)\r\n	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)\r\n	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1156)\r\n	at com.mojian.utils.SpringUtil.getBean(SpringUtil.java:47)\r\n	at com.mojian.utils.JobInvokeUtils.invokeMethod(JobInvokeUtils.java:31)\r\n	at com.mojian.quartz.QuartzDisallowConcurrentExecution.doExecute(QuartzDisallowConcurrentExecution.java:15)\r\n	at com.mojian.quartz.AbstractQuartzJob.execute(AbstractQuartzJob.java:39)\r\n	at org.quartz.core.JobRunShell.run(JobRunShell.java:202)\r\n	at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:573)\r\n','2025-04-27 09:44:44','2025-04-27 09:44:44','2025-04-27 09:44:44'),(144,11,'test','DEFAULT','neatTask.neatParams(\'neat\')','test 总共耗时：0毫秒','1','org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named \'neatTask\' available\r\n	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:893)\r\n	at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1318)\r\n	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)\r\n	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)\r\n	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1156)\r\n	at com.mojian.utils.SpringUtil.getBean(SpringUtil.java:47)\r\n	at com.mojian.utils.JobInvokeUtils.invokeMethod(JobInvokeUtils.java:31)\r\n	at com.mojian.quartz.QuartzDisallowConcurrentExecution.doExecute(QuartzDisallowConcurrentExecution.java:15)\r\n	at com.mojian.quartz.AbstractQuartzJob.execute(AbstractQuartzJob.java:39)\r\n	at org.quartz.core.JobRunShell.run(JobRunShell.java:202)\r\n	at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:573)\r\n','2025-04-27 09:51:58','2025-04-27 09:51:58','2025-04-27 09:51:58'),(145,11,'test','DEFAULT','neatTask.neatParams(\'neat\')','test 总共耗时：0毫秒','1','org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named \'neatTask\' available\r\n	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:893)\r\n	at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1318)\r\n	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)\r\n	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)\r\n	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1156)\r\n	at com.mojian.utils.SpringUtil.getBean(SpringUtil.java:47)\r\n	at com.mojian.utils.JobInvokeUtils.invokeMethod(JobInvokeUtils.java:31)\r\n	at com.mojian.quartz.QuartzDisallowConcurrentExecution.doExecute(QuartzDisallowConcurrentExecution.java:15)\r\n	at com.mojian.quartz.AbstractQuartzJob.execute(AbstractQuartzJob.java:39)\r\n	at org.quartz.core.JobRunShell.run(JobRunShell.java:202)\r\n	at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:573)\r\n','2025-04-27 09:52:26','2025-04-27 09:52:26','2025-04-27 09:52:26'),(146,11,'test','DEFAULT','task.neatNoParams','test 总共耗时：0毫秒','0','','2025-04-27 09:52:37','2025-04-27 09:52:37','2025-04-27 09:52:37'),(147,12,'定时更新阅读量','DEFAULT','task.syncQuantity','定时更新阅读量 总共耗时：-82毫秒','0','','2025-04-27 09:53:53','2025-04-27 09:53:53','2025-04-27 09:53:53'),(148,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：-2毫秒','0','','2025-05-29 17:56:06','2025-05-29 17:56:06','2025-05-29 17:56:06'),(149,1,'系统默认（无参）','DEFAULT','task.neatNoParams','系统默认（无参） 总共耗时：0毫秒','0','','2025-05-29 17:56:21','2025-05-29 17:56:21','2025-05-29 17:56:21');
/*!40000 ALTER TABLE `sys_job_log` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sys_menu`
--

DROP TABLE IF EXISTS `sys_menu`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sys_menu` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `parent_id` varchar(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL COMMENT '上级资源ID',
  `path` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL COMMENT '路由路径',
  `component` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL COMMENT '组件路径',
  `title` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL COMMENT '菜单名称',
  `sort` int DEFAULT '0' COMMENT '排序',
  `icon` varchar(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL COMMENT '资源图标',
  `type` varchar(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL COMMENT '类型 menu、button',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `redirect` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL COMMENT '重定向地址',
  `name` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL COMMENT '跳转地址',
  `hidden` int DEFAULT NULL COMMENT '是否隐藏',
  `perm` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL COMMENT '权限标识',
  `is_external` int DEFAULT '0' COMMENT '是否外链 0:否  1:是',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=142 DEFAULT CHARSET=utf8mb3 COMMENT='权限资源表 ';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sys_menu`
--

LOCK TABLES `sys_menu` WRITE;
/*!40000 ALTER TABLE `sys_menu` DISABLE KEYS */;
INSERT INTO `sys_menu` VALUES (1,'0','/system','Layout','系统管理',4,'Setting','CATALOG','2019-03-28 18:51:08','2021-12-17 15:26:06','/system/user','',0,NULL,0),(2,'1','role','/system/role/index','角色管理',2,'Avatar','MENU','2019-03-30 14:00:03','2021-11-16 15:40:42','','',0,NULL,0),(3,'2',NULL,NULL,'角色列表',1,'','BUTTON',NULL,'2024-11-18 17:56:16','',NULL,1,'system:role',0),(4,'0','/monitor','Layout','监控中心',5,'Monitor','CATALOG',NULL,'2024-11-17 21:38:25','/monitor/server','',0,NULL,0),(7,'6','','','新增',1,'','BUTTON',NULL,'2024-11-16 14:18:24',NULL,'',1,'a:b:add',0),(8,'2','','','新增角色',1,'','BUTTON',NULL,'2024-11-21 22:16:56',NULL,'',1,'sys:role:add',0),(9,'1','dict','/system/dict/index','字典管理',3,'Memo','MENU','2024-11-17 21:29:51','2024-11-17 21:39:06',NULL,'',0,NULL,0),(10,'9','','','新增字典',1,'','BUTTON','2024-11-17 21:30:23',NULL,NULL,'',1,'sys:dict:add',0),(11,'9','','','修改字典',2,'','BUTTON','2024-11-17 21:32:34','2024-11-18 18:01:35',NULL,'',1,'sys:dict:update',0),(12,'9','','','删除字典',3,'','BUTTON','2024-11-17 21:34:33','2024-11-17 21:39:11',NULL,'',1,'sys:dict:delete',0),(13,'1','menu','/system/menu/index','菜单管理',5,'Menu','MENU',NULL,'2021-11-18 11:26:00','','menu',0,NULL,0),(14,'1','user','/system/user/index','用户管理',1,'User','MENU','2024-11-18 01:10:52','2024-11-18 01:11:13',NULL,'',0,'',0),(16,'4','server','/monitor/server/index','服务监控',1,'Crop','MENU','2024-11-18 01:18:12','2024-11-18 01:20:27',NULL,'',0,'',0),(17,'4','cache','/monitor/cache/index','缓存监控',2,'Coin','MENU','2024-11-18 06:56:49',NULL,NULL,'',0,'',0),(18,'4','job','/monitor/job/index','定时任务',3,'AlarmClock','MENU','2024-11-18 06:57:38',NULL,NULL,'',0,'',0),(19,'4','job-log','/monitor/job/log','调度日志',4,'Document','MENU','2024-11-18 06:58:43','2024-11-18 06:58:55',NULL,'',1,'',0),(27,'14','','','新增用户',2,'','BUTTON','2024-11-18 09:18:14','2024-11-21 22:15:30',NULL,'',1,'sys:user:add',0),(28,'14','','','编辑用户',2,'','BUTTON','2024-11-18 09:18:38','2024-11-21 14:38:56',NULL,'',1,'sys:user:update',0),(29,'14','','','删除用户',3,'','BUTTON','2024-11-18 09:18:53','2024-11-21 22:15:43',NULL,'',1,'sys:user:delete',0),(30,'0','/tool','Layout','系统工具',6,'Suitcase','CATALOG','2024-11-18 09:21:10','2024-11-18 12:23:55','/tool/gen','',0,'',0),(31,'30','gen','/tool/gen/index','代码生成',1,'Compass','MENU','2024-11-18 09:21:52',NULL,NULL,'',0,'',0),(32,'1','log','','日志管理',5,'DocumentCopy','MENU','2024-11-18 10:52:47','2024-11-18 10:58:00','/system/log/operation','',0,'',0),(33,'32','operation','/system/log/operation/index','操作日志',1,'CircleCheckFilled','MENU','2024-11-18 10:53:10','2024-11-18 11:05:22',NULL,'',0,'',0),(39,'14','','','用户列表',1,'','BUTTON','2024-11-18 17:54:15','2024-11-21 22:07:33','','',1,'sys:user',0),(40,'2','','','修改角色',2,'','BUTTON','2024-11-18 17:56:10','2024-11-21 22:04:52','','',1,'sys:role:update',0),(41,'2','','','删除角色',3,'','BUTTON','2024-11-18 17:56:34','2024-11-21 22:17:17','',NULL,1,'sys:role:delete',0),(43,'2','','','分配权限',5,'','BUTTON','2024-11-18 17:57:28',NULL,'',NULL,1,'sys:role:menus',0),(44,'9','','','批量删除',4,'','BUTTON','2024-11-18 17:58:16','2024-11-21 22:07:06','','',1,'sys:dict:deleteBatch',0),(48,'13','','','添加菜单',1,'','BUTTON','2024-11-18 17:56:58',NULL,'',NULL,1,'sys:menu:add',0),(49,'13','','','修改菜单',2,'','BUTTON','2024-11-18 17:56:58',NULL,'',NULL,1,'sys:menu:update',0),(50,'13','','','删除菜单',3,'','BUTTON','2024-11-21 21:55:49',NULL,'','',1,'sys:menu:delete',0),(51,'13','','','菜单列表',1,'','BUTTON','2024-11-21 21:58:29',NULL,'','',1,'sys:menu',0),(52,'14','','','重置密码',5,'','BUTTON','2024-11-21 22:00:30',NULL,'','',1,'sys:user:reset',0),(53,'9','','','字典列表',1,'','BUTTON','2024-11-18 17:58:16',NULL,'','',1,'sys:dict',0),(54,'1','profile','/system/user/profile/index','个人中心',99,'Avatar','MENU','2024-11-21 22:12:18','2024-11-21 22:12:46','','',1,'',0),(55,'33','','','操作日志列表',1,'','BUTTON','2024-11-18 10:53:10','2024-11-18 11:05:22','','',1,'sys:operateLog',0),(56,'33','','','删除操作日志',2,'','BUTTON','2024-11-18 10:53:10','2024-11-18 11:05:22','','',1,'sys:operateLog:delete',0),(58,'18','','','定时任务列表',3,'','BUTTON','2024-11-18 17:56:58','2024-11-21 22:04:42','',NULL,1,'sys:job',0),(59,'18','','','添加定时任务',2,'','BUTTON','2024-11-18 17:56:58','2024-11-21 22:04:42','',NULL,1,'sys:job:add',0),(60,'18','','','修改定时任务',1,'','BUTTON','2024-11-18 17:56:58','2024-11-21 22:04:42','',NULL,1,'sys:job:update',0),(61,'18','','','删除定时任务',4,'','BUTTON','2024-11-18 17:56:58','2024-11-21 22:04:42','',NULL,1,'sys:job:delete',0),(62,'18','','','修改任务状态',1,'','BUTTON','2024-11-18 17:56:58','2024-11-21 22:04:42','',NULL,0,'sys:job:changeStatus',0),(63,'19','','','删除定时任务日志',1,'','BUTTON','2024-11-21 22:26:56',NULL,'','',1,'sys:jobLog:delete',0),(64,'19','','','清空定时任务日志',2,'','BUTTON','2024-11-21 22:27:09',NULL,'','',1,'sys:jobLog:clean',0),(65,'18','','','批量删除定时任务',1,'','BUTTON','2024-11-21 22:37:01','2024-11-21 22:38:05','','',1,'sys:job:deleteBatch',0),(66,'19','','','定时任务日志列表',1,'','BUTTON','2024-11-21 23:09:47',NULL,'','',1,'sys:jobLog',0),(67,'4','online','/monitor/online/index','在线用户',4,'Avatar','MENU','2024-12-03 12:40:41',NULL,'','',0,'',0),(68,'0','/article','Layout','文章管理',1,'Document','CATALOG','2024-12-22 10:49:22','2024-12-22 10:49:37','/article/index','',0,'',0),(69,'68','tag','/article/tag/index','标签管理',2,'PriceTag','MENU','2024-12-22 10:49:22','2024-12-22 10:49:37','','',0,'',0),(70,'68','category','/article/category/index','分类管理',2,'Dessert','MENU','2024-12-22 10:49:22','2024-12-22 10:49:37','','',0,'',0),(71,'68','index','/article/article/index','文章管理',1,'DocumentRemove','MENU','2024-12-25 13:47:27',NULL,'','',0,'',0),(72,'0','/site','Layout','站点管理',2,'DeleteLocation','CATALOG','2024-12-25 16:13:03','2024-12-25 16:13:33','/site/config','',0,'',0),(73,'72','friend','/site/friend/index','友链管理',2,'ChromeFilled','MENU','2024-12-25 16:17:24',NULL,'','',0,'',0),(74,'72','config','/site/config/index','网站配置',1,'AddLocation','MENU','2024-12-25 16:35:39',NULL,'','',0,'',0),(75,'71','','','文章列表',1,'','BUTTON','2024-12-28 22:02:24',NULL,'','',1,'sys:article:list',0),(76,'71','','','新增文章',2,'','BUTTON','2024-12-28 22:02:24',NULL,'','',1,'sys:article:add',0),(77,'71','','','修改文章',3,'','BUTTON','2024-12-28 22:02:24',NULL,'','',1,'sys:article:update',0),(78,'71','','','修改状态',4,'','BUTTON','2024-12-28 22:02:24',NULL,'','',1,'sys:article:updateStatus',0),(79,'71','','','删除文章',2,'','BUTTON','2024-12-28 22:02:24',NULL,'','',1,'sys:article:delete',0),(80,'69','','','标签列表',1,'','BUTTON','2024-12-28 22:05:25',NULL,'','',1,'sys:tag:list',0),(81,'69','','','新增标签',2,'','BUTTON','2024-12-28 22:05:59',NULL,'','',1,'sys:tag:add',0),(82,'69','','','修改标签',3,'','BUTTON','2024-12-28 22:06:26',NULL,'','',1,'sys:tag:update',0),(83,'69','','','删除标签',4,'','BUTTON','2024-12-28 22:06:40',NULL,'','',1,'sys:tag:delete',0),(84,'70','','','分类列表',1,'','BUTTON','2024-12-28 22:07:27',NULL,'','',1,'sys:category:list',0),(85,'70','','','新增分类',2,'','BUTTON','2024-12-28 22:07:40',NULL,'','',1,'sys:category:add',0),(86,'70','','','修改分类',3,'','BUTTON','2024-12-28 22:07:58',NULL,'','',1,'sys:category:update',0),(87,'70','','','删除分类',4,'','BUTTON','2024-12-28 22:08:11',NULL,'','',1,'sys:category:delete',0),(88,'74','','','网站列表',1,'','BUTTON','2024-12-28 22:09:06',NULL,'','',1,'sys:web:config',0),(89,'74','','','修改配置',2,'','BUTTON','2024-12-28 22:09:21',NULL,'','',1,'sys:web:update',0),(90,'73','','','友链列表',1,'','BUTTON','2024-12-28 22:10:26',NULL,'','',1,'sys:friend:list',0),(91,'73','','','新增友链',2,'','BUTTON','2024-12-28 22:10:41',NULL,'','',1,'sys:friend:add',0),(92,'73','','','修改友链',3,'','BUTTON','2024-12-28 22:11:09',NULL,'','',1,'sys:friend:update',0),(93,'73','','','删除友链',4,'','BUTTON','2024-12-28 22:11:21',NULL,'','',1,'sys:friend:delete',0),(94,'17','','','清空缓存',2,'','BUTTON','2024-12-28 22:22:54',NULL,'','',1,'monitor:cache',0),(95,'17','','','缓存信息',1,'','BUTTON','2024-12-28 22:23:36',NULL,'','',1,'monitor:cache:info',0),(96,'0','/comment','Layout','消息管理',3,'ChatDotSquare','CATALOG','2025-01-02 09:49:06',NULL,'','',0,'',0),(97,'96','comment','/message/comment/index','评论管理',1,'ChatDotRound','MENU','2024-12-22 10:49:22','2024-12-22 10:49:37','','',0,'',0),(98,'97','','','评论列表',1,'','BUTTON','2025-01-02 09:58:33',NULL,'','',1,'sys:comment:list',0),(99,'97','','','删除评论',2,'','BUTTON','2025-01-02 09:58:50',NULL,'','',1,'sys:comment:delete',0),(100,'96','message','/message/message/index','留言管理',2,'ChatLineSquare','MENU','2025-01-02 10:07:04',NULL,'','',0,'',0),(101,'100','','','留言列表',1,'','BUTTON','2025-01-02 10:12:14',NULL,'','',1,'sys:message:list',0),(102,'100','','','删除留言',2,'','BUTTON','2025-01-02 10:22:06',NULL,'','',1,'sys:message:delete',0),(103,'71','','','爬取文章',6,'','BUTTON','2025-01-02 16:34:53',NULL,'','',1,'sys:article:reptile',0),(104,'67','','','列表',1,'','BUTTON','2025-01-03 15:53:46',NULL,'','',1,'monitor:online:list',0),(105,'67','','','强退',2,'','BUTTON','2025-01-03 15:54:03',NULL,'','',1,'monitor:online:forceLogout',0),(106,'96','feedback','/message/feedback/index','反馈管理',3,'Checked','MENU','2025-01-12 11:23:23',NULL,'','',0,'',0),(107,'106','','','列表',1,'','BUTTON','2025-01-12 12:30:48','2025-01-12 12:31:51','','',1,'sys:feedback:list',0),(108,'106','','','修改',2,'','BUTTON','2025-01-12 12:31:00','2025-01-12 12:31:55','','',1,'sys:feedback:update',0),(109,'106','','','删除',3,'','BUTTON','2025-01-12 12:31:14','2025-01-12 12:31:19','','',1,'sys:feedback:delete',0),(110,'68','/moments','/article/moment/index','说说管理',4,'ChatDotRound','MENU','2025-02-06 10:22:22',NULL,'','',0,'',0),(111,'110','','','新增',1,'','BUTTON','2025-02-06 10:32:06',NULL,'','',1,'sys:moment:add',0),(112,'110','','','修改',2,'','BUTTON','2025-02-06 10:32:20',NULL,'','',1,'sys:moment:update',0),(113,'110','','','删除',3,'','BUTTON','2025-02-06 10:32:37',NULL,'','',1,'sys:moment:delete',0),(114,'72','/album','/site/album/index','相册管理',1,'CreditCard','MENU','2025-02-07 10:49:51','2025-02-07 10:50:23','','',0,'',0),(115,'114','','','列表',1,'','BUTTON','2025-02-07 15:08:50',NULL,'','',1,'sys:album:list',0),(116,'114','','','新增',2,'','BUTTON','2025-02-07 15:09:03',NULL,'','',1,'sys:album:add',0),(117,'114','','','修改',3,'','BUTTON','2025-02-07 15:09:30',NULL,'','',1,'sys:album:update',0),(118,'114','','','删除',4,'','BUTTON','2025-02-07 15:09:53',NULL,'','',1,'sys:album:delete',0),(119,'114','','','新增照片',5,'','BUTTON','2025-02-07 15:10:39',NULL,'','',1,'sys:photo:add',0),(120,'114','','','修改照片',6,'','BUTTON','2025-02-07 15:10:55',NULL,'','',1,'sys:photo:update',0),(121,'114','','','删除照片',7,'','BUTTON','2025-02-07 15:11:18',NULL,'','',1,'sys:photo:delete',0),(122,'114','','','移动照片',8,'','BUTTON','2025-02-07 15:11:38',NULL,'','',1,'sys:photo:move',0),(123,'72','/notice','/site/notice/index','公告管理',4,'AlarmClock','MENU','2024-12-25 16:13:03','2024-12-25 16:13:33','','',0,'',0),(124,'123','','','列表',1,'','BUTTON','2025-02-11 16:32:27',NULL,'','',1,'sys:notice:list',0),(125,'123','','','新增',2,'','BUTTON','2025-02-11 16:32:37',NULL,'','',1,'sys:notice:add',0),(126,'123','','','修改',3,'','BUTTON','2025-02-11 16:32:49',NULL,'','',0,'sys:notice:update',0),(127,'123','','','删除',4,'','BUTTON','2025-02-11 16:33:01',NULL,'','',1,'sys:notice:delete',0),(128,'1','/file','/system/file/index','文件管理',6,'Folder','MENU','2025-02-13 16:01:54',NULL,'','',0,'',0),(129,'128','','','列表',1,'','BUTTON','2025-02-13 17:04:56',NULL,'','',1,'sys:file:list',0),(130,'128','','','删除',2,'','BUTTON','2025-02-13 17:05:09',NULL,'','',1,'sys:file:delete',0),(131,'128','','','保存oss配置',2,'','BUTTON','2025-02-13 17:05:09',NULL,'','',1,'sys:oss:submit',0),(136,'1','/config','/system/config/index','参数管理',4,'Film','MENU','2025-03-19 15:56:07',NULL,'','',0,'',0),(137,'136','','','列表',1,'','BUTTON','2025-03-19 16:55:57',NULL,'','',1,'sys:config:list',0),(138,'136','','','添加',2,'','BUTTON','2025-03-19 16:56:09',NULL,'','',1,'sys:config:add',0),(139,'136','','','修改',3,'','BUTTON','2025-03-19 16:56:20',NULL,'','',1,'sys:config:update',0),(140,'136','','','删除',4,'','BUTTON','2025-03-19 16:56:34',NULL,'','',1,'sys:config:delete',0),(141,'106',NULL,NULL,'增加',4,NULL,'BUTTON','2025-06-29 17:49:21','2025-06-29 17:49:27',NULL,NULL,1,'sys:feedback:add',0);
/*!40000 ALTER TABLE `sys_menu` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sys_message`
--

DROP TABLE IF EXISTS `sys_message`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sys_message` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `nickname` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '昵称',
  `avatar` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '头像',
  `content` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '内容',
  `ip` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT 'IP地址',
  `source` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT 'IP来源',
  `browser` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '浏览器',
  `create_time` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=1447 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='留言';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sys_message`
--

LOCK TABLES `sys_message` WRITE;
/*!40000 ALTER TABLE `sys_message` DISABLE KEYS */;
INSERT INTO `sys_message` VALUES (1431,'码云星链','https://ss0.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=1152107840,119779555&fm=253&gp=0.jpg','yyds','113.45.240.54','中国|北京|北京市|鹏博士',NULL,'2025-05-10 13:31:05'),(1432,'游客','https://api.dicebear.com/7.x/avataaars/svg?seed=Guest','i 不错哦','113.45.240.54','中国|北京|北京市|鹏博士',NULL,'2025-05-14 22:40:35'),(1433,'游客','https://api.dicebear.com/7.x/avataaars/svg?seed=Guest','我是刘姐，到此一游','113.45.240.54','中国|北京|北京市|鹏博士',NULL,'2025-05-19 11:24:24'),(1434,'游客','https://api.dicebear.com/7.x/avataaars/svg?seed=Guest','我是永劫无间，到此一游','113.45.240.54','中国|北京|北京市|鹏博士',NULL,'2025-05-19 11:24:58'),(1436,'码云星链-用户','http://test.yudao.iocoder.cn/f5660f0f8998e8d89f2d742fedee7cbb7e85ecc505bd33b3cc0f75b6a0395931.png','111','192.168.1.178','内网IP|内网IP',NULL,'2025-06-25 23:03:31'),(1437,'icw','https://api.dicebear.com/6.x/pixel-art/svg?seed=Bunny','1111111','192.168.1.178','内网IP|内网IP',NULL,'2025-06-28 21:58:46'),(1438,'游客','https://api.dicebear.com/7.x/avataaars/svg?seed=Guest','11111','192.168.1.178','内网IP|内网IP',NULL,'2025-06-29 19:18:35'),(1439,'码云星链-超级管理员','http://113.45.240.54:9092/avatar/13f5f184-7714-48b5-8bbc-425fa25bd451_avatar.png','1111111','113.45.240.54','中国|北京|北京市|鹏博士',NULL,'2025-06-30 08:00:43'),(1440,'游客','https://api.dicebear.com/7.x/avataaars/svg?seed=Guest','1111111','113.45.240.54','中国|北京|北京市|鹏博士',NULL,'2025-07-23 20:43:40'),(1441,'icw','http://113.45.240.54:9092/avatar/749af0d0-f94c-410b-916d-56d70f666799_微信图片_20220926121552.jpg','11111111','113.45.240.54','中国|北京|北京市|鹏博士',NULL,'2025-07-23 21:48:25'),(1442,'icw','http://113.45.240.54:9092/avatar/749af0d0-f94c-410b-916d-56d70f666799_微信图片_20220926121552.jpg','11111111','113.45.240.54','中国|北京|北京市|鹏博士',NULL,'2025-07-23 21:58:55'),(1443,'icw','http://113.45.240.54:9092/avatar/749af0d0-f94c-410b-916d-56d70f666799_微信图片_20220926121552.jpg','111111','113.45.240.54','中国|北京|北京市|鹏博士',NULL,'2025-07-23 22:27:34'),(1444,'icw','http://113.45.240.54:9092/avatar/749af0d0-f94c-410b-916d-56d70f666799_微信图片_20220926121552.jpg','1123','113.45.240.54','中国|北京|北京市|鹏博士',NULL,'2025-07-28 14:22:02'),(1445,'icw','http://113.45.240.54:9092/avatar/749af0d0-f94c-410b-916d-56d70f666799_微信图片_20220926121552.jpg','iii\n','113.45.240.54','中国|北京|北京市|鹏博士',NULL,'2025-07-28 14:31:35'),(1446,'icw','http://113.45.240.54:9092/avatar/749af0d0-f94c-410b-916d-56d70f666799_微信图片_20220926121552.jpg','54656','113.45.240.54','中国|北京|北京市|鹏博士',NULL,'2025-07-28 14:48:04');
/*!40000 ALTER TABLE `sys_message` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sys_moment`
--

DROP TABLE IF EXISTS `sys_moment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sys_moment` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键',
  `user_id` bigint DEFAULT NULL COMMENT '用户id',
  `content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci COMMENT '文章内容',
  `images` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci COMMENT '图片',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='说说';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sys_moment`
--

LOCK TABLES `sys_moment` WRITE;
/*!40000 ALTER TABLE `sys_moment` DISABLE KEYS */;
INSERT INTO `sys_moment` VALUES (26,1,'<h1>欢迎来到码云星链</h1><p>☆*: .｡. o(≧▽≦)o .｡.:*☆</p>','http://113.45.240.54:9092/moment/3d5dffcc-bacb-45c6-96e1-ec60f9f4affb_freecompress-Neat-Admin 管理系统 (1).png','2025-04-26 03:01:27');
/*!40000 ALTER TABLE `sys_moment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sys_notice`
--

DROP TABLE IF EXISTS `sys_notice`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sys_notice` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键',
  `content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci COMMENT '公告内容',
  `is_show` int DEFAULT NULL COMMENT '是否展示',
  `position` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '显示位置 （top：顶部，right:右侧）',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='公告';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sys_notice`
--

LOCK TABLES `sys_notice` WRITE;
/*!40000 ALTER TABLE `sys_notice` DISABLE KEYS */;
INSERT INTO `sys_notice` VALUES (2,'欢迎来到码云星链博客网站',1,'right','2025-04-27 17:47:11');
/*!40000 ALTER TABLE `sys_notice` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sys_notifications`
--

DROP TABLE IF EXISTS `sys_notifications`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sys_notifications` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '通知的唯一标识，自增主键',
  `user_id` bigint DEFAULT NULL COMMENT '推送用户id',
  `from_user_id` bigint DEFAULT NULL COMMENT '来自用户id,如评论就存评论的用户id',
  `type` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '通知的类型，如 system、comment、like 等',
  `title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '通知的标题',
  `message` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '通知的具体内容',
  `is_read` tinyint(1) NOT NULL DEFAULT '0' COMMENT '标记通知是否已读，0 表示未读，1 表示已读',
  `article_id` bigint DEFAULT NULL COMMENT '文章id',
  `link` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '跳转链接',
  `create_time` datetime NOT NULL COMMENT '通知的创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=33 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT='消息通知表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sys_notifications`
--

LOCK TABLES `sys_notifications` WRITE;
/*!40000 ALTER TABLE `sys_notifications` DISABLE KEYS */;
INSERT INTO `sys_notifications` VALUES (1,1,1811,'comment','新评论通知','哈哈哈哈哈哈哈哈哈',1,332,NULL,'2025-04-28 17:54:56'),(2,1811,1811,'comment','评论回复通知','***袜带',1,332,NULL,'2025-04-28 17:55:04'),(3,1,1811,'comment','新评论通知','订单创建失败<div>快修</div>',1,298,NULL,'2025-04-28 17:59:23'),(4,1,1811,'comment','新评论通知','<img src=\"https://baidubox-emoji.cdn.bcebos.com/imgs/[亲吻].png\" class=\"emoji\" style=\"width: 30px; height: 30px; vertical-align: middle;\">',1,326,NULL,'2025-04-28 18:11:32'),(5,1811,1811,'comment','评论回复通知','<img src=\"https://baidubox-emoji.cdn.bcebos.com/imgs/[滑稽].png\" class=\"emoji\" style=\"width: 22px; height: 22px; vertical-align: middle;\">',0,326,NULL,'2025-04-28 18:11:47'),(6,1,1,'comment','新评论通知','1111',1,296,NULL,'2025-04-29 16:44:10'),(7,1,1,'comment','新评论通知','11111',1,296,NULL,'2025-04-29 16:44:17'),(8,1,1,'comment','新评论通知','11111',1,296,NULL,'2025-04-29 16:44:22'),(9,1,1,'comment','新评论通知','111111111',1,296,NULL,'2025-04-29 16:44:28'),(10,1,1,'comment','新评论通知','1111111',1,296,NULL,'2025-04-29 16:44:33'),(11,1,1,'comment','新评论通知','111111111',1,296,NULL,'2025-04-29 16:44:39'),(12,1,1,'comment','新评论通知','1111111',1,296,NULL,'2025-04-29 16:44:46'),(13,1,1,'comment','新评论通知','111111',1,296,NULL,'2025-04-29 16:44:52'),(14,1,1,'comment','新评论通知','111111',1,296,NULL,'2025-04-29 16:44:57'),(15,1,1,'comment','新评论通知','11111111',1,296,NULL,'2025-04-29 16:45:02'),(16,1,1,'comment','新评论通知','111111111',1,296,NULL,'2025-04-29 16:45:08'),(17,1,1,'comment','评论回复通知','1111',1,296,NULL,'2025-04-29 16:45:16'),(18,1,1811,'comment','新评论通知','111',1,331,NULL,'2025-04-29 21:27:05'),(19,1,1,'comment','评论回复通知','1',1,296,NULL,'2025-04-30 00:15:21'),(20,1,2,'comment','新评论通知','11',1,331,NULL,'2025-05-09 00:13:38'),(21,1,4,'comment','新评论通知','111',1,329,NULL,'2025-05-10 13:30:40'),(22,1,1,'comment','新评论通知','111',1,331,NULL,'2025-06-29 15:07:02'),(23,1,16,'comment','新评论通知','111<img src=\"https://baidubox-emoji.cdn.bcebos.com/imgs/[嘻嘻].png\" class=\"emoji\" style=\"width: 30px; height: 30px; vertical-align: middle;\">',1,357,NULL,'2025-06-29 22:19:00'),(24,16,16,'comment','评论回复通知','111',1,357,NULL,'2025-06-29 22:19:08'),(25,1,16,'comment','新评论通知','1111111<img src=\"https://baidubox-emoji.cdn.bcebos.com/imgs/[大笑].png\" class=\"emoji\" style=\"width: 30px; height: 30px; vertical-align: middle;\">',0,296,NULL,'2025-07-23 21:58:38'),(26,1,16,'comment','新评论通知','<img src=\"https://baidubox-emoji.cdn.bcebos.com/imgs/[滑稽].png\" class=\"emoji\" style=\"width: 30px; height: 30px; vertical-align: middle;\">1111111',0,296,NULL,'2025-07-23 22:27:09'),(27,1,16,'comment','新评论通知','111',0,296,NULL,'2025-07-28 14:20:39'),(28,1,16,'comment','新评论通知','888',0,296,NULL,'2025-07-28 14:30:34'),(29,1,16,'comment','新评论通知','<img src=\"https://baidubox-emoji.cdn.bcebos.com/imgs/[大笑].png\" class=\"emoji\" style=\"width: 30px; height: 30px; vertical-align: middle;\">',0,296,NULL,'2025-07-28 14:30:41'),(30,1,16,'comment','新评论通知','777<img src=\"https://baidubox-emoji.cdn.bcebos.com/imgs/[困].png\" class=\"emoji\" style=\"width: 30px; height: 30px; vertical-align: middle;\">',0,296,NULL,'2025-07-28 14:46:16'),(31,1,16,'comment','新评论通知','<br>',0,296,NULL,'2025-07-28 15:37:29'),(32,1,16,'comment','新评论通知','<img src=\"https://baidubox-emoji.cdn.bcebos.com/imgs/[可怜].png\" class=\"emoji\" style=\"width: 30px; height: 30px; vertical-align: middle;\">可能',0,296,NULL,'2025-07-28 16:37:52');
/*!40000 ALTER TABLE `sys_notifications` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sys_operate_log`
--

DROP TABLE IF EXISTS `sys_operate_log`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sys_operate_log` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `username` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '操作用户',
  `request_url` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '请求接口',
  `type` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '请求方式',
  `operation_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '操作名称',
  `ip` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT 'ip',
  `source` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT 'ip来源',
  `spend_time` bigint DEFAULT NULL COMMENT '请求接口耗时',
  `create_time` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `params_json` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci COMMENT '请求参数',
  `class_path` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '类地址',
  `method_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '方法名',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2328 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sys_operate_log`
--

LOCK TABLES `sys_operate_log` WRITE;
/*!40000 ALTER TABLE `sys_operate_log` DISABLE KEYS */;
INSERT INTO `sys_operate_log` VALUES (2249,'admin','/sys/role','POST','新增角色','127.0.0.1','内网IP|内网IP',145,'2025-04-27 09:01:59','{\"role\":{\"id\":20,\"code\":\"1\",\"name\":\"1\",\"remarks\":\"\",\"createTime\":1731731340000,\"updateTime\":1731731340000}}','com.mojian.controller.system.SysRoleController','addRole'),(2250,'admin','/sys/role','PUT','修改角色','127.0.0.1','内网IP|内网IP',92,'2025-04-27 09:02:06','{\"role\":{\"id\":20,\"code\":\"1\",\"name\":\"1\",\"remarks\":\"1\",\"createTime\":1731731340000,\"updateTime\":1731731340000}}','com.mojian.controller.system.SysRoleController','updateRole'),(2251,'admin','/sys/user','POST','新增用户','127.0.0.1','内网IP|内网IP',253,'2025-04-27 09:04:46','{\"sysUserAddDto\":{\"user\":{\"id\":1811,\"username\":\"111\",\"password\":\"$2a$10$7hTMqMROhxun7iBkAHARguqIP4o0AVQYhOWGb765DY5akg61LfTMC\",\"status\":1,\"nickname\":\"111\",\"mobile\":\"\",\"email\":\"\",\"sex\":0,\"createTime\":1745715885963},\"roleIds\":[14]}}','com.mojian.controller.system.SysUserController','addUser'),(2252,'admin','/monitor/job/changeStatus','PUT','修改任务状态','127.0.0.1','内网IP|内网IP',116,'2025-04-27 09:41:59','{\"job\":{\"jobId\":1,\"status\":\"0\"}}','com.mojian.controller.SysJobController','changeStatus'),(2253,'admin','/monitor/job/changeStatus','PUT','修改任务状态','127.0.0.1','内网IP|内网IP',108,'2025-04-27 09:42:00','{\"job\":{\"jobId\":2,\"status\":\"0\"}}','com.mojian.controller.SysJobController','changeStatus'),(2254,'admin','/monitor/job/changeStatus','PUT','修改任务状态','127.0.0.1','内网IP|内网IP',106,'2025-04-27 09:42:00','{\"job\":{\"jobId\":3,\"status\":\"0\"}}','com.mojian.controller.SysJobController','changeStatus'),(2255,'admin','/monitor/job/changeStatus','PUT','修改任务状态','127.0.0.1','内网IP|内网IP',108,'2025-04-27 09:42:57','{\"job\":{\"jobId\":1,\"status\":\"1\"}}','com.mojian.controller.SysJobController','changeStatus'),(2256,'admin','/monitor/job/changeStatus','PUT','修改任务状态','127.0.0.1','内网IP|内网IP',107,'2025-04-27 09:42:57','{\"job\":{\"jobId\":2,\"status\":\"1\"}}','com.mojian.controller.SysJobController','changeStatus'),(2257,'admin','/monitor/job/changeStatus','PUT','修改任务状态','127.0.0.1','内网IP|内网IP',106,'2025-04-27 09:42:58','{\"job\":{\"jobId\":3,\"status\":\"1\"}}','com.mojian.controller.SysJobController','changeStatus'),(2258,'admin','/monitor/job','POST','新增定时任务','127.0.0.1','内网IP|内网IP',123,'2025-04-27 09:51:54','{\"job\":{\"jobId\":11,\"jobName\":\"test\",\"jobGroup\":\"DEFAULT\",\"invokeTarget\":\"neatTask.neatParams(\'neat\')\",\"cronExpression\":\"0/15 * * * * ? *\",\"misfirePolicy\":\"3\",\"concurrent\":\"1\",\"status\":\"1\"}}','com.mojian.controller.SysJobController','add'),(2259,'admin','/monitor/job','PUT','修改定时任务','127.0.0.1','内网IP|内网IP',134,'2025-04-27 09:52:31','{\"job\":{\"jobId\":11,\"jobName\":\"test\",\"jobGroup\":\"DEFAULT\",\"invokeTarget\":\"task.neatNoParams\",\"cronExpression\":\"0/15 * * * * ? *\",\"misfirePolicy\":\"3\",\"concurrent\":\"1\",\"status\":\"1\"}}','com.mojian.controller.SysJobController','edit'),(2260,'admin','/monitor/job','POST','新增定时任务','127.0.0.1','内网IP|内网IP',114,'2025-04-27 09:53:43','{\"job\":{\"jobId\":12,\"jobName\":\"定时更新阅读量\",\"jobGroup\":\"DEFAULT\",\"invokeTarget\":\"task.syncQuantity\",\"cronExpression\":\"0 0 0 * * ? *\",\"misfirePolicy\":\"1\",\"concurrent\":\"1\",\"status\":\"1\"}}','com.mojian.controller.SysJobController','add'),(2261,'admin','/sys/role/menus/1','PUT','修改角色权限','127.0.0.1','内网IP|内网IP',217,'2025-04-27 13:01:54','{\"id\":1,\"menuIds\":[68,71,75,76,79,77,78,103,69,80,81,82,83,70,84,85,86,87,110,111,112,113,72,74,88,89,114,115,116,117,118,119,120,121,122,73,90,91,92,93,123,124,125,126,127,96,97,98,99,100,101,102,106,107,108,109,1,14,39,27,28,29,52,2,3,8,40,41,43,9,10,53,11,12,44,136,137,138,139,140,13,48,51,49,50,32,33,55,56,128,129,130,131,54,4,16,17,95,94,18,60,62,65,59,58,61,19,63,66,64,67,104,105,30,31,34]}','com.mojian.controller.system.SysRoleController','updateRoleMenus'),(2262,'admin','/sys/role/menus/14','PUT','修改角色权限','127.0.0.1','内网IP|内网IP',160,'2025-04-27 18:13:31','{\"id\":14,\"menuIds\":[68,71,75,69,80,70,84,72,74,88,73,90,96,97,98,100,101,1,14,39,2,3,9,53,13,51,32,33,55,54,4,16,17,95,18,58,19,66,67,104,30,31,34]}','com.mojian.controller.system.SysRoleController','updateRoleMenus'),(2263,'admin','/sys/user','PUT','修改用户','127.0.0.1','内网IP|内网IP',317,'2025-04-27 22:06:51','{\"user\":{\"user\":{\"id\":1811,\"username\":\"111\",\"status\":1,\"ip\":\"127.0.0.1\",\"ipLocation\":\"内网IP|内网IP\",\"lastLoginTime\":1745735739000,\"nickname\":\"111\",\"mobile\":\"\",\"email\":\"\",\"sex\":0,\"createTime\":1745715886000,\"updateTime\":1745762812700},\"roleIds\":[14]}}','com.mojian.controller.system.SysUserController','update'),(2264,'admin','/sys/role','PUT','修改角色','127.0.0.1','内网IP|内网IP',87,'2025-04-27 22:07:23','{\"role\":{\"id\":20,\"code\":\"1\",\"name\":\"11\",\"remarks\":\"1\",\"createTime\":1731731340000,\"updateTime\":1731731340000}}','com.mojian.controller.system.SysRoleController','updateRole'),(2265,'admin','/sys/user/updProfile','PUT','修改个人信息','127.0.0.1','内网IP|内网IP',47,'2025-04-27 22:07:40','{\"user\":{\"id\":1,\"nickname\":\"码云星链\",\"mobile\":\"18016724816\",\"email\":\"2180323848@qq.com\",\"sex\":1,\"updateTime\":1745762861766}}','com.mojian.controller.system.SysUserController','updateProfile'),(2266,'admin','/monitor/job/changeStatus','PUT','修改任务状态','27.148.48.195','中国|福建省|福州市|电信',56,'2025-05-29 17:56:05','{\"job\":{\"jobId\":2,\"status\":\"0\"}}','com.mojian.controller.SysJobController','changeStatus'),(2267,'admin','/monitor/job/changeStatus','PUT','修改任务状态','27.148.48.195','中国|福建省|福州市|电信',53,'2025-05-29 17:56:05','{\"job\":{\"jobId\":1,\"status\":\"0\"}}','com.mojian.controller.SysJobController','changeStatus'),(2268,'admin','/monitor/job/changeStatus','PUT','修改任务状态','27.148.48.195','中国|福建省|福州市|电信',49,'2025-05-29 17:56:06','{\"job\":{\"jobId\":1,\"status\":\"1\"}}','com.mojian.controller.SysJobController','changeStatus'),(2269,'admin','/monitor/job/changeStatus','PUT','修改任务状态','27.148.48.195','中国|福建省|福州市|电信',48,'2025-05-29 17:56:06','{\"job\":{\"jobId\":2,\"status\":\"1\"}}','com.mojian.controller.SysJobController','changeStatus'),(2270,'admin','/sys/role/menus/15','PUT','修改角色权限','192.168.1.178','内网IP|内网IP',20,'2025-06-25 18:39:56','{\"id\":15,\"menuIds\":[68,71,75,76,79,77,78,110,111,112,113,72,114,115,116,117,118,119,120,121,122,73,90,123,124,96,97,98,99,100,101,102,106,107,1,14,27,28,29,128,129,131]}','com.mojian.controller.system.SysRoleController','updateRoleMenus'),(2271,'admin','/sys/user','PUT','修改用户','192.168.1.178','内网IP|内网IP',35,'2025-06-26 18:57:03','{\"user\":{\"user\":{\"id\":2,\"username\":\"user\",\"status\":0,\"ip\":\"192.168.1.178\",\"ipLocation\":\"内网IP|内网IP\",\"lastLoginTime\":1750931819000,\"nickname\":\"码云星链-用户\",\"avatar\":\"http://test.yudao.iocoder.cn/f5660f0f8998e8d89f2d742fedee7cbb7e85ecc505bd33b3cc0f75b6a0395931.png\",\"sex\":1,\"loginType\":2,\"createTime\":1750824606000,\"updateTime\":1750935423255},\"roleIds\":[2]}}','com.mojian.controller.system.SysUserController','update'),(2272,'admin','/sys/user','PUT','修改用户','192.168.1.178','内网IP|内网IP',44,'2025-06-26 21:07:03','{\"user\":{\"user\":{\"id\":2,\"username\":\"user\",\"status\":1,\"ip\":\"192.168.1.178\",\"ipLocation\":\"内网IP|内网IP\",\"lastLoginTime\":1750935897000,\"nickname\":\"码云星链-用户\",\"avatar\":\"http://test.yudao.iocoder.cn/f5660f0f8998e8d89f2d742fedee7cbb7e85ecc505bd33b3cc0f75b6a0395931.png\",\"sex\":1,\"loginType\":2,\"createTime\":1750824606000,\"updateTime\":1750943223513},\"roleIds\":[2,1]}}','com.mojian.controller.system.SysUserController','update'),(2273,'admin','/sys/user','PUT','修改用户','192.168.1.178','内网IP|内网IP',95,'2025-06-28 23:38:23','{\"user\":{\"user\":{\"id\":1,\"username\":\"admin\",\"status\":1,\"ip\":\"192.168.1.178\",\"ipLocation\":\"内网IP|内网IP\",\"lastLoginTime\":1751125025000,\"nickname\":\"码云星链-管理员\",\"avatar\":\"http://test.yudao.iocoder.cn/f5660f0f8998e8d89f2d742fedee7cbb7e85ecc505bd33b3cc0f75b6a0395931.png\",\"sex\":2,\"loginType\":1,\"createTime\":1750819607000,\"updateTime\":1751125103755},\"roleIds\":[1]}}','com.mojian.controller.system.SysUserController','update'),(2274,'admin','/sys/user','PUT','修改用户','192.168.1.178','内网IP|内网IP',25,'2025-06-28 23:39:58','{\"user\":{\"user\":{\"id\":2,\"username\":\"user\",\"status\":1,\"ip\":\"192.168.1.178\",\"ipLocation\":\"内网IP|内网IP\",\"lastLoginTime\":1750935897000,\"nickname\":\"码云星链-用户\",\"avatar\":\"http://test.yudao.iocoder.cn/f5660f0f8998e8d89f2d742fedee7cbb7e85ecc505bd33b3cc0f75b6a0395931.png\",\"sex\":0,\"loginType\":2,\"createTime\":1750824606000,\"updateTime\":1751125198275},\"roleIds\":[4]}}','com.mojian.controller.system.SysUserController','update'),(2275,'admin','/sys/user','PUT','修改用户','192.168.1.178','内网IP|内网IP',17,'2025-06-28 23:40:02','{\"user\":{\"user\":{\"id\":2,\"username\":\"user\",\"status\":1,\"ip\":\"192.168.1.178\",\"ipLocation\":\"内网IP|内网IP\",\"lastLoginTime\":1750935897000,\"nickname\":\"码云星链-用户\",\"avatar\":\"http://test.yudao.iocoder.cn/f5660f0f8998e8d89f2d742fedee7cbb7e85ecc505bd33b3cc0f75b6a0395931.png\",\"sex\":1,\"loginType\":2,\"createTime\":1750824606000,\"updateTime\":1751125202301},\"roleIds\":[4]}}','com.mojian.controller.system.SysUserController','update'),(2276,'admin','/sys/user','PUT','修改用户','192.168.1.178','内网IP|内网IP',56,'2025-06-29 10:45:25','{\"user\":{\"user\":{\"id\":2,\"username\":\"user\",\"status\":1,\"ip\":\"192.168.1.178\",\"ipLocation\":\"内网IP|内网IP\",\"lastLoginTime\":1750935897000,\"nickname\":\"码云星链-用户\",\"avatar\":\"http://test.yudao.iocoder.cn/f5660f0f8998e8d89f2d742fedee7cbb7e85ecc505bd33b3cc0f75b6a0395931.png\",\"sex\":1,\"loginType\":2,\"createTime\":1750824606000,\"updateTime\":1751165125347},\"roleIds\":[4]}}','com.mojian.controller.system.SysUserController','update'),(2277,'admin','/sys/user','PUT','修改用户','192.168.1.178','内网IP|内网IP',24,'2025-06-29 10:45:33','{\"user\":{\"user\":{\"id\":14,\"username\":\"2180323848@qq.com\",\"status\":1,\"ip\":\"192.168.1.178\",\"ipLocation\":\"内网IP|内网IP\",\"lastLoginTime\":1751125721000,\"nickname\":\"icw\",\"avatar\":\"https://api.dicebear.com/6.x/pixel-art/svg?seed=Bunny\",\"email\":\"2180323848@qq.com\",\"sex\":1,\"loginType\":1,\"createTime\":1750904354000,\"updateTime\":1751165133664},\"roleIds\":[4]}}','com.mojian.controller.system.SysUserController','update'),(2278,'admin','/sys/user','PUT','修改用户','192.168.1.178','内网IP|内网IP',15,'2025-06-29 10:50:19','{\"user\":{\"user\":{\"id\":14,\"username\":\"2180323848@qq.com\",\"status\":1,\"ip\":\"192.168.1.178\",\"ipLocation\":\"内网IP|内网IP\",\"lastLoginTime\":1751125721000,\"nickname\":\"icw\",\"avatar\":\"https://api.dicebear.com/6.x/pixel-art/svg?seed=Bunny\",\"email\":\"2180323848@qq.com\",\"sex\":1,\"loginType\":1,\"createTime\":1750904354000,\"updateTime\":1751165419017},\"roleIds\":[2]}}','com.mojian.controller.system.SysUserController','update'),(2279,'admin','/sys/user','PUT','修改用户','192.168.1.178','内网IP|内网IP',12,'2025-06-29 10:51:09','{\"user\":{\"user\":{\"id\":1,\"username\":\"admin\",\"status\":0,\"ip\":\"192.168.1.178\",\"ipLocation\":\"内网IP|内网IP\",\"lastLoginTime\":1751165102000,\"nickname\":\"码云星链-管理员\",\"avatar\":\"http://test.yudao.iocoder.cn/f5660f0f8998e8d89f2d742fedee7cbb7e85ecc505bd33b3cc0f75b6a0395931.png\",\"sex\":2,\"loginType\":1,\"createTime\":1750819607000,\"updateTime\":1751165469071},\"roleIds\":[1]}}','com.mojian.controller.system.SysUserController','update'),(2280,'admin','/sys/user','PUT','修改用户','192.168.1.178','内网IP|内网IP',10,'2025-06-29 10:51:14','{\"user\":{\"user\":{\"id\":1,\"username\":\"admin\",\"status\":1,\"ip\":\"192.168.1.178\",\"ipLocation\":\"内网IP|内网IP\",\"lastLoginTime\":1751165102000,\"nickname\":\"码云星链-管理员\",\"avatar\":\"http://test.yudao.iocoder.cn/f5660f0f8998e8d89f2d742fedee7cbb7e85ecc505bd33b3cc0f75b6a0395931.png\",\"sex\":2,\"loginType\":1,\"createTime\":1750819607000,\"updateTime\":1751165474236},\"roleIds\":[1]}}','com.mojian.controller.system.SysUserController','update'),(2281,'admin','/sys/user/updProfile','PUT','修改个人信息','192.168.1.178','内网IP|内网IP',88,'2025-06-29 11:19:31','{\"user\":{\"id\":1,\"nickname\":\"码云星链-管理员\",\"mobile\":\"18016724816\",\"sex\":2,\"updateTime\":1751167171008}}','com.mojian.controller.system.SysUserController','updateProfile'),(2282,'admin','/sys/user/updProfile','PUT','修改个人信息','192.168.1.178','内网IP|内网IP',13,'2025-06-29 11:20:05','{\"user\":{\"id\":1,\"nickname\":\"码云星链-管理员\",\"mobile\":\"18016724816\",\"email\":\"2180323848@qq.ccm\",\"sex\":2,\"updateTime\":1751167205091}}','com.mojian.controller.system.SysUserController','updateProfile'),(2283,'admin','/sys/user/updProfile','PUT','修改个人信息','192.168.1.178','内网IP|内网IP',9,'2025-06-29 11:20:14','{\"user\":{\"id\":1,\"nickname\":\"码云星链-管理员\",\"mobile\":\"18016724816\",\"email\":\"2180323848@qq.ccm\",\"sex\":1,\"updateTime\":1751167214611}}','com.mojian.controller.system.SysUserController','updateProfile'),(2284,'admin','/sys/user/updProfile','PUT','修改个人信息','192.168.1.178','内网IP|内网IP',68,'2025-06-29 11:47:04','{\"user\":{\"id\":1,\"avatar\":\"http://127.0.0.1:80/localFile/local-plus/20250629/avatar/6a4a8483-973d-4fb0-92b8-22d8ab547650_avatar.png\",\"updateTime\":1751168824502}}','com.mojian.controller.system.SysUserController','updateProfile'),(2285,'admin','/sys/user/updProfile','PUT','修改个人信息','192.168.1.178','内网IP|内网IP',25,'2025-06-29 11:47:21','{\"user\":{\"id\":1,\"avatar\":\"http://127.0.0.1:80/localFile/local-plus/20250629/avatar/3e970ca4-22ef-4be5-acc7-e38ed0715cfe_avatar.png\",\"updateTime\":1751168841816}}','com.mojian.controller.system.SysUserController','updateProfile'),(2286,'admin','/sys/user/updProfile','PUT','修改个人信息','192.168.1.178','内网IP|内网IP',19,'2025-06-29 11:47:32','{\"user\":{\"id\":1,\"avatar\":\"http://127.0.0.1:80/localFile/local-plus/20250629/avatar/05bafa63-2413-4b7c-bffe-ceacd86ebe7c_avatar.png\",\"updateTime\":1751168852669}}','com.mojian.controller.system.SysUserController','updateProfile'),(2287,'admin','/sys/user/updProfile','PUT','修改个人信息','192.168.1.178','内网IP|内网IP',11,'2025-06-29 11:47:43','{\"user\":{\"id\":1,\"avatar\":\"http://127.0.0.1:80/localFile/local-plus/20250629/avatar/1893ffee-b72f-434b-b3a3-92512ca0b29b_avatar.png\",\"updateTime\":1751168863490}}','com.mojian.controller.system.SysUserController','updateProfile'),(2288,'admin','/sys/user','PUT','修改用户','192.168.1.178','内网IP|内网IP',25,'2025-06-29 11:50:18','{\"user\":{\"user\":{\"id\":1,\"username\":\"admin\",\"status\":1,\"ip\":\"192.168.1.178\",\"ipLocation\":\"内网IP|内网IP\",\"lastLoginTime\":1751165102000,\"nickname\":\"码云星链-管理员\",\"avatar\":\"http://127.0.0.1:80/localFile/local-plus/20250629/avatar/be71527d-75f7-4863-943a-e0b998a43d50_100n0x000000lfrm69B27.jpg\",\"mobile\":\"18016724816\",\"email\":\"2180323848@qq.ccm\",\"sex\":1,\"loginType\":1,\"createTime\":1750819607000,\"updateTime\":1751169018910},\"roleIds\":[1]}}','com.mojian.controller.system.SysUserController','update'),(2289,'admin','/sys/role/menus/4','PUT','修改角色权限','192.168.1.178','内网IP|内网IP',49,'2025-06-29 12:10:47','{\"id\":4,\"menuIds\":[68,71,75,76,79,77,78,103,69,80,81,82,83,70,84,85,86,87,110,111,112,113,72,74,88,89,114,115,116,117,118,119,120,121,122,73,90,91,92,93,123,124,125,126,127,96,97,98,99,100,101,102,106,107,108,109,1,14,39,27,28,29,52,9,10,53,11,12,44,136,137,138,139,140,13,48,51,49,50,32,33,55,56,128,129,130,131,54,4,16,17,95,94,18,60,62,65,59,58,61,19,63,66,64,67,104,105,30,31]}','com.mojian.controller.system.SysRoleController','updateRoleMenus'),(2290,'admin','/sys/user','PUT','修改用户','192.168.1.178','内网IP|内网IP',42,'2025-06-29 13:08:53','{\"user\":{\"user\":{\"id\":16,\"username\":\"13301976\",\"status\":1,\"ip\":\"192.168.1.178\",\"ipLocation\":\"内网IP|内网IP\",\"lastLoginTime\":1751115225000,\"nickname\":\"icw\",\"avatar\":\"http://127.0.0.1:80/localFile/local-plus/20250629/avatar/7b533519-389e-41dc-9a3c-71dc0ce3561f_R-C (2).jfif\",\"sex\":1,\"loginType\":3,\"createTime\":1750935033000,\"updateTime\":1751173733748},\"roleIds\":[2]}}','com.mojian.controller.system.SysUserController','update'),(2291,'admin','/sys/user','PUT','修改用户','192.168.1.178','内网IP|内网IP',93,'2025-06-29 17:43:54','{\"user\":{\"user\":{\"id\":1,\"username\":\"admin\",\"status\":1,\"ip\":\"192.168.1.178\",\"ipLocation\":\"内网IP|内网IP\",\"lastLoginTime\":1751190130000,\"nickname\":\"码云星链-超级管理员\",\"avatar\":\"http://127.0.0.1:80/localFile/local-plus/20250629/avatar/be71527d-75f7-4863-943a-e0b998a43d50_100n0x000000lfrm69B27.jpg\",\"mobile\":\"18016724816\",\"email\":\"206413428@qq.com\",\"sex\":1,\"loginType\":1,\"createTime\":1750819607000,\"updateTime\":1751190234242},\"roleIds\":[1]}}','com.mojian.controller.system.SysUserController','update'),(2292,'admin','/sys/role/menus/4','PUT','修改角色权限','192.168.1.178','内网IP|内网IP',80,'2025-06-29 20:53:36','{\"id\":4,\"menuIds\":[68,71,75,76,79,77,78,103,69,80,81,82,83,70,84,85,86,87,110,111,112,113,72,74,88,89,114,115,116,117,118,119,120,121,122,73,90,91,92,93,123,124,125,126,127,96,97,98,99,100,101,102,106,107,108,109,141,1,14,39,27,28,29,52,9,10,53,11,12,44,136,137,138,139,140,13,48,51,49,50,32,33,55,56,128,129,130,131,54,4,16,17,95,94,18,60,62,65,59,58,61,19,63,66,64,67,104,105,30,31]}','com.mojian.controller.system.SysRoleController','updateRoleMenus'),(2293,'admin','/sys/role/menus/2','PUT','修改角色权限','192.168.1.178','内网IP|内网IP',13,'2025-06-29 20:58:28','{\"id\":2,\"menuIds\":[68,71,75,76,79,77,78,103,110,111,112,113,72,114,115,116,117,118,119,120,121,122,73,90,123,124,96,97,98,99,100,101,102,1,14,27,28,29,2,8,128,129,131,4]}','com.mojian.controller.system.SysRoleController','updateRoleMenus'),(2294,'admin','/sys/user','PUT','修改用户','192.168.1.178','内网IP|内网IP',78,'2025-06-29 21:07:27','{\"user\":{\"user\":{\"id\":2,\"username\":\"user\",\"status\":1,\"ip\":\"192.168.1.178\",\"ipLocation\":\"内网IP|内网IP\",\"lastLoginTime\":1750935897000,\"nickname\":\"码云星链-用户\",\"avatar\":\"http://test.yudao.iocoder.cn/f5660f0f8998e8d89f2d742fedee7cbb7e85ecc505bd33b3cc0f75b6a0395931.png\",\"sex\":1,\"loginType\":2,\"createTime\":1750824606000,\"updateTime\":1751202446960},\"roleIds\":[2]}}','com.mojian.controller.system.SysUserController','update'),(2295,'admin','/sys/user','PUT','修改用户','192.168.1.178','内网IP|内网IP',20,'2025-06-29 21:07:52','{\"user\":{\"user\":{\"id\":2,\"username\":\"user\",\"status\":1,\"ip\":\"192.168.1.178\",\"ipLocation\":\"内网IP|内网IP\",\"lastLoginTime\":1750935897000,\"nickname\":\"码云星链-用户\",\"avatar\":\"http://test.yudao.iocoder.cn/f5660f0f8998e8d89f2d742fedee7cbb7e85ecc505bd33b3cc0f75b6a0395931.png\",\"sex\":1,\"loginType\":2,\"createTime\":1750824606000,\"updateTime\":1751202472613},\"roleIds\":[1]}}','com.mojian.controller.system.SysUserController','update'),(2296,'admin','/sys/user','PUT','修改用户','192.168.1.178','内网IP|内网IP',22,'2025-06-29 21:08:01','{\"user\":{\"user\":{\"id\":14,\"username\":\"2180323848@qq.com\",\"status\":1,\"ip\":\"192.168.1.178\",\"ipLocation\":\"内网IP|内网IP\",\"lastLoginTime\":1751199391000,\"nickname\":\"icw\",\"avatar\":\"https://api.dicebear.com/6.x/pixel-art/svg?seed=Bunny\",\"email\":\"2180323848@qq.com\",\"sex\":1,\"loginType\":1,\"createTime\":1750904354000,\"updateTime\":1751202481394},\"roleIds\":[4]}}','com.mojian.controller.system.SysUserController','update'),(2297,'admin','/sys/user/updProfile','PUT','修改个人信息','182.98.27.66','中国|江西省|赣州市|电信',48,'2025-06-30 05:17:34','{\"user\":{\"id\":1,\"avatar\":\"http://113.45.240.54:80/localFilelocal-plus/20250630/avatar/c13dceaa-b9ca-4cdc-b156-51c2faf30e5c_avatar.png\",\"updateTime\":1751231854012}}','com.mojian.controller.system.SysUserController','updateProfile'),(2298,'admin','/sys/user/updProfile','PUT','修改个人信息','182.98.27.66','中国|江西省|赣州市|电信',37,'2025-06-30 05:18:05','{\"user\":{\"id\":1,\"avatar\":\"http://113.45.240.54:80/localFilelocal-plus/20250630/avatar/dcb08504-f0a7-4f13-b193-6ee266b612bb_avatar.png\",\"updateTime\":1751231885041}}','com.mojian.controller.system.SysUserController','updateProfile'),(2299,'admin','/sys/user/updProfile','PUT','修改个人信息','182.98.27.66','中国|江西省|赣州市|电信',39,'2025-06-30 05:22:23','{\"user\":{\"id\":1,\"avatar\":\"http://113.45.240.54:80/localFilelocal-plus/20250630/avatar/6e448b29-5195-4d5a-a482-d6be0a02d2b7_avatar.png\",\"updateTime\":1751232143509}}','com.mojian.controller.system.SysUserController','updateProfile'),(2300,'admin','/sys/user/updProfile','PUT','修改个人信息','182.98.27.66','中国|江西省|赣州市|电信',126,'2025-06-30 05:39:22','{\"user\":{\"id\":1,\"avatar\":\"http://113.45.240.54:80/opt/uploadPath20250630/avatar/cf1952ee-2d28-474f-9a3e-ed44bf18e60b_avatar.png\",\"updateTime\":1751233162623}}','com.mojian.controller.system.SysUserController','updateProfile'),(2301,'admin','/sys/user/updProfile','PUT','修改个人信息','182.98.27.66','中国|江西省|赣州市|电信',39,'2025-06-30 05:48:03','{\"user\":{\"id\":1,\"avatar\":\"http://113.45.240.54:80/opt/uploadPath/avatar/64e933a4-13af-4b8e-9d57-dc7bf3cc07e9_avatar.png\",\"updateTime\":1751233683889}}','com.mojian.controller.system.SysUserController','updateProfile'),(2302,'admin','/sys/user/updProfile','PUT','修改个人信息','182.98.27.66','中国|江西省|赣州市|电信',35,'2025-06-30 05:49:26','{\"user\":{\"id\":1,\"avatar\":\"http://113.45.240.54:80/opt/uploadPath/avatar/a80e71c8-5d91-4f66-b791-85748745e054_avatar.png\",\"updateTime\":1751233766869}}','com.mojian.controller.system.SysUserController','updateProfile'),(2303,'admin','/sys/user/updProfile','PUT','修改个人信息','182.98.27.66','中国|江西省|赣州市|电信',35,'2025-06-30 05:50:30','{\"user\":{\"id\":1,\"avatar\":\"http://113.45.240.54:80/opt/uploadPath/avatar/7c87b941-8934-417b-ae0f-3171d98cbd1a_avatar.png\",\"updateTime\":1751233829983}}','com.mojian.controller.system.SysUserController','updateProfile'),(2304,'admin','/sys/user/updProfile','PUT','修改个人信息','182.98.27.66','中国|江西省|赣州市|电信',60,'2025-06-30 05:53:35','{\"user\":{\"id\":1,\"avatar\":\"http://113.45.240.54:80/opt/uploadPath/avatar/3d4aed35-493f-42f5-873f-08d7e6694ef1_avatar.png\",\"updateTime\":1751234015448}}','com.mojian.controller.system.SysUserController','updateProfile'),(2305,'admin','/sys/user/updProfile','PUT','修改个人信息','182.107.225.16','中国|江西省|赣州市|电信',116,'2025-06-30 05:58:25','{\"user\":{\"id\":1,\"avatar\":\"http://113.45.240.54/opt/uploadPath/avatar/fb937a1d-7406-418b-bdfe-a217fd2e7fdf_avatar.png\",\"updateTime\":1751234305354}}','com.mojian.controller.system.SysUserController','updateProfile'),(2306,'admin','/sys/user/updProfile','PUT','修改个人信息','182.107.225.16','中国|江西省|赣州市|电信',34,'2025-06-30 05:59:59','{\"user\":{\"id\":1,\"avatar\":\"http://113.45.240.54/opt/uploadPath/avatar/1b0d4060-81bd-4b7a-a151-9d48cf8f9a49_avatar.png\",\"updateTime\":1751234399702}}','com.mojian.controller.system.SysUserController','updateProfile'),(2307,'admin','/sys/user/updProfile','PUT','修改个人信息','182.107.225.16','中国|江西省|赣州市|电信',36,'2025-06-30 06:01:00','{\"user\":{\"id\":1,\"avatar\":\"http://113.45.240.54/opt/uploadPath/avatar/8a6063bd-104f-423c-bc53-c8bf6734c91a_avatar.png\",\"updateTime\":1751234460757}}','com.mojian.controller.system.SysUserController','updateProfile'),(2308,'admin','/sys/user/updProfile','PUT','修改个人信息','182.107.225.16','中国|江西省|赣州市|电信',34,'2025-06-30 06:01:16','{\"user\":{\"id\":1,\"avatar\":\"http://113.45.240.54/opt/uploadPath/avatar/4b56748e-f11b-4b0d-bfd8-2e0de3c94d1f_avatar.png\",\"updateTime\":1751234476871}}','com.mojian.controller.system.SysUserController','updateProfile'),(2309,'admin','/sys/user/updProfile','PUT','修改个人信息','182.107.225.16','中国|江西省|赣州市|电信',111,'2025-06-30 06:02:04','{\"user\":{\"id\":1,\"avatar\":\"http:\\\\\\\\113.45.240.54\\\\opt\\\\uploadPath\\\\avatar/c494cf22-f27f-4ee7-b757-aebd84769118_avatar.png\",\"updateTime\":1751234524259}}','com.mojian.controller.system.SysUserController','updateProfile'),(2310,'admin','/sys/user/updProfile','PUT','修改个人信息','182.107.225.16','中国|江西省|赣州市|电信',118,'2025-06-30 06:10:37','{\"user\":{\"id\":1,\"avatar\":\"http:\\\\\\\\113.45.240.54:9092\\\\opt\\\\uploadPath\\\\avatar\\\\c8952dbe-e0c0-47b8-9e5e-847d6b564742_avatar.png\",\"updateTime\":1751235037493}}','com.mojian.controller.system.SysUserController','updateProfile'),(2311,'admin','/sys/user/updProfile','PUT','修改个人信息','182.107.225.16','中国|江西省|赣州市|电信',44,'2025-06-30 06:17:11','{\"user\":{\"id\":1,\"avatar\":\"http:\\\\\\\\113.45.240.54:9092\\\\opt\\\\uploadPath\\\\avatar\\\\41597415-0e94-4157-8a41-6b4ff841ed86_avatar.png\",\"updateTime\":1751235430998}}','com.mojian.controller.system.SysUserController','updateProfile'),(2312,'admin','/sys/user/updProfile','PUT','修改个人信息','182.107.225.16','中国|江西省|赣州市|电信',39,'2025-06-30 06:18:04','{\"user\":{\"id\":1,\"avatar\":\"http:\\\\\\\\113.45.240.54:9092\\\\opt\\\\uploadPath\\\\avatar\\\\3b3e5035-6c02-4528-8aa2-557ad6fb1b03_avatar.png\",\"updateTime\":1751235484591}}','com.mojian.controller.system.SysUserController','updateProfile'),(2313,'admin','/sys/user/updProfile','PUT','修改个人信息','182.107.225.16','中国|江西省|赣州市|电信',115,'2025-06-30 06:20:28','{\"user\":{\"id\":1,\"avatar\":\"113.45.240.54:9092/opt/uploadPath/avatar\\\\c2af38a4-7202-4ab9-8665-7f0cea2ba631_avatar.png\",\"updateTime\":1751235628392}}','com.mojian.controller.system.SysUserController','updateProfile'),(2314,'admin','/sys/user/updProfile','PUT','修改个人信息','182.107.225.16','中国|江西省|赣州市|电信',40,'2025-06-30 06:21:41','{\"user\":{\"id\":1,\"avatar\":\"113.45.240.54:9092/opt/uploadPath/avatar\\\\1642335c-68c5-46a0-8765-163b57cc67f6_avatar.png\",\"updateTime\":1751235701319}}','com.mojian.controller.system.SysUserController','updateProfile'),(2315,'admin','/sys/user/updProfile','PUT','修改个人信息','182.107.225.16','中国|江西省|赣州市|电信',107,'2025-06-30 06:22:20','{\"user\":{\"id\":1,\"avatar\":\"http://113.45.240.54:9092/opt/uploadPath/avatar\\\\754978d3-0a3b-4127-b229-3608aa56a4b7_avatar.png\",\"updateTime\":1751235739960}}','com.mojian.controller.system.SysUserController','updateProfile'),(2316,'admin','/sys/user/updProfile','PUT','修改个人信息','182.107.225.16','中国|江西省|赣州市|电信',114,'2025-06-30 06:29:05','{\"user\":{\"id\":1,\"avatar\":\"http://113.45.240.54:9092/opt/uploadPath/avatar/0dd47f78-5855-4dc1-aeed-54373ecf8c25_avatar.png\",\"updateTime\":1751236145461}}','com.mojian.controller.system.SysUserController','updateProfile'),(2317,'admin','/sys/user/updProfile','PUT','修改个人信息','182.107.225.16','中国|江西省|赣州市|电信',105,'2025-06-30 06:46:24','{\"user\":{\"id\":1,\"avatar\":\"http://113.45.240.54:9092/\\\"\\\"avatar/603b6a81-752f-4aaa-b602-c3fd3cf91bff_avatar.png\",\"updateTime\":1751237184147}}','com.mojian.controller.system.SysUserController','updateProfile'),(2318,'admin','/sys/user/updProfile','PUT','修改个人信息','182.107.225.16','中国|江西省|赣州市|电信',111,'2025-06-30 06:47:14','{\"user\":{\"id\":1,\"avatar\":\"http://113.45.240.54:9092/avatar/20ccf3cd-9501-4dea-83d1-cbc6fe53beff_avatar.png\",\"updateTime\":1751237234909}}','com.mojian.controller.system.SysUserController','updateProfile'),(2319,'admin','/sys/user/updProfile','PUT','修改个人信息','182.107.225.16','中国|江西省|赣州市|电信',129,'2025-06-30 06:50:39','{\"user\":{\"id\":1,\"avatar\":\"http://113.45.240.54:9092/avatar/95c5c4d4-a476-4efe-873e-99dc2b6c1863_avatar.png\",\"updateTime\":1751237439883}}','com.mojian.controller.system.SysUserController','updateProfile'),(2320,'admin','/sys/user/updProfile','PUT','修改个人信息','182.107.225.16','中国|江西省|赣州市|电信',116,'2025-06-30 06:52:59','{\"user\":{\"id\":1,\"avatar\":\"http://113.45.240.54:9092/avatar/a5c10c94-a816-4f8c-85f8-9d6e7e265043_avatar.png\",\"updateTime\":1751237579877}}','com.mojian.controller.system.SysUserController','updateProfile'),(2321,'admin','/sys/user/updProfile','PUT','修改个人信息','182.107.225.16','中国|江西省|赣州市|电信',42,'2025-06-30 06:54:31','{\"user\":{\"id\":1,\"avatar\":\"http://113.45.240.54:9092/avatar/2037f39d-0961-4413-93c3-73d87f54acf0_avatar.png\",\"updateTime\":1751237671642}}','com.mojian.controller.system.SysUserController','updateProfile'),(2322,'admin','/sys/user','PUT','修改用户','182.107.225.16','中国|江西省|赣州市|电信',95,'2025-06-30 06:58:39','{\"user\":{\"user\":{\"id\":2,\"username\":\"user\",\"status\":1,\"ip\":\"192.168.101.8\",\"ipLocation\":\"内网IP|内网IP\",\"lastLoginTime\":1751234235000,\"nickname\":\"码云星链-用户\",\"avatar\":\"http://113.45.240.54:9092/avatar/efb77dae-458d-4a37-989c-6db78eabb935_100n0x000000lfrm69B27.jpg\",\"sex\":1,\"loginType\":2,\"createTime\":1750824606000,\"updateTime\":1751237919906},\"roleIds\":[1]}}','com.mojian.controller.system.SysUserController','update'),(2323,'admin','/sys/user','PUT','修改用户','182.107.225.16','中国|江西省|赣州市|电信',73,'2025-06-30 06:58:47','{\"user\":{\"user\":{\"id\":3,\"username\":\"111\",\"status\":1,\"ip\":\"192.168.0.107\",\"ipLocation\":\"内网IP|内网IP\",\"lastLoginTime\":1751230271000,\"nickname\":\"码云星链-用户\",\"avatar\":\"http://113.45.240.54:9092/avatar/d3443d3e-5a78-4923-b126-164dfc7b8f9d_微信图片_20220926121552.jpg\",\"sex\":1,\"loginType\":2,\"createTime\":1750824606000,\"updateTime\":1751237927740},\"roleIds\":[2]}}','com.mojian.controller.system.SysUserController','update'),(2324,'admin','/sys/user','PUT','修改用户','182.107.225.16','中国|江西省|赣州市|电信',81,'2025-06-30 06:58:54','{\"user\":{\"user\":{\"id\":16,\"username\":\"13301976\",\"status\":1,\"ip\":\"192.168.1.178\",\"ipLocation\":\"内网IP|内网IP\",\"lastLoginTime\":1751201847000,\"nickname\":\"icw\",\"avatar\":\"http://113.45.240.54:9092/avatar/749af0d0-f94c-410b-916d-56d70f666799_微信图片_20220926121552.jpg\",\"sex\":1,\"loginType\":3,\"createTime\":1750935033000,\"updateTime\":1751237934553},\"roleIds\":[2]}}','com.mojian.controller.system.SysUserController','update'),(2325,'admin','/sys/user/updProfile','PUT','修改个人信息','36.248.156.86','中国|福建省|宁德市|联通',39,'2025-06-30 07:16:35','{\"user\":{\"id\":1,\"avatar\":\"http://113.45.240.54:9092/avatar/13f5f184-7714-48b5-8bbc-425fa25bd451_avatar.png\",\"updateTime\":1751238995888}}','com.mojian.controller.system.SysUserController','updateProfile'),(2326,'admin','/sys/user/updProfile','PUT','修改个人信息','182.107.225.16','中国|江西省|赣州市|电信',45,'2025-06-30 08:53:12','{\"user\":{\"id\":1,\"avatar\":\"http://113.45.240.54:9092/avatar/c5fc03ab-640b-4231-879f-381c7922840d_avatar.png\",\"updateTime\":1751244792655}}','com.mojian.controller.system.SysUserController','updateProfile'),(2327,'admin','/sys/user/updProfile','PUT','修改个人信息','182.107.225.16','中国|江西省|赣州市|电信',40,'2025-06-30 08:53:34','{\"user\":{\"id\":1,\"avatar\":\"http://113.45.240.54:9092/avatar/6bdadd75-f521-441b-8b16-ccefdaa59cfc_avatar.png\",\"updateTime\":1751244814132}}','com.mojian.controller.system.SysUserController','updateProfile');
/*!40000 ALTER TABLE `sys_operate_log` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sys_photo`
--

DROP TABLE IF EXISTS `sys_photo`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sys_photo` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键',
  `album_id` bigint NOT NULL COMMENT '相册id',
  `description` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '图片描述',
  `url` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '图片地址',
  `record_time` date DEFAULT NULL COMMENT '记录时间',
  `sort` int DEFAULT NULL COMMENT '排序',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='照片';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sys_photo`
--

LOCK TABLES `sys_photo` WRITE;
/*!40000 ALTER TABLE `sys_photo` DISABLE KEYS */;
INSERT INTO `sys_photo` VALUES (2,7,'1','img/logo.jpeg',NULL,1,'2025-04-26 21:59:41'),(3,7,'2','img/logo.jpeg',NULL,1,'2025-04-26 22:00:33'),(4,7,'caoshen\n','img/logo.jpeg','2025-04-26',1,'2025-04-26 22:07:59'),(5,6,'夕阳','http://113.45.240.54:9092/photo/9ff81d22-7d37-4105-b2b4-4b4b11023c8c_微信图片_20220926121515.jpg','2025-06-27',1,'2025-07-28 16:28:26'),(6,8,'彩虹','http://113.45.240.54:9092/photo/2bae11bb-8145-4cd4-9fad-9ae4997a4862_微信图片_20221011191936.jpg','2025-06-12',1,'2025-07-28 16:28:45');
/*!40000 ALTER TABLE `sys_photo` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sys_resource`
--

DROP TABLE IF EXISTS `sys_resource`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sys_resource` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键',
  `user_id` bigint NOT NULL COMMENT '用户id',
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '资源名',
  `category` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '分类',
  `downloads` int DEFAULT NULL COMMENT '下载量',
  `is_free` int DEFAULT NULL COMMENT '是否免费',
  `pay_type` int DEFAULT NULL COMMENT '付费方式',
  `pan_path` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '网盘地址',
  `pan_code` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '网盘验证码',
  `status` int DEFAULT NULL COMMENT '状态',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT='资源表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sys_resource`
--

LOCK TABLES `sys_resource` WRITE;
/*!40000 ALTER TABLE `sys_resource` DISABLE KEYS */;
/*!40000 ALTER TABLE `sys_resource` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sys_role`
--

DROP TABLE IF EXISTS `sys_role`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sys_role` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `code` varchar(50) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL COMMENT '角色编码',
  `name` varchar(50) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL COMMENT '角色名称',
  `remarks` varchar(500) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL COMMENT '角色描述',
  `create_time` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8mb3 COMMENT='角色表 ';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sys_role`
--

LOCK TABLES `sys_role` WRITE;
/*!40000 ALTER TABLE `sys_role` DISABLE KEYS */;
INSERT INTO `sys_role` VALUES (1,'super_admin','超级管理员','拥有一切权限\n','2024-11-16 12:29:00','2024-11-16 12:29:00'),(2,'user','用户','仅提供演示用，所有按钮权限可看到但不能操作','2024-11-21 22:59:30','2024-11-21 22:59:29'),(3,'demo','演示账号','仅提供演示用，所有按钮权限可看到但不能操作','2025-06-25 18:42:31','2025-06-25 18:42:31'),(4,'admin','管理员','拥有绝大部分权限','2025-06-28 22:52:26','2025-06-28 22:52:26');
/*!40000 ALTER TABLE `sys_role` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sys_role_menu`
--

DROP TABLE IF EXISTS `sys_role_menu`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sys_role_menu` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `role_id` int DEFAULT NULL COMMENT '角色ID',
  `menu_id` int DEFAULT NULL COMMENT '菜单ID',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=861 DEFAULT CHARSET=utf8mb3 COMMENT='角色-权限资源关联表 ';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sys_role_menu`
--

LOCK TABLES `sys_role_menu` WRITE;
/*!40000 ALTER TABLE `sys_role_menu` DISABLE KEYS */;
INSERT INTO `sys_role_menu` VALUES (394,1,68),(395,1,71),(396,1,75),(397,1,76),(398,1,79),(399,1,77),(400,1,78),(401,1,103),(402,1,69),(403,1,80),(404,1,81),(405,1,82),(406,1,83),(407,1,70),(408,1,84),(409,1,85),(410,1,86),(411,1,87),(412,1,110),(413,1,111),(414,1,112),(415,1,113),(416,1,72),(417,1,74),(418,1,88),(419,1,89),(420,1,114),(421,1,115),(422,1,116),(423,1,117),(424,1,118),(425,1,119),(426,1,120),(427,1,121),(428,1,122),(429,1,73),(430,1,90),(431,1,91),(432,1,92),(433,1,93),(434,1,123),(435,1,124),(436,1,125),(437,1,126),(438,1,127),(439,1,96),(440,1,97),(441,1,98),(442,1,99),(443,1,100),(444,1,101),(445,1,102),(446,1,106),(447,1,107),(448,1,108),(449,1,109),(450,1,1),(451,1,14),(452,1,39),(453,1,27),(454,1,28),(455,1,29),(456,1,52),(457,1,2),(458,1,3),(459,1,8),(460,1,40),(461,1,41),(462,1,43),(463,1,9),(464,1,10),(465,1,53),(466,1,11),(467,1,12),(468,1,44),(469,1,136),(470,1,137),(471,1,138),(472,1,139),(473,1,140),(474,1,13),(475,1,48),(476,1,51),(477,1,49),(478,1,50),(479,1,32),(480,1,33),(481,1,55),(482,1,56),(483,1,128),(484,1,129),(485,1,130),(486,1,131),(487,1,54),(488,1,4),(489,1,16),(490,1,17),(491,1,95),(492,1,94),(493,1,18),(494,1,60),(495,1,62),(496,1,65),(497,1,59),(498,1,58),(499,1,61),(500,1,19),(501,1,63),(502,1,66),(503,1,64),(504,1,67),(505,1,104),(506,1,105),(507,1,30),(508,1,31),(509,1,34),(510,3,68),(511,3,71),(512,3,75),(513,3,69),(514,3,80),(515,3,70),(516,3,84),(517,3,72),(518,3,74),(519,3,88),(520,3,73),(521,3,90),(522,3,96),(523,3,97),(524,3,98),(525,3,100),(526,3,101),(527,3,1),(528,3,14),(529,3,39),(530,3,2),(531,3,3),(532,3,9),(533,3,53),(534,3,13),(535,3,51),(536,3,32),(537,3,33),(538,3,55),(539,3,54),(540,3,4),(541,3,16),(542,3,17),(543,3,95),(544,3,18),(545,3,58),(546,3,19),(547,3,66),(548,3,67),(549,3,104),(550,3,30),(551,3,31),(552,3,34),(704,1,141),(707,4,68),(708,4,71),(709,4,75),(710,4,76),(711,4,79),(712,4,77),(713,4,78),(714,4,103),(715,4,69),(716,4,80),(717,4,81),(718,4,82),(719,4,83),(720,4,70),(721,4,84),(722,4,85),(723,4,86),(724,4,87),(725,4,110),(726,4,111),(727,4,112),(728,4,113),(729,4,72),(730,4,74),(731,4,88),(732,4,89),(733,4,114),(734,4,115),(735,4,116),(736,4,117),(737,4,118),(738,4,119),(739,4,120),(740,4,121),(741,4,122),(742,4,73),(743,4,90),(744,4,91),(745,4,92),(746,4,93),(747,4,123),(748,4,124),(749,4,125),(750,4,126),(751,4,127),(752,4,96),(753,4,97),(754,4,98),(755,4,99),(756,4,100),(757,4,101),(758,4,102),(759,4,106),(760,4,107),(761,4,108),(762,4,109),(763,4,141),(764,4,1),(765,4,14),(766,4,39),(767,4,27),(768,4,28),(769,4,29),(770,4,52),(771,4,9),(772,4,10),(773,4,53),(774,4,11),(775,4,12),(776,4,44),(777,4,136),(778,4,137),(779,4,138),(780,4,139),(781,4,140),(782,4,13),(783,4,48),(784,4,51),(785,4,49),(786,4,50),(787,4,32),(788,4,33),(789,4,55),(790,4,56),(791,4,128),(792,4,129),(793,4,130),(794,4,131),(795,4,54),(796,4,4),(797,4,16),(798,4,17),(799,4,95),(800,4,94),(801,4,18),(802,4,60),(803,4,62),(804,4,65),(805,4,59),(806,4,58),(807,4,61),(808,4,19),(809,4,63),(810,4,66),(811,4,64),(812,4,67),(813,4,104),(814,4,105),(815,4,30),(816,4,31),(817,2,68),(818,2,71),(819,2,75),(820,2,76),(821,2,79),(822,2,77),(823,2,78),(824,2,103),(825,2,110),(826,2,111),(827,2,112),(828,2,113),(829,2,72),(830,2,114),(831,2,115),(832,2,116),(833,2,117),(834,2,118),(835,2,119),(836,2,120),(837,2,121),(838,2,122),(839,2,73),(840,2,90),(841,2,123),(842,2,124),(843,2,96),(844,2,97),(845,2,98),(846,2,99),(847,2,100),(848,2,101),(849,2,102),(850,2,1),(851,2,14),(852,2,27),(853,2,28),(854,2,29),(855,2,2),(856,2,8),(857,2,128),(858,2,129),(859,2,131),(860,2,4);
/*!40000 ALTER TABLE `sys_role_menu` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sys_tag`
--

DROP TABLE IF EXISTS `sys_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sys_tag` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '名称',
  `sort` int DEFAULT NULL COMMENT '排序',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=206 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='标签表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sys_tag`
--

LOCK TABLES `sys_tag` WRITE;
/*!40000 ALTER TABLE `sys_tag` DISABLE KEYS */;
INSERT INTO `sys_tag` VALUES (1,'Spring Boot',20,'2021-11-12 14:43:27','2023-06-05 03:00:00'),(12,'Vue',18,'2021-12-29 14:01:50','2023-06-05 03:00:00'),(13,'Spring Cloud',19,'2021-12-29 14:02:32','2023-06-05 03:00:00'),(18,'Linux',10,'2022-01-25 14:09:17','2023-06-05 03:00:00'),(31,'Mysql',10,'2022-02-18 16:01:07','2023-06-05 03:00:00'),(32,'Nginx',5,'2022-04-13 17:48:08','2023-06-05 03:00:00'),(57,'Java Script',1,'2023-06-27 16:02:33','2023-06-27 08:02:32'),(59,'Dcoker',12,'2023-07-13 15:51:12','2023-07-13 07:51:12'),(62,'oauth2',0,'2023-08-15 09:30:12','2023-08-15 01:30:11'),(63,'服务器',0,'2023-09-05 17:28:08','2023-09-05 09:28:07'),(109,'深度学习',NULL,'2025-04-28 16:45:42',NULL),(110,'大模型应用',NULL,'2025-04-28 16:45:42',NULL),(111,'RAG',NULL,'2025-04-28 16:45:43',NULL),(112,'DeepSeek',NULL,'2025-04-28 16:45:43',NULL),(116,'Python之路',NULL,'2025-04-28 16:46:23',NULL),(117,'计算机视觉',NULL,'2025-04-28 16:46:23',NULL),(118,'机器学习',NULL,'2025-04-28 16:46:23',NULL),(119,'opencv',NULL,'2025-04-28 16:46:23',NULL),(120,'算法分析',NULL,'2025-04-28 16:47:04',NULL),(134,'AI',NULL,'2025-04-28 16:52:50',NULL),(135,'智能体',NULL,'2025-04-28 16:52:50',NULL),(136,'c语言',NULL,'2025-04-28 16:53:21',NULL),(140,'prometheus',NULL,'2025-04-28 17:10:14',NULL),(144,'运维监控',NULL,'2025-04-28 17:10:15',NULL),(145,'业务接口',NULL,'2025-04-28 17:10:15',NULL),(158,'mybatis',NULL,'2025-04-28 17:18:17',NULL),(159,'测试开发和测试',NULL,'2025-04-28 17:18:54',NULL),(161,'Python',NULL,'2025-04-28 17:18:54',NULL),(162,'质量效能',NULL,'2025-04-28 17:18:55',NULL),(163,'智能化测试',NULL,'2025-04-28 17:18:55',NULL),(166,'ocr',NULL,'2025-04-28 17:19:21',NULL),(167,'大数据',NULL,'2025-04-28 17:19:21',NULL),(168,'图像识别',NULL,'2025-04-28 17:19:21',NULL),(169,'图表解析',NULL,'2025-04-28 17:19:21',NULL),(173,'visual studio',NULL,'2025-04-28 17:19:57',NULL);
/*!40000 ALTER TABLE `sys_tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sys_user_pay`
--

DROP TABLE IF EXISTS `sys_user_pay`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sys_user_pay` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `user_id` bigint NOT NULL COMMENT '用户ID',
  `article_id` bigint NOT NULL COMMENT '文章ID',
  PRIMARY KEY (`id`) USING BTREE,
  KEY `idx_user_id` (`user_id`) USING BTREE,
  KEY `idx_article_id` (`article_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='付费文章关联表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sys_user_pay`
--

LOCK TABLES `sys_user_pay` WRITE;
/*!40000 ALTER TABLE `sys_user_pay` DISABLE KEYS */;
INSERT INTO `sys_user_pay` VALUES (1,1,292),(2,1,296);
/*!40000 ALTER TABLE `sys_user_pay` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sys_user_role`
--

DROP TABLE IF EXISTS `sys_user_role`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sys_user_role` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `role_id` int DEFAULT NULL COMMENT '角色ID',
  `user_id` int DEFAULT NULL COMMENT '用户ID',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=84 DEFAULT CHARSET=utf8mb3 COMMENT='系统管理 - 用户角色关联表 ';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sys_user_role`
--

LOCK TABLES `sys_user_role` WRITE;
/*!40000 ALTER TABLE `sys_user_role` DISABLE KEYS */;
INSERT INTO `sys_user_role` VALUES (58,2,13),(60,1,15),(75,1,1),(78,4,14),(79,1,2),(80,2,3),(81,2,16),(82,2,17),(83,2,18);
/*!40000 ALTER TABLE `sys_user_role` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sys_web_config`
--

DROP TABLE IF EXISTS `sys_web_config`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sys_web_config` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键',
  `logo` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT 'logo(文件UID)',
  `name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '网站名称',
  `summary` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '介绍',
  `record_num` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '备案号',
  `web_url` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '网站地址',
  `author` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '作者',
  `author_info` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '个性签名',
  `author_avatar` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '作者头像',
  `ali_pay` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '支付宝收款码',
  `weixin_pay` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '微信收款码',
  `github` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT 'github地址',
  `gitee` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT 'gitee地址',
  `qq_number` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT 'QQ号',
  `qq_group` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT 'QQ群',
  `email` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '邮箱',
  `wechat` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '微信',
  `show_list` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '显示的列表（用于控制邮箱、QQ、QQ群、Github、Gitee、微信是否显示在前端）',
  `login_type_list` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '登录方式列表（用于控制前端登录方式，如账号密码,码云,Github,QQ,微信）',
  `open_comment` tinyint(1) NOT NULL DEFAULT '1' COMMENT '是否开启评论(0:否 1:是)',
  `open_admiration` tinyint(1) NOT NULL DEFAULT '1' COMMENT '是否开启赞赏(0:否， 1:是)',
  `tourist_avatar` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '游客头像',
  `about_me` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci COMMENT '关于我',
  `create_time` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '更新时间',
  `open_lantern` int DEFAULT NULL COMMENT '开启灯笼',
  `bulletin` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='网站配置表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sys_web_config`
--

LOCK TABLES `sys_web_config` WRITE;
/*!40000 ALTER TABLE `sys_web_config` DISABLE KEYS */;
INSERT INTO `sys_web_config` VALUES (1,'http://113.45.240.54:9092/default/11e1b479-7d83-419e-99c1-5e0e8c729588_logo.jpeg','码云星链','一个专注于技术分享的博客平台','','https://gitee.com/tticw/code-cloud-star-chain.git','码云星链','遇事不决，可问春风','https://api.dicebear.com/7.x/avataaars/svg?seed=Felix','http://127.0.0.1:80/localFile/local-plus/20250427/default/91_屏幕截图 2025-04-14 224717.png','http://127.0.0.1:80/localFile/local-plus/20250427/default/00_屏幕截图 2025-01-22 004145.png','https://gitee.com/brony','https://gitee.com/brony','1248954763','779881756','1248954763@qq.com','1248954763','[\"qq\",\"wechat\",\"gitee\",\"qqGroup\",\"github\",\"email\"]','[\"gitee\",\"qq\",\"wechat\"]',1,1,'https://api.dicebear.com/7.x/avataaars/svg?seed=Guest','<h3>网站简介</h3><p> &nbsp; &nbsp; &nbsp; &nbsp;码云星链是一个博客平台，旨在提供技术分享与开发记录。网站定位于前后端技术交流，并集成了多种现代开发工具，以便开发者学习和使用。</p><h3>网站的创建背景、目的和定位</h3><p> &nbsp; &nbsp; &nbsp; &nbsp;码云星链的创建初衷是为开发者提供一个可以记录、交流和学习技术的平台。它主要聚焦于前后端开发技术，并支持多种功能，如第三方登录、动态权限管理等，以优化用户体验。</p><h3>网站的主要内容或主题</h3><p> &nbsp; &nbsp; &nbsp; &nbsp;网站主要围绕技术分享展开，涵盖博客发布、技术探讨、代码高亮、搜索优化、前后端分离等内容，同时还支持第三方授权登录，提升用户访问便捷度。</p><p><br></p><h3>网站历史</h3><p><strong>创建时间：2025年4月27日 发展历程：网站持续迭代更新，并且支持Markdown编辑器、弹幕留言、RBAC权限管理等功能，以提升用户体验。 重要里程碑：</strong></p><ul><li>增加推荐文章功能，提高内容曝光度。</li><li>集成AOP日志管理，实现动态权限修改。</li><li>提供博客群聊功能，支持发送表情、图片、文件等。</li></ul><p><br></p><h3>技术栈</h3><p><strong>前端技术：</strong></p><ul><li>门户：Vue 2.0 + Vuex + Vue Router + Axios + Element UI</li><li>后台管理系统：Vue 3.0 + Pinia + Vue Router + Axios + Element Plus + ECharts</li></ul><p><strong>后端技术：</strong></p><ul><li>Spring Boot + Nginx + Docker + Sa-Token + Swagger2 + MyBatis Plus + MySQL + Redis + Elasticsearch</li></ul><p><strong>部署方式：</strong></p><ul><li>服务器：腾讯云2核4G CentOS7.6</li><li>对象存储：七牛云OSS</li><li>可调整配置以适应不同服务器环境</li></ul><p><br></p><h3>版权声明</h3><p> &nbsp; &nbsp; &nbsp; &nbsp;网站内容的版权归属码云星链所有。 允许转载和引用，但需注明来源，并遵守开源协议要求。</p><p><br></p><h3>隐私政策</h3><p><strong>网站会对用户数据进行收集和存储，主要用于分析访问情况和优化用户体验。 使用的第三方服务：</strong></p><ul><li>统计工具：集成ElasticSearch提高搜索体验</li><li>对象存储：七牛云OSS</li><li>账户管理：支持QQ、码云、微信公众号授权登录</li></ul><p><br></p><h3>鸣谢</h3><p>网站依赖多个开源项目，如：</p><ul><li>Vue、Spring Boot、MyBatis Plus、Redis</li><li>七牛云存储、Sa-Token权限认证</li></ul><p>感谢社区及开发者的贡献，欢迎提交PR共同改进项目。</p><p><br></p><h3>留言或反馈</h3><p> &nbsp; &nbsp; &nbsp; &nbsp;网站希望持续优化用户体验，并增加更多趣味功能，如访问统计、深色模式、彩蛋展示等。 你可以通过留言或提交代码建议参与改进，让这个博客平台更具活力！🚀</p>','2024-12-22 11:55:25','2024-12-22 11:55:25',1,NULL);
/*!40000 ALTER TABLE `sys_web_config` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `users` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `username` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '用户名',
  `password` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '密码',
  `avatar` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT 'http://test.yudao.iocoder.cn/f5660f0f8998e8d89f2d742fedee7cbb7e85ecc505bd33b3cc0f75b6a0395931.png' COMMENT '头像',
  `login_type` int NOT NULL COMMENT '登录类型(1:邮箱验证登录，2：微信扫码登录，3：gitee授权登录)',
  `create_time` datetime NOT NULL COMMENT '注册时间',
  `user_info` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '暂无简介' COMMENT '用户简介',
  `status` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '1' COMMENT '状态',
  `ip` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT 'ip',
  `ip_location` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT 'ip地址',
  `os` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '操作系统',
  `nickname` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '昵称',
  `sex` int NOT NULL DEFAULT '1' COMMENT '性别(1:男；2：女)',
  `balance` double NOT NULL DEFAULT '0' COMMENT '余额',
  `type` int NOT NULL COMMENT '用户类型(1:管理员，2：普通用户，3：超级管理员)',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `email` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '邮箱',
  `mobile` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '手机号',
  `last_login_time` datetime DEFAULT NULL COMMENT '上一次登录时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'admin','$2a$10$WqeDDkDqtMaG3RTxQnDPIuFHN7H.YzOE3lni14.VEeuF5PUzXpY2m','http://113.45.240.54:9092/avatar/6bdadd75-f521-441b-8b16-ccefdaa59cfc_avatar.png',1,'2025-06-25 10:46:47','暂无简介','1','49.93.18.66','中国|江苏省|南京市|电信','Linux','码云星链-超级管理员',1,1,1,'2025-06-30 08:53:34','','18016724816','2025-07-31 11:18:08'),(2,'user','$2a$10$WqeDDkDqtMaG3RTxQnDPIuFHN7H.YzOE3lni14.VEeuF5PUzXpY2m','http://113.45.240.54:9092/avatar/efb77dae-458d-4a37-989c-6db78eabb935_100n0x000000lfrm69B27.jpg',2,'2025-06-25 12:10:06','暂无简介','1','112.245.48.104','中国|山东省|泰安市|联通','Windows','码云星链-用户',1,1,2,'2025-06-30 06:58:40',NULL,NULL,'2025-07-28 21:21:02'),(3,'111','$2a$10$WqeDDkDqtMaG3RTxQnDPIuFHN7H.YzOE3lni14.VEeuF5PUzXpY2m','http://113.45.240.54:9092/avatar/8dd8793f-bf4a-4cc9-a9ab-cf828e0c7012_avatar.jpg',2,'2025-06-25 12:10:06','暂无简介','1','112.245.48.104','中国|山东省|泰安市|联通','Windows','码云星链-用户',1,1,2,'2025-06-30 07:21:26',NULL,NULL,'2025-07-28 21:23:18'),(14,'2180323848@qq.com','$2a$10$WqeDDkDqtMaG3RTxQnDPIuFHN7H.YzOE3lni14.VEeuF5PUzXpY2m','https://api.dicebear.com/6.x/pixel-art/svg?seed=Bunny',1,'2025-06-26 10:19:14','暂无简介','1','113.45.240.54','中国|北京|北京市|鹏博士','Linux','icw',1,0,2,'2025-06-29 21:08:01','2180323848@qq.com',NULL,'2025-07-16 14:41:19'),(15,'o2Tn77E5dA67kKNL3idSF14csKgs','$2a$10$I9XRZQU6bb/K.nNManu59OTeM4P4OkhaAm6qPLoL.unsy.RtXy9kO','https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIZmpjibvlwshS7GAWbEjEibsylzByOV1mIZ0eGq4F0caZnicj0YUOuKvofbMI8sXyxmyKDo7xUjFraVNOKYoUPh7lKHA5KDqDzO24GF5Tfe2Vvg/132',2,'2025-06-26 11:04:00','暂无简介','1','182.39.9.154','中国|山东省|莱芜市|电信','Linux','🍑 icw.',1,0,1,'2025-06-26 23:16:48',NULL,NULL,'2025-07-28 10:48:32'),(16,'13301976','2180323848@qq.com','http://113.45.240.54:9092/avatar/749af0d0-f94c-410b-916d-56d70f666799_微信图片_20220926121552.jpg',3,'2025-06-26 18:50:33','暂无简介','1','117.132.41.137','中国|山东省|泰安市|移动','Windows','icw',1,0,2,'2025-06-30 06:58:55',NULL,NULL,'2025-07-28 16:34:38'),(17,'14698172','1964960588@qq.com','https://foruda.gitee.com/avatar/1746785207225909707/14698172_lds7871_1746785195.png',3,'2025-07-27 19:24:58','暂无简介','1','36.60.91.72','中国|安徽省|合肥市|电信','Windows','00FF00HEAD',1,0,2,NULL,NULL,NULL,'2025-07-27 19:24:58'),(18,'o2Tn77Ch1uDltxEZJ7SYnQvfdof8','$2a$10$Hu9yCfFHh5Dv2evBlyu5se3n/REJLTqyFAhgIfjvwaawo6ia3ovJK','https://thirdwx.qlogo.cn/mmopen/vi_32/FhMSuUga8jGHibXFzqdrwbAKfibAuw9n1Hyc9J01hzM0HdPSEjUoH88cVsuCia4ZNaSOicEEQ5iadgxp8icpL1U27lzQ/132',2,'2025-07-28 10:15:46','暂无简介','1','117.132.41.137','中国|山东省|泰安市|移动','Linux','＃00FF00_HEAD',2,0,2,NULL,NULL,NULL,'2025-07-28 10:15:47');
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2025-08-04 11:15:37
